[
    {
        "text": "activate_wp_head",
        "description": "Fires before the Site Activation page is loaded, but on the wp_head action.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "activate_header",
        "description": "Fires before the Site Activation page is loaded.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_init",
        "description": "This action is documented in wp-admin\/admin.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_ajax_{$_REQUEST['action']}",
        "description": "Fires authenticated AJAX actions for logged-in users.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_ajax_nopriv_{$_REQUEST['action']}",
        "description": "Fires non-authenticated AJAX actions for logged-out users.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "in_admin_footer",
        "description": "Fires after the opening tag for the admin footer.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_footer_text",
        "description": "Filter the \"Thank you\" text displayed in the admin footer.",
        "arguments": [
            {
                "type": "string",
                "name": "$text",
                "description": "The content that will be printed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_footer",
        "description": "Filter the version\/update text displayed in the admin footer.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "The content that will be printed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_footer",
        "description": "Print scripts or data before the default footer scripts.",
        "arguments": [
            {
                "type": "string",
                "name": "$data",
                "description": "The data to print."
            }
        ],
        "type": "action"
    },
    {
        "text": "admin_print_footer_scripts",
        "description": "Prints any scripts and data queued for the footer.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_footer-{$GLOBALS['hook_suffix']}",
        "description": "Print scripts or data after the default footer scripts.",
        "arguments": [
            {
                "type": "string",
                "name": "$hook_suffix",
                "description": "The current admin page."
            }
        ],
        "type": "action"
    },
    {
        "text": "admin_title",
        "description": "Filter the title tag content for an admin page.",
        "arguments": [
            {
                "type": "string",
                "name": "$admin_title",
                "description": "The page title, with extra context added."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "The original page title."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_enqueue_scripts",
        "description": "Enqueue scripts for all admin pages.",
        "arguments": [
            {
                "type": "string",
                "name": "$hook_suffix",
                "description": "The current admin page."
            }
        ],
        "type": "action"
    },
    {
        "text": "admin_print_styles-{$hook_suffix}",
        "description": "Fires when styles are printed for a specific admin page based on $hook_suffix.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_print_styles",
        "description": "Fires when styles are printed for all admin pages.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_print_scripts-{$hook_suffix}",
        "description": "Fires when scripts are printed for a specific admin page based on $hook_suffix.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_print_scripts",
        "description": "Fires when scripts are printed for all admin pages.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_head-{$hook_suffix}",
        "description": "Fires in head section for a specific admin page.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_head",
        "description": "Fires in head section for all admin pages.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_body_class",
        "description": "Filter the CSS classes for the body tag in the admin.",
        "arguments": [
            {
                "type": "string",
                "name": "$classes",
                "description": "Space-separated list of CSS classes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "in_admin_header",
        "description": "Fires at the beginning of the content section in an admin page.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "network_admin_notices",
        "description": "Print network admin screen notices.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "user_admin_notices",
        "description": "Print user admin screen notices.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_notices",
        "description": "Print admin screen notices.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "all_admin_notices",
        "description": "Print generic admin screen notices.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_post_nopriv",
        "description": "Fires on a non-authenticated admin post request where no action was supplied.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_post_nopriv_{$action}",
        "description": "Fires on a non-authenticated admin post request for the given action.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_post",
        "description": "Fires on an authenticated admin post request where no action was supplied.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_post_{$action}",
        "description": "Fires on an authenticated admin post request for the given action.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "after_db_upgrade",
        "description": "Fires on the next page load after a successful DB upgrade.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "do_mu_upgrade",
        "description": "In WordPress Administration Screens",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "after_mu_upgrade",
        "description": "This action is documented in wp-admin\/network\/upgrade.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_memory_limit",
        "description": "Filter the maximum memory limit available for administration screens.",
        "arguments": [
            {
                "type": "string",
                "name": "",
                "description": "'WP_MAX_MEMORY_LIMIT' The maximum WordPress memory limit. Default 256M."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load-{$page_hook}",
        "description": "Fires before a particular screen is loaded.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "{$page_hook}",
        "description": "Used to call the registered callback for a plugin screen.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "load-{$plugin_page}",
        "description": "Fires before a particular screen is loaded.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "load-importer-{$importer}",
        "description": "Fires before an importer screen is loaded.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "force_filtered_html_on_import",
        "description": "Whether to filter imported data through kses on import.",
        "arguments": [
            {
                "type": "bool",
                "name": "",
                "description": "false Whether to force data to be filtered through kses. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load-{$pagenow}",
        "description": "Fires before a particular screen is loaded.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "load-page-new.php",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "load-page.php",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "load-categories.php",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "load-edit-link-categories.php",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_action_{$_REQUEST['action']}",
        "description": "Fires when an 'action' request variable is sent.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "async_upload_{$type}",
        "description": "Filter the returned ID of an uploaded attachment.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "Uploaded attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_edit_redirect",
        "description": "Filter the URI the user is redirected to after editing a comment in the admin.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The URI the user will be redirected to."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The ID of the comment being edited."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_controls_init",
        "description": "Fires when Customizer controls are initialized, before scripts are enqueued.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "customize_controls_enqueue_scripts",
        "description": "Enqueue Customizer control scripts.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "customize_controls_print_styles",
        "description": "Fires when Customizer control styles are printed.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "customize_controls_print_scripts",
        "description": "Fires when Customizer control scripts are printed.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "customize_controls_print_footer_scripts",
        "description": "Print templates, control scripts, and settings in the footer.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_editor_expand",
        "description": "Filter whether to enable the 'expand' functionality in the post editor.",
        "arguments": [
            {
                "type": "bool",
                "name": "$expand",
                "description": "Whether to enable the 'expand' functionality. Default true."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_updated_messages",
        "description": "Filter the post updated messages.",
        "arguments": [
            {
                "type": "array",
                "name": "$messages",
                "description": "Post updated messages. For defaults @see $messages declarations above."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dbx_post_advanced",
        "description": "Fires in the middle of built-in meta box registration.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_meta_boxes",
        "description": "Fires after all built-in meta boxes have been added.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_meta_boxes_{$post_type}",
        "description": "Fires after all built-in meta boxes have been added, contextually for the given post type.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "do_meta_boxes",
        "description": "Fires after meta boxes have been added.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type of the post."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "string  Meta box context."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_edit_form_tag",
        "description": "Fires inside the post editor form tag.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_form_top",
        "description": "Fires at the beginning of the edit form.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "enter_title_here",
        "description": "Filter the title field placeholder text.",
        "arguments": [
            {
                "type": "string",
                "name": "$text",
                "description": "Placeholder text. Default 'Enter title here'."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_form_before_permalink",
        "description": "Fires before the permalink field in the edit form.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_form_after_title",
        "description": "Fires after the title field.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_form_after_editor",
        "description": "Fires after the content editor.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "submitpage_box",
        "description": "Fires before meta boxes with 'side' context are output for the 'page' post type.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "submitpost_box",
        "description": "Fires before meta boxes with 'side' context are output for all post types other than 'page'.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_page_form",
        "description": "Fires after 'normal' context meta boxes have been output for the 'page' post type.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_form_advanced",
        "description": "Fires after 'normal' context meta boxes have been output for all post types other than 'page'.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "dbx_post_sidebar",
        "description": "Fires after all meta box sections have been output, before the closing #post-body div.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_comment_misc_actions",
        "description": "Filter miscellaneous actions for the edit comment form sidebar.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "Output HTML to display miscellaneous action."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "Current comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "add_meta_boxes_comment",
        "description": "Fires when comment-specific meta boxes are added.",
        "arguments": [
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "Comment object."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_meta_boxes_link",
        "description": "Fires when link-specific meta boxes are added.",
        "arguments": [
            {
                "type": "object",
                "name": "$link",
                "description": "Link object."
            }
        ],
        "type": "action"
    },
    {
        "text": "submitlink_box",
        "description": "This action is documented in wp-admin\/includes\/meta-boxes.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "edit_category_form_pre",
        "description": "Fires before the Edit Category form.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current category term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_link_category_form_pre",
        "description": "Fires before the Edit Link Category form.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current link category term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_tag_form_pre",
        "description": "Fires before the Edit Tag form.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current tag term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_pre_edit_form",
        "description": "Fires before the Edit Term form for all taxonomies.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current taxonomy term object."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Current $taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_term_edit_form_tag",
        "description": "Fires inside the Edit Term form tag.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "editable_slug",
        "description": "Filter the editable slug.",
        "arguments": [
            {
                "type": "string",
                "name": "$slug",
                "description": "The editable slug. Will be either a term slug or post URI depending                             upon the context in which it is evaluated."
            },
            {
                "type": "object",
                "name": "$tag",
                "description": "Term or WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_category_form_fields",
        "description": "Fires after the Edit Category form fields are displayed.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current category term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_link_category_form_fields",
        "description": "Fires after the Edit Link Category form fields are displayed.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current link category term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_tag_form_fields",
        "description": "Fires after the Edit Tag form fields are displayed.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current tag term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_edit_form_fields",
        "description": "Fires after the Edit Term form fields are displayed.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current taxonomy term object."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Current taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_category_form",
        "description": "This action is documented in wp-admin\/edit-tags.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "edit_link_category_form",
        "description": "This action is documented in wp-admin\/edit-tags.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "edit_tag_form",
        "description": "Fires at the end of the Edit Term form.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current taxonomy term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_edit_form",
        "description": "Fires at the end of the Edit Term form for all taxonomies.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current taxonomy term object."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Current taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "after-{$taxonomy}-table",
        "description": "Fires after the taxonomy list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy name."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_category_form_pre",
        "description": "Fires before the Add Category form.",
        "arguments": [
            {
                "type": "object",
                "name": "$arg",
                "description": "Optional arguments cast to an object."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_link_category_form_pre",
        "description": "Fires before the link category form.",
        "arguments": [
            {
                "type": "object",
                "name": "$arg",
                "description": "Optional arguments cast to an object."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_tag_form_pre",
        "description": "Fires before the Add Tag form.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_pre_add_form",
        "description": "Fires before the Add Term form for all taxonomies.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_term_new_form_tag",
        "description": "Fires at the beginning of the Add Tag form.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "add_tag_form_fields",
        "description": "Fires after the Add Tag form fields for non-hierarchical taxonomies.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_add_form_fields",
        "description": "Fires after the Add Term form fields.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_tag_form",
        "description": "Fires at the end of the Add Tag form.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_add_form",
        "description": "Fires at the end of the Add Term form for all taxonomies.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "bulk_post_updated_messages",
        "description": "Filter the bulk action updated messages.",
        "arguments": [
            {
                "type": "array",
                "name": "$bulk_messages",
                "description": "Arrays of messages, each keyed by the corresponding post type. Messages are                             keyed with 'updated', 'locked', 'deleted', 'trashed', and 'untrashed'."
            },
            {
                "type": "array",
                "name": "$bulk_counts",
                "description": "Array of item counts for each message, used to build internationalized strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "export_args",
        "description": "Filter the export args.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "The arguments to send to the exporter."
            }
        ],
        "type": "filter"
    },
    {
        "text": "export_filters",
        "description": "Fires after the export filters form.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "heartbeat_nopriv_received",
        "description": "Filter Heartbeat AJAX response in no-privilege environments.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "The no-priv Heartbeat response object or array."
            },
            {
                "type": "array",
                "name": "$data",
                "description": "An array of data passed via $_POST."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "The screen id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "heartbeat_nopriv_send",
        "description": "Filter Heartbeat AJAX response when no data is passed.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "The Heartbeat response object or array."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "The screen id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "heartbeat_nopriv_tick",
        "description": "Fires when Heartbeat ticks in no-privilege environments.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "The no-priv Heartbeat response."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "The screen id."
            }
        ],
        "type": "action"
    },
    {
        "text": "term_search_min_chars",
        "description": "Filter the minimum number of characters required to fire a tag search via AJAX.",
        "arguments": [
            {
                "type": "int",
                "name": "$characters",
                "description": "The minimum number of characters required. Default 2."
            },
            {
                "type": "object",
                "name": "$tax",
                "description": "The taxonomy object."
            },
            {
                "type": "string",
                "name": "$s",
                "description": "The search term."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load-widgets.php",
        "description": "Fires early when editing the widgets displayed in sidebars.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "widgets.php",
        "description": "Fires early when editing the widgets displayed in sidebars.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "sidebar_admin_setup",
        "description": "This action is documented in wp-admin\/widgets.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "delete_widget",
        "description": "This action is documented in wp-admin\/widgets.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_check_post_lock_window",
        "description": "Filter the post lock window duration.",
        "arguments": [
            {
                "type": "int",
                "name": "$interval",
                "description": "The interval in seconds the post lock duration                      should last, plus 5 seconds. Default 150."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ajax_query_attachments_args",
        "description": "Filter the arguments passed to WP_Query during an AJAX call for querying attachments.",
        "arguments": [
            {
                "type": "array",
                "name": "$query",
                "description": "An array of query variables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_refresh_nonces",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "heartbeat_received",
        "description": "Filter the Heartbeat response received.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "The Heartbeat response object or array."
            },
            {
                "type": "array",
                "name": "$data",
                "description": "The $_POST data sent."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "The screen id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "heartbeat_send",
        "description": "Filter the Heartbeat response sent.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "The Heartbeat response object or array."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "The screen id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "heartbeat_tick",
        "description": "Fires when Heartbeat ticks in logged-in environments.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "The Heartbeat response object or array."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "The screen id."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_ajax_crop_image_pre_save",
        "description": "Fires before a cropped image is saved.",
        "arguments": [
            {
                "type": "string",
                "name": "$context",
                "description": "The Customizer control requesting the cropped image."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "The attachment ID of the original image."
            },
            {
                "type": "string",
                "name": "$cropped",
                "description": "Path to the cropped image file."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_ajax_cropped_attachment_metadata",
        "description": "Filter the cropped image attachment metadata.",
        "arguments": [
            {
                "type": "array",
                "name": "$metadata",
                "description": "Attachment metadata."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_ajax_cropped_attachment_id",
        "description": "Filter the attachment ID for a cropped image.",
        "arguments": [
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "The attachment ID of the cropped image."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The Customizer control requesting the cropped image."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_link",
        "description": "Fires before a link is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$link_id",
                "description": "ID of the link to delete."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_link",
        "description": "Fires after a link has been deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$link_id",
                "description": "ID of the deleted link."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_link",
        "description": "Fires after a link was updated in the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$link_id",
                "description": "ID of the link that was updated."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_link",
        "description": "Fires after a link was added to the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$link_id",
                "description": "ID of the link that was added."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_edit_pre",
        "description": "Filter the comment content before editing.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment->comment_content",
                "description": "Comment content."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_network_dashboard_setup",
        "description": "Fires after core widgets for the Network Admin dashboard have been registered.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_network_dashboard_widgets",
        "description": "Filter the list of widgets to load for the Network Admin dashboard.",
        "arguments": [
            {
                "type": "array",
                "name": "$dashboard_widgets",
                "description": "An array of dashboard widgets."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_user_dashboard_setup",
        "description": "Fires after core widgets for the User Admin dashboard have been registered.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_user_dashboard_widgets",
        "description": "Filter the list of widgets to load for the User Admin dashboard.",
        "arguments": [
            {
                "type": "array",
                "name": "$dashboard_widgets",
                "description": "An array of dashboard widgets."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_dashboard_setup",
        "description": "Fires after core widgets for the admin dashboard have been registered.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_dashboard_widgets",
        "description": "Filter the list of widgets to load for the admin dashboard.",
        "arguments": [
            {
                "type": "array",
                "name": "$dashboard_widgets",
                "description": "An array of dashboard widgets."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_glance_items",
        "description": "Filter the array of extra elements to list in the 'At a Glance' dashboard widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$items",
                "description": "Array of extra 'At a Glance' widget items."
            }
        ],
        "type": "filter"
    },
    {
        "text": "privacy_on_link_title",
        "description": "Filter the link title attribute for the 'Search Engines Discouraged' message displayed in the 'At a Glance' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Default attribute text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "privacy_on_link_text",
        "description": "Filter the link label for the 'Search Engines Discouraged' message displayed in the 'At a Glance' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Default text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rightnow_end",
        "description": "Fires at the end of the 'At a Glance' dashboard widget.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "activity_box_end",
        "description": "Fires at the end of the 'At a Glance' dashboard widget.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wpmuadminresult",
        "description": "Fires in the Network Admin 'Right Now' dashboard widget just before the user and site search form fields.",
        "arguments": [
            {
                "type": "null",
                "name": "$unused",
                "description": ""
            }
        ],
        "type": "action"
    },
    {
        "text": "mu_rightnow_end",
        "description": "Fires at the end of the 'Right Now' widget in the Network Admin dashboard.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "mu_activity_box_end",
        "description": "Fires at the end of the 'Right Now' widget in the Network Admin dashboard.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "dashboard_recent_drafts_query_args",
        "description": "Filter the post query arguments for the 'Recent Drafts' dashboard widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$query_args",
                "description": "The query arguments for the 'Recent Drafts' dashboard widget."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_row_actions",
        "description": "Filter the action links displayed for each comment in the 'Recent Comments' dashboard widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of comment actions. Default actions include:                            'Approve', 'Unapprove', 'Edit', 'Reply', 'Spam',                            'Delete', and 'Trash'."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_recent_posts_query_args",
        "description": "Filter the query arguments used for the Recent Posts widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$query_args",
                "description": "The arguments passed to WP_Query to produce the list of posts."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_primary_link",
        "description": "Filter the primary link URL for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The widget's primary link URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_primary_feed",
        "description": "Filter the primary feed URL for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The widget's primary feed URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_primary_title",
        "description": "Filter the primary link title for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Title attribute for the widget's primary link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_secondary_link",
        "description": "Filter the secondary link URL for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The widget's secondary link URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_secondary_feed",
        "description": "Filter the secondary feed URL for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The widget's secondary feed URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_secondary_title",
        "description": "Filter the secondary link title for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Title attribute for the widget's secondary link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_secondary_items",
        "description": "Filter the number of secondary link items for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$items",
                "description": "How many items to show in the secondary feed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "browse-happy-notice",
        "description": "Filter the notice output for the 'Browse Happy' nag meta box.",
        "arguments": [
            {
                "type": "string",
                "name": "$notice",
                "description": "The notice content."
            },
            {
                "type": "array",
                "name": "$response",
                "description": "An array containing web browser information."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_editable_authors",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "get_others_drafts",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_create_thumbnail",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "term_updated_messages",
        "description": "Filter the messages displayed when a tag is updated.",
        "arguments": [
            {
                "type": "array",
                "name": "$messages",
                "description": "The messages to be displayed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "export_wp",
        "description": "Fires at the beginning of an export, before any headers are sent.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of export arguments."
            }
        ],
        "type": "action"
    },
    {
        "text": "export_wp_filename",
        "description": "Filter the export filename.",
        "arguments": [
            {
                "type": "string",
                "name": "$wp_filename",
                "description": "The name of the file for download."
            },
            {
                "type": "string",
                "name": "$sitename",
                "description": "The site name."
            },
            {
                "type": "string",
                "name": "$date",
                "description": "Today's date, formatted."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rss2_head",
        "description": "This action is documented in wp-includes\/feed-rss2.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "the_content_export",
        "description": "Filter the post content used for WXR exports.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_content",
                "description": "Content of the current post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_excerpt_export",
        "description": "Filter the post excerpt used for WXR exports.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_excerpt",
                "description": "Excerpt for the current post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wxr_export_skip_postmeta",
        "description": "Filter whether to selectively skip post meta used for WXR exports.",
        "arguments": [
            {
                "type": "bool",
                "name": "$skip",
                "description": "Whether to skip the current post meta. Default false."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Current meta key."
            },
            {
                "type": "object",
                "name": "$meta",
                "description": "Current meta object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wxr_export_skip_commentmeta",
        "description": "Filter whether to selectively skip comment meta used for WXR exports.",
        "arguments": [
            {
                "type": "bool",
                "name": "$skip",
                "description": "Whether to skip the current comment meta. Default false."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Current meta key."
            },
            {
                "type": "object",
                "name": "$meta",
                "description": "Current meta object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$action}_prefilter",
        "description": "Filter the data for a file before it is uploaded to WordPress.",
        "arguments": [
            {
                "type": "array",
                "name": "$file",
                "description": "An array of data for a single file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_handle_upload",
        "description": "Filter the data array for the uploaded file.",
        "arguments": [
            {
                "type": "array",
                "name": "$upload",
                "description": "{     Array of upload data.     @type string $file Filename of the newly-uploaded file.     @type string $url  URL of the uploaded file.     @type string $type File type. }"
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The type of upload action. Values include 'upload' or 'sideload'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "unzip_file_use_ziparchive",
        "description": "Filter whether to use ZipArchive to unzip archives.",
        "arguments": [
            {
                "type": "bool",
                "name": "$ziparchive",
                "description": "Whether to use ZipArchive. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "filesystem_method_file",
        "description": "Filter the path for a specific filesystem method class file.",
        "arguments": [
            {
                "type": "string",
                "name": "$path",
                "description": "Path to the specific filesystem method class file."
            },
            {
                "type": "string",
                "name": "$method",
                "description": "The filesystem method to use."
            }
        ],
        "type": "filter"
    },
    {
        "text": "filesystem_method",
        "description": "Filter the filesystem method to use.",
        "arguments": [
            {
                "type": "string",
                "name": "$method",
                "description": "Filesystem method to return."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of connection details for the method."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Full path to the directory that is tested for being writable."
            },
            {
                "type": "bool",
                "name": "$allow_relaxed_file_ownership",
                "description": "Whether to allow Group\/World writable."
            }
        ],
        "type": "filter"
    },
    {
        "text": "request_filesystem_credentials",
        "description": "Filter the filesystem credentials form output.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$output",
                "description": "Form output to return instead. Default empty."
            },
            {
                "type": "string",
                "name": "$form_post",
                "description": "URL to POST the form to."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Chosen type of filesystem."
            },
            {
                "type": "bool",
                "name": "$error",
                "description": "Whether the current request has failed to connect.                             Default false."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Full path to the directory that is tested for                             being writable."
            },
            {
                "type": "bool",
                "name": "$allow_relaxed_file_ownership",
                "description": "Whether to allow Group\/World writable."
            },
            {
                "type": "array",
                "name": "$extra_fields",
                "description": "Extra POST fields."
            }
        ],
        "type": "filter"
    },
    {
        "text": "fs_ftp_connection_types",
        "description": "Filter the connection types to output to the filesystem credentials form.",
        "arguments": [
            {
                "type": "array",
                "name": "$types",
                "description": "Types of connections."
            },
            {
                "type": "array",
                "name": "$credentials",
                "description": "Credentials to connect with."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Chosen filesystem method."
            },
            {
                "type": "object",
                "name": "$error",
                "description": "Error object."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Full path to the directory that is tested                            for being writable."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_editor_save_pre",
        "description": "Filter the WP_Image_Editor instance for the image to be streamed to the browser.",
        "arguments": [
            {
                "type": "\\WP_Image_Editor",
                "name": "$image",
                "description": "WP_Image_Editor instance."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_save_pre",
        "description": "Filter the GD image resource to be streamed to the browser.",
        "arguments": [
            {
                "type": "resource",
                "name": "$image",
                "description": "Image resource to be streamed."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_save_image_editor_file",
        "description": "Filter whether to skip saving the image file.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$override",
                "description": "Value to return instead of saving. Default null."
            },
            {
                "type": "string",
                "name": "$filename",
                "description": "Name of the file to be saved."
            },
            {
                "type": "\\WP_Image_Editor",
                "name": "$image",
                "description": "WP_Image_Editor instance."
            },
            {
                "type": "string",
                "name": "$mime_type",
                "description": "Image mime type."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_save_image_file",
        "description": "Filter whether to skip saving the image file.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$override",
                "description": "Value to return instead of saving. Default null."
            },
            {
                "type": "string",
                "name": "$filename",
                "description": "Name of the file to be saved."
            },
            {
                "type": "\\WP_Image_Editor",
                "name": "$image",
                "description": "WP_Image_Editor instance."
            },
            {
                "type": "string",
                "name": "$mime_type",
                "description": "Image mime type."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_image_editor_before_change",
        "description": "Filter the WP_Image_Editor instance before applying changes to the image.",
        "arguments": [
            {
                "type": "\\WP_Image_Editor",
                "name": "$image",
                "description": "WP_Image_Editor instance."
            },
            {
                "type": "array",
                "name": "$changes",
                "description": "Array of change operations."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_edit_before_change",
        "description": "Filter the GD image resource before applying changes to the image.",
        "arguments": [
            {
                "type": "resource",
                "name": "$image",
                "description": "GD image resource."
            },
            {
                "type": "array",
                "name": "$changes",
                "description": "Array of change operations."
            }
        ],
        "type": "filter"
    },
    {
        "text": "intermediate_image_sizes_advanced",
        "description": "Filter the image sizes automatically generated when uploading an image.",
        "arguments": [
            {
                "type": "array",
                "name": "$sizes",
                "description": "An associative array of image sizes."
            },
            {
                "type": "array",
                "name": "$metadata",
                "description": "An associative array of image metadata: width, height, file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "attachment_thumbnail_args",
        "description": "Filter the parameters for the attachment thumbnail creation.",
        "arguments": [
            {
                "type": "array",
                "name": "$image_attachment",
                "description": "An array of parameters to create the thumbnail."
            },
            {
                "type": "array",
                "name": "$metadata",
                "description": "Current attachment metadata."
            },
            {
                "type": "array",
                "name": "$uploaded",
                "description": "An array containing the thumbnail path and url."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_generate_attachment_metadata",
        "description": "Filter the generated attachment meta data.",
        "arguments": [
            {
                "type": "array",
                "name": "$metadata",
                "description": "An array of attachment meta data."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Current attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_read_image_metadata_types",
        "description": "Filter the image types to check for exif data.",
        "arguments": [
            {
                "type": "array",
                "name": "$image_types",
                "description": "Image types to check for exif data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_read_image_metadata",
        "description": "Filter the array of meta data read from an image's exif data.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta",
                "description": "Image meta data."
            },
            {
                "type": "string",
                "name": "$file",
                "description": "Path to image file."
            },
            {
                "type": "int",
                "name": "$sourceImageType",
                "description": "Type of image."
            },
            {
                "type": "array",
                "name": "$iptc",
                "description": "IPTC data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "file_is_displayable_image",
        "description": "Filter whether the current image is displayable in the browser.",
        "arguments": [
            {
                "type": "bool",
                "name": "$result",
                "description": "Whether the image can be displayed. Default true."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path to the image."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_image_to_edit",
        "description": "Filter the current image being loaded for editing.",
        "arguments": [
            {
                "type": "resource",
                "name": "$image",
                "description": "Current image."
            },
            {
                "type": "string",
                "name": "$attachment_id",
                "description": "Attachment ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Image size."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_image_to_edit_filesystempath",
        "description": "Filter the path to the current image.",
        "arguments": [
            {
                "type": "string",
                "name": "$path",
                "description": "Path to the current image."
            },
            {
                "type": "string",
                "name": "$attachment_id",
                "description": "Attachment ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Size of the image."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_image_to_edit_attachmenturl",
        "description": "Filter the image URL if not in the local filesystem.",
        "arguments": [
            {
                "type": "string",
                "name": "$image_url",
                "description": "Current image URL."
            },
            {
                "type": "string",
                "name": "$attachment_id",
                "description": "Attachment ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Size of the image."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_image_to_edit_path",
        "description": "Filter the returned path or URL of the current image.",
        "arguments": [
            {
                "type": "string",
                "name": "$filepath",
                "description": "File path or URL to current image, or false."
            },
            {
                "type": "string",
                "name": "$attachment_id",
                "description": "Attachment ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Size of the image."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_upload_tabs",
        "description": "Filter the available tabs in the legacy (pre-3.5.0) media popup.",
        "arguments": [
            {
                "type": "array",
                "name": "$_default_tabs",
                "description": "An array of media tabs."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_send_to_editor",
        "description": "Filter the image HTML markup to send to the editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "The image HTML markup to send."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "The attachment id."
            },
            {
                "type": "string",
                "name": "$caption",
                "description": "The image caption."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "The image title."
            },
            {
                "type": "string",
                "name": "$align",
                "description": "The image alignment."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The image source URL."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Size of image. Image size or array of width and height values                              (in that order). Default 'medium'."
            },
            {
                "type": "string",
                "name": "$alt",
                "description": "The image alternative, or alt, text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_add_caption_text",
        "description": "Filter the caption text.",
        "arguments": [
            {
                "type": "string",
                "name": "$caption",
                "description": "The original caption text."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "The attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "disable_captions",
        "description": "Filter whether to disable captions.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bool",
                "description": "Whether to disable appending captions. Returning true to the filter                   will disable captions. Default empty string."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_add_caption_shortcode",
        "description": "Filter the image HTML markup including the caption shortcode.",
        "arguments": [
            {
                "type": "string",
                "name": "$shcode",
                "description": "The image HTML markup with caption shortcode."
            },
            {
                "type": "string",
                "name": "$html",
                "description": "The image HTML markup."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_print_styles-media-upload-popup",
        "description": "Fires when admin styles enqueued for the legacy (pre-3.5.0) media upload popup are printed.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_print_scripts-media-upload-popup",
        "description": "Fires when admin scripts enqueued for the legacy (pre-3.5.0) media upload popup are printed.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_head-media-upload-popup",
        "description": "Fires when scripts enqueued for the admin header for the legacy (pre-3.5.0) media upload popup are printed.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_head_{$content_func}",
        "description": "Fires in the admin header for each specific form tab in the legacy (pre-3.5.0) media upload popup.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "media_buttons_context",
        "description": "Filter the legacy (pre-3.5.0) media buttons.",
        "arguments": [
            {
                "type": "string",
                "name": "$string",
                "description": "Media buttons context. Default empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$type}_upload_iframe_src",
        "description": "Filter the upload iframe source URL for a specific media type.",
        "arguments": [
            {
                "type": "string",
                "name": "$upload_iframe_src",
                "description": "The upload iframe source URL by type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_send_to_editor_url",
        "description": "Filter the image URL sent to the editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "HTML markup sent to the editor for an image."
            },
            {
                "type": "string",
                "name": "$src",
                "description": "Image source URL."
            },
            {
                "type": "string",
                "name": "$alt",
                "description": "Image alternate, or alt, text."
            },
            {
                "type": "string",
                "name": "$align",
                "description": "The image alignment. Default 'alignnone'. Possible values include                      'alignleft', 'aligncenter', 'alignright', 'alignnone'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_size_names_choose",
        "description": "Filter the names and labels of the default image sizes.",
        "arguments": [
            {
                "type": "array",
                "name": "$size_names",
                "description": "Array of image sizes and their names. Default values                          include 'Thumbnail', 'Medium', 'Large', 'Full Size'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "attachment_fields_to_edit",
        "description": "Filter the attachment fields to edit.",
        "arguments": [
            {
                "type": "array",
                "name": "$form_fields",
                "description": "An array of attachment form fields."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The WP_Post attachment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_media_item_args",
        "description": "Filter the arguments used to retrieve an image for the edit image form.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_meta",
        "description": "Filter the media metadata.",
        "arguments": [
            {
                "type": "string",
                "name": "$media_dims",
                "description": "The HTML markup containing the media dimensions."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The WP_Post attachment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upload_ui_over_quota",
        "description": "Fires when an upload will exceed the defined upload space quota for a network site.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "pre-upload-ui",
        "description": "Fires just before the legacy (pre-3.5.0) upload interface is loaded.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "upload_post_params",
        "description": "Filter the media upload post parameters.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_params",
                "description": "An array of media upload parameters used by Plupload."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plupload_init",
        "description": "Filter the default Plupload settings.",
        "arguments": [
            {
                "type": "array",
                "name": "$plupload_init",
                "description": "An array of default settings used by Plupload."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre-plupload-upload-ui",
        "description": "Fires before the upload interface loads.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "post-plupload-upload-ui",
        "description": "Fires after the upload interface loads.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "pre-html-upload-ui",
        "description": "Fires before the upload button in the media upload interface.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "post-html-upload-ui",
        "description": "Fires after the upload button in the media upload interface.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "post-upload-ui",
        "description": "Fires on the post upload UI screen.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "media_upload_form_url",
        "description": "Filter the media upload form action URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$form_action_url",
                "description": "The media upload form action URL."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The type of media. Default 'file'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "type_url_form_media",
        "description": "Filter the insert media from URL form HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$form_html",
                "description": "The insert from URL form HTML."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_upload_mime_type_links",
        "description": "Filter the media upload mime type list items.",
        "arguments": [
            {
                "type": "array",
                "name": "$type_links",
                "description": "An array of list items containing mime type link HTML."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_submitbox_misc_sections",
        "description": "Filter the audio and video metadata fields to be shown in the publish meta box.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "An array of the attachment metadata keys and labels."
            }
        ],
        "type": "filter"
    },
    {
        "text": "audio_submitbox_misc_sections",
        "description": "Filter the audio attachment metadata fields to be shown in the publish meta box.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "An array of the attachment metadata keys and labels."
            }
        ],
        "type": "filter"
    },
    {
        "text": "add_menu_classes",
        "description": "Filter administration menus array with classes added for top-level items.",
        "arguments": [
            {
                "type": "array",
                "name": "$menu",
                "description": "Associative array of administration menu items."
            }
        ],
        "type": "filter"
    },
    {
        "text": "_network_admin_menu",
        "description": "Fires before the administration menu loads in the Network Admin.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "_user_admin_menu",
        "description": "Fires before the administration menu loads in the User Admin.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "_admin_menu",
        "description": "Fires before the administration menu loads in the admin.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "network_admin_menu",
        "description": "Fires before the administration menu loads in the Network Admin.",
        "arguments": [
            {
                "type": "string",
                "name": "$context",
                "description": "Empty context."
            }
        ],
        "type": "action"
    },
    {
        "text": "user_admin_menu",
        "description": "Fires before the administration menu loads in the User Admin.",
        "arguments": [
            {
                "type": "string",
                "name": "$context",
                "description": "Empty context."
            }
        ],
        "type": "action"
    },
    {
        "text": "admin_menu",
        "description": "Fires before the administration menu loads in the admin.",
        "arguments": [
            {
                "type": "string",
                "name": "$context",
                "description": "Empty context."
            }
        ],
        "type": "action"
    },
    {
        "text": "menu_order",
        "description": "Filter the order of administration menu items.",
        "arguments": [
            {
                "type": "array",
                "name": "$menu_order",
                "description": "An ordered array of menu items."
            }
        ],
        "type": "filter"
    },
    {
        "text": "custom_menu_order",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "admin_page_access_denied",
        "description": "Fires when access to an admin page is denied.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "post_submitbox_minor_actions",
        "description": "Fires before the post time\/date setting in the Publish meta box.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "WP_Post object for the current post."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_submitbox_misc_actions",
        "description": "Fires after the post time\/date setting in the Publish meta box.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "WP_Post object for the current post."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_submitbox_start",
        "description": "Fires at the beginning of the publishing actions section of the Publish meta box.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "attachment_submitbox_misc_actions",
        "description": "Fires after the 'Uploaded on' section of the Save meta box in the attachment editing screen.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "post_edit_category_parent_dropdown_args",
        "description": "Filter the arguments for the taxonomy parent dropdown on the Post Edit page.",
        "arguments": [
            {
                "type": "array",
                "name": "$parent_dropdown_args",
                "description": "{     Optional. Array of arguments to generate parent dropdown.     @type string   $taxonomy         Name of the taxonomy to retrieve.     @type bool     $hide_if_empty    True to skip generating markup if no                                      categories are found. Default 0.     @type string   $name             Value for the 'name' attribute                                      of the select element.                                      Default \"new{$tax_name}_parent\".     @type string   $orderby          Which column to use for ordering                                      terms. Default 'name'.     @type bool|int $hierarchical     Whether to traverse the taxonomy                                      hierarchy. Default 1.     @type string   $show_option_none Text to display for the \"none\" option.                                      Default \"&mdash; {$parent} &mdash;\",                                      where <code>$parent<\/code> is 'parent_item'                                      taxonomy label. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_comment_status_meta_box-options",
        "description": "Fires at the end of the Discussion meta box on the post editing screen.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "WP_Post object of the current post."
            }
        ],
        "type": "action"
    },
    {
        "text": "page_attributes_dropdown_pages_args",
        "description": "Filter the arguments used to generate a Pages drop-down element.",
        "arguments": [
            {
                "type": "array",
                "name": "$dropdown_args",
                "description": "Array of arguments used to generate the pages drop-down."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The current WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "page_attributes_meta_box_template",
        "description": "Fires immediately after the heading inside the 'Template' section of the 'Page Attributes' meta box.",
        "arguments": [
            {
                "type": "string",
                "name": "$template",
                "description": "The template used for the current post."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The current post."
            }
        ],
        "type": "action"
    },
    {
        "text": "default_page_template_title",
        "description": "Filter the title of the default page template displayed in the drop-down.",
        "arguments": [
            {
                "type": "string",
                "name": "$label",
                "description": "The display value for the default page template title."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Where the option label is displayed. Possible values                        include 'meta-box' or 'quick-edit'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "got_rewrite",
        "description": "Filter whether Apache and mod_rewrite are present.",
        "arguments": [
            {
                "type": "bool",
                "name": "$got_rewrite",
                "description": "Whether Apache and mod_rewrite are present."
            }
        ],
        "type": "filter"
    },
    {
        "text": "got_url_rewrite",
        "description": "Filter whether URL rewriting is available.",
        "arguments": [
            {
                "type": "bool",
                "name": "$got_url_rewrite",
                "description": "Whether URL rewriting is available."
            }
        ],
        "type": "filter"
    },
    {
        "text": "documentation_ignore_functions",
        "description": "Filter the list of functions and classes to be ignored from the documentation lookup.",
        "arguments": [
            {
                "type": "array",
                "name": "$ignore_functions",
                "description": "Functions and classes to be ignored."
            }
        ],
        "type": "filter"
    },
    {
        "text": "set-screen-option",
        "description": "Filter a screen option value before it is set.",
        "arguments": [
            {
                "type": "bool",
                "name": "$value",
                "description": "Screen option value. Default false to skip."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "The option name."
            },
            {
                "type": "int",
                "name": "$value",
                "description": "The number of rows to use."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_blog",
        "description": "Fires before a blog is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "The blog ID."
            },
            {
                "type": "bool",
                "name": "$drop",
                "description": "True if blog's table should be dropped. Default is false."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_drop_tables",
        "description": "Filter the tables to drop when the blog is deleted.",
        "arguments": [
            {
                "type": "array",
                "name": "$tables",
                "description": "The blog tables to be dropped."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "The ID of the blog to drop tables for."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_delete_blog_upload_dir",
        "description": "Filter the upload base directory to delete when the blog is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$uploads['basedir']",
                "description": "Uploads path without subdirectory. @see wp_upload_dir()"
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "The blog ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_delete_user",
        "description": "Fires before a user is deleted from the network.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "ID of the user about to be deleted from the network."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_user",
        "description": "This action is documented in wp-admin\/includes\/user.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "new_admin_email_content",
        "description": "Filter the email text sent when the site admin email is changed.",
        "arguments": [
            {
                "type": "string",
                "name": "$email_text",
                "description": "Text in the email."
            },
            {
                "type": "string",
                "name": "$new_admin_email",
                "description": "New admin email that the current administration email was changed to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "new_user_email_content",
        "description": "Filter the email text sent when a user changes emails.",
        "arguments": [
            {
                "type": "string",
                "name": "$email_text",
                "description": "Text in the email."
            },
            {
                "type": "string",
                "name": "$new_user_email",
                "description": "New user email that the current user has changed to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "make_spam_user",
        "description": "Fires after the user is marked as a SPAM user.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "ID of the user marked as SPAM."
            }
        ],
        "type": "action"
    },
    {
        "text": "make_ham_user",
        "description": "Fires after the user is marked as a HAM user. Opposite of SPAM.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "ID of the user marked as HAM."
            }
        ],
        "type": "action"
    },
    {
        "text": "lang_codes",
        "description": "Filter the language codes.",
        "arguments": [
            {
                "type": "array",
                "name": "$lang_codes",
                "description": "Key\/value pair of language codes where key is the short version."
            },
            {
                "type": "string",
                "name": "$code",
                "description": "A two-letter designation of the language."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mu_dropdown_languages",
        "description": "Filter the languages available in the dropdown.",
        "arguments": [
            {
                "type": "array",
                "name": "$output",
                "description": "HTML output of the dropdown."
            },
            {
                "type": "array",
                "name": "$lang_files",
                "description": "Available language files."
            },
            {
                "type": "string",
                "name": "$current",
                "description": "The current language code."
            }
        ],
        "type": "filter"
    },
    {
        "text": "grant_super_admin",
        "description": "Fires before the user is granted Super Admin privileges.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the user that is about to be granted Super Admin privileges."
            }
        ],
        "type": "action"
    },
    {
        "text": "granted_super_admin",
        "description": "Fires after the user is granted Super Admin privileges.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the user that was granted Super Admin privileges."
            }
        ],
        "type": "action"
    },
    {
        "text": "revoke_super_admin",
        "description": "Fires before the user's Super Admin privileges are revoked.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the user Super Admin privileges are being revoked from."
            }
        ],
        "type": "action"
    },
    {
        "text": "revoked_super_admin",
        "description": "Fires after the user's Super Admin privileges are revoked.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the user Super Admin privileges were revoked from."
            }
        ],
        "type": "action"
    },
    {
        "text": "can_edit_network",
        "description": "Filter whether this network can be edited from this page.",
        "arguments": [
            {
                "type": "bool",
                "name": "$result",
                "description": "Whether the network can be edited from this page."
            },
            {
                "type": "int",
                "name": "$site_id",
                "description": "The network\/site ID to check."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_user_form",
        "description": "This action is documented in wp-admin\/users.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "nav_menu_items_{$post_type_name}_recent",
        "description": "Filter the posts displayed in the 'Most Recent' tab of the current post type's menu items meta box.",
        "arguments": [
            {
                "type": "array",
                "name": "$most_recent",
                "description": "An array of post objects being listed."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of WP_Query arguments."
            },
            {
                "type": "object",
                "name": "$post_type",
                "description": "The current post type object for this menu item meta box."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nav_menu_items_{$post_type_name}",
        "description": "Filter the posts displayed in the 'View All' tab of the current post type's menu items meta box.",
        "arguments": [
            {
                "type": "array",
                "name": "$posts",
                "description": "The posts for the current post type."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of WP_Query arguments."
            },
            {
                "type": "object",
                "name": "$post_type",
                "description": "The current post type object for this menu item meta box."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_update_nav_menu",
        "description": "This action is documented in wp-includes\/nav-menu.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "allow_subdirectory_install",
        "description": "Filter whether to enable the subdirectory install feature in Multisite.",
        "arguments": [
            {
                "type": "bool",
                "name": "",
                "description": "true Whether to enable the subdirectory install feature in Multisite. Default is false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugins_api_args",
        "description": "Filter the WordPress.org Plugin Install API arguments.",
        "arguments": [
            {
                "type": "object",
                "name": "$args",
                "description": "Plugin API arguments."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "The type of information being requested from the Plugin Install API."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugins_api",
        "description": "Filter the response for the current WordPress.org Plugin Install API request.",
        "arguments": [
            {
                "type": "false",
                "name": "$result",
                "description": "The result object or array. Default false."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "The type of information being requested from the Plugin Install API."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Plugin API arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugins_api_result",
        "description": "Filter the Plugin Install API response results.",
        "arguments": [
            {
                "type": "object",
                "name": "$res",
                "description": "Response object or WP_Error."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "The type of information being requested from the Plugin Install API."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Plugin API arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "activate_plugin",
        "description": "Fires before a plugin is activated.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin",
                "description": "Plugin path to main plugin file with plugin data."
            },
            {
                "type": "bool",
                "name": "$network_wide",
                "description": "Whether to enable the plugin for all sites in the network                             or just the current site. Multisite only. Default is false."
            }
        ],
        "type": "action"
    },
    {
        "text": "activate_{$plugin}",
        "description": "Fires as a specific plugin is being activated.",
        "arguments": [
            {
                "type": "bool",
                "name": "$network_wide",
                "description": "Whether to enable the plugin for all sites in the network                           or just the current site. Multisite only. Default is false."
            }
        ],
        "type": "action"
    },
    {
        "text": "activated_plugin",
        "description": "Fires after a plugin has been activated.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin",
                "description": "Plugin path to main plugin file with plugin data."
            },
            {
                "type": "bool",
                "name": "$network_wide",
                "description": "Whether to enable the plugin for all sites in the network                             or just the current site. Multisite only. Default is false."
            }
        ],
        "type": "action"
    },
    {
        "text": "deactivate_plugin",
        "description": "Fires before a plugin is deactivated.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin",
                "description": "Plugin path to main plugin file with plugin data."
            },
            {
                "type": "bool",
                "name": "$network_deactivating",
                "description": "Whether the plugin is deactivated for all sites in the network                                     or just the current site. Multisite only. Default is false."
            }
        ],
        "type": "action"
    },
    {
        "text": "deactivate_{$plugin}",
        "description": "Fires as a specific plugin is being deactivated.",
        "arguments": [
            {
                "type": "bool",
                "name": "$network_deactivating",
                "description": "Whether the plugin is deactivated for all sites in the network                                   or just the current site. Multisite only. Default is false."
            }
        ],
        "type": "action"
    },
    {
        "text": "deactivated_plugin",
        "description": "Fires after a plugin is deactivated.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin",
                "description": "Plugin basename."
            },
            {
                "type": "bool",
                "name": "$network_deactivating",
                "description": "Whether the plugin is deactivated for all sites in the network                                     or just the current site. Multisite only. Default false."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_plugin",
        "description": "Fires immediately after a plugin deletion attempt.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin_file",
                "description": "Plugin file name."
            },
            {
                "type": "bool",
                "name": "$deleted",
                "description": "Whether the plugin deletion was successful."
            }
        ],
        "type": "action"
    },
    {
        "text": "uninstall_{$file}",
        "description": "Fires in uninstall_plugin() once the plugin has been uninstalled.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "default_content",
        "description": "Filter the default post content initially used in the \"Write Post\" form.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_content",
                "description": "Default post content."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_title",
        "description": "Filter the default post title initially used in the \"Write Post\" form.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_title",
                "description": "Default post title."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_excerpt",
        "description": "Filter the default post excerpt initially used in the \"Write Post\" form.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_excerpt",
                "description": "Default post excerpt."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_{$post_type}_per_page",
        "description": "Filter the number of items per page to show for a specific 'per_page' type.",
        "arguments": [
            {
                "type": "int",
                "name": "$posts_per_page",
                "description": "Number of posts to display per page for the given post                            type. Default 20."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_posts_per_page",
        "description": "Filter the number of posts displayed per page when specifically listing \"posts\".",
        "arguments": [
            {
                "type": "int",
                "name": "$posts_per_page",
                "description": "Number of posts to be displayed. Default 20."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "The post type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upload_per_page",
        "description": "Filter the number of items to list per page when listing media items.",
        "arguments": [
            {
                "type": "int",
                "name": "$media_per_page",
                "description": "Number of media to list. Default 20."
            }
        ],
        "type": "filter"
    },
    {
        "text": "postbox_classes_{$page}_{$id}",
        "description": "Filter the postbox classes for a specific screen and screen ID combo.",
        "arguments": [
            {
                "type": "array",
                "name": "$classes",
                "description": "An array of postbox classes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_sample_permalink",
        "description": "Filter the sample permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$permalink",
                "description": "Sample permalink."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Post title."
            },
            {
                "type": "string",
                "name": "$name",
                "description": "Post name (slug)."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_sample_permalink_html",
        "description": "Filter the sample permalink HTML markup.",
        "arguments": [
            {
                "type": "string",
                "name": "$return",
                "description": "Sample permalink HTML markup."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$new_title",
                "description": "New sample permalink title."
            },
            {
                "type": "string",
                "name": "$new_slug",
                "description": "New sample permalink slug."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_post_thumbnail_size",
        "description": "Filter the size used to display the post thumbnail image in the 'Featured Image' meta box.",
        "arguments": [
            {
                "type": "string",
                "name": "$size",
                "description": "Post thumbnail image size to display in the meta box. Accepts any valid                                   image size, or an array of width and height values in pixels (in that order).                                   If the 'post-thumbnail' size is set, default is 'post-thumbnail'. Otherwise,                                   default is an array with 266 as both the height and width values."
            },
            {
                "type": "int",
                "name": "$thumbnail_id",
                "description": "Post thumbnail attachment ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post object associated with the thumbnail."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_post_thumbnail_html",
        "description": "Filter the admin post thumbnail HTML markup to return.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Admin post thumbnail HTML markup."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "show_post_locked_dialog",
        "description": "Filter whether to show the post locked dialog.",
        "arguments": [
            {
                "type": "bool",
                "name": "$display",
                "description": "Whether to display the dialog. Default true."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User object on success, false otherwise."
            }
        ],
        "type": "filter"
    },
    {
        "text": "override_post_lock",
        "description": "Filter whether to allow the post lock to be overridden.",
        "arguments": [
            {
                "type": "bool",
                "name": "$override",
                "description": "Whether to allow overriding post locks. Default true."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_locked_dialog",
        "description": "Fires inside the post locked dialog before the buttons are displayed.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_lock_lost_dialog",
        "description": "Fires inside the dialog displayed when a user has lost the post lock.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_creating_autosave",
        "description": "Fires before an autosave is stored.",
        "arguments": [
            {
                "type": "array",
                "name": "$new_autosave",
                "description": "Post array - the autosave that is about to be saved."
            }
        ],
        "type": "action"
    },
    {
        "text": "redirect_post_location",
        "description": "Filter the post redirect destination URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The destination URL."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "_wp_post_revision_field_{$field}",
        "description": "Contextually filter a post revision field.",
        "arguments": [
            {
                "type": "string",
                "name": "$compare_from->$field",
                "description": "The current revision field to compare to or from."
            },
            {
                "type": "string",
                "name": "$field",
                "description": "The current revision field."
            },
            {
                "type": "\\WP_Post",
                "name": "$compare_from",
                "description": "The revision post object to compare to or from."
            },
            {
                "type": "string",
                "name": "",
                "description": "null                  The context of whether the current revision is the old                                      or the new one. Values are 'to' or 'from'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "revision_text_diff_options",
        "description": "Filter revisions text diff options.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "{     Associative array of options to pass to {@see wp_text_diff()}.     @type bool $show_split_view True for split view (two columns), false for                                 un-split view (single column). Default true. }"
            },
            {
                "type": "string",
                "name": "$field",
                "description": "The current revision field."
            },
            {
                "type": "\\WP_Post",
                "name": "$compare_from",
                "description": "The revision post to compare from."
            },
            {
                "type": "\\WP_Post",
                "name": "$compare_to",
                "description": "The revision post to compare to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_revision_ui_diff",
        "description": "Filter the fields displayed in the post revision diff UI.",
        "arguments": [
            {
                "type": "array",
                "name": "$return",
                "description": "Revision UI fields. Each item is an array of id, name and diff."
            },
            {
                "type": "\\WP_Post",
                "name": "$compare_from",
                "description": "The revision post to compare from."
            },
            {
                "type": "\\WP_Post",
                "name": "$compare_to",
                "description": "The revision post to compare to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_prepare_revision_for_js",
        "description": "Filter the array of revisions used on the revisions screen.",
        "arguments": [
            {
                "type": "array",
                "name": "$revisions_data",
                "description": "{     The bootstrapped data for the revisions screen.     @type int        $id         Revision ID.     @type string     $title      Title for the revision's parent WP_Post object.     @type int        $author     Revision post author ID.     @type string     $date       Date the revision was modified.     @type string     $dateShort  Short-form version of the date the revision was modified.     @type string     $timeAgo    GMT-aware amount of time ago the revision was modified.     @type bool       $autosave   Whether the revision is an autosave.     @type bool       $current    Whether the revision is both not an autosave and the post                                  modified date matches the revision modified date (GMT-aware).     @type bool|false $restoreUrl URL if the revision can be restored, false otherwise. }"
            },
            {
                "type": "\\WP_Post",
                "name": "$revision",
                "description": "The revision's WP_Post object."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The revision's parent WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "populate_options",
        "description": "Fires before creating WordPress options and populating their default values.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "populate_network_meta",
        "description": "Filter meta for a network on creation.",
        "arguments": [
            {
                "type": "array",
                "name": "$sitemeta",
                "description": "Associative array of network meta keys and values to be inserted."
            },
            {
                "type": "int",
                "name": "$network_id",
                "description": "ID of network to populate."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_{$screen->id}_columns",
        "description": "Filter the column headers for a list table on a specific screen.",
        "arguments": [
            {
                "type": "array",
                "name": "$columns",
                "description": "An array of column headers. Default empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_hidden_columns",
        "description": "Filter the default list of hidden columns.",
        "arguments": [
            {
                "type": "array",
                "name": "$hidden",
                "description": "An array of columns hidden by default."
            },
            {
                "type": "\\WP_Screen",
                "name": "$screen",
                "description": "WP_Screen object of the current screen."
            }
        ],
        "type": "filter"
    },
    {
        "text": "hidden_columns",
        "description": "Filter the list of hidden columns.",
        "arguments": [
            {
                "type": "array",
                "name": "$hidden",
                "description": "An array of hidden columns."
            },
            {
                "type": "\\WP_Screen",
                "name": "$screen",
                "description": "WP_Screen object of the current screen."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_hidden_meta_boxes",
        "description": "Filter the default list of hidden meta boxes.",
        "arguments": [
            {
                "type": "array",
                "name": "$hidden",
                "description": "An array of meta boxes hidden by default."
            },
            {
                "type": "\\WP_Screen",
                "name": "$screen",
                "description": "WP_Screen object of the current screen."
            }
        ],
        "type": "filter"
    },
    {
        "text": "hidden_meta_boxes",
        "description": "Filter the list of hidden meta boxes.",
        "arguments": [
            {
                "type": "array",
                "name": "$hidden",
                "description": "An array of hidden meta boxes."
            },
            {
                "type": "\\WP_Screen",
                "name": "$screen",
                "description": "WP_Screen object of the current screen."
            },
            {
                "type": "bool",
                "name": "$use_defaults",
                "description": "Whether to show the default meta boxes.                                Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "terms_to_edit",
        "description": "Filter the comma-separated list of terms available to edit.",
        "arguments": [
            {
                "type": "array",
                "name": "$terms_to_edit",
                "description": "An array of terms."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy for which to retrieve terms. Default 'post_tag'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_terms_checklist_args",
        "description": "Filter the taxonomy terms checklist arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_comment_reply",
        "description": "Filter the in-line comment reply-to form output in the Comments list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "The reply-to form content."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of default args."
            }
        ],
        "type": "filter"
    },
    {
        "text": "postmeta_form_limit",
        "description": "Filter the number of custom fields to retrieve for the drop-down in the Custom Fields meta box.",
        "arguments": [
            {
                "type": "int",
                "name": "$limit",
                "description": "Number of custom fields to retrieve. Default 30."
            }
        ],
        "type": "filter"
    },
    {
        "text": "import_upload_size_limit",
        "description": "Filter the maximum allowed upload size for import files.",
        "arguments": [
            {
                "type": "int",
                "name": "$max_upload_size",
                "description": "Allowed upload size. Default 1 MB."
            }
        ],
        "type": "filter"
    },
    {
        "text": "display_post_states",
        "description": "Filter the default post display states used in the posts list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_states",
                "description": "An array of post display states."
            },
            {
                "type": "int",
                "name": "$post",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "display_media_states",
        "description": "Filter the default media display states for items in the Media list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$media_states",
                "description": "An array of media states. Default 'Header Image',                            'Background Image', 'Site Icon'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_xml_ns",
        "description": "Fires inside the HTML tag in the admin header.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "themes_api_args",
        "description": "Filter arguments used to query for installer pages from the WordPress.org Themes API.",
        "arguments": [
            {
                "type": "object",
                "name": "$args",
                "description": "Arguments used to query for installer pages from the WordPress.org Themes API."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "Requested action. Likely values are 'theme_information',                       'feature_list', or 'query_themes'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "themes_api",
        "description": "Filter whether to override the WordPress.org Themes API.",
        "arguments": [
            {
                "type": "false",
                "name": "$override",
                "description": "Whether to override the WordPress.org Themes API. Default false."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "Requested action. Likely values are 'theme_information',                                    'feature_list', or 'query_themes'."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Arguments used to query for installer pages from the Themes API."
            }
        ],
        "type": "filter"
    },
    {
        "text": "themes_api_result",
        "description": "Filter the returned WordPress.org Themes API response.",
        "arguments": [
            {
                "type": "array",
                "name": "$res",
                "description": "WordPress.org Themes API response."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "Requested action. Likely values are 'theme_information',                             'feature_list', or 'query_themes'."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Arguments used to query for installer pages from the WordPress.org Themes API."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_prepare_themes_for_js",
        "description": "Filter theme data before it is prepared for JavaScript.",
        "arguments": [
            {
                "type": "array",
                "name": "$prepared_themes",
                "description": "An associative array of theme data. Default empty array."
            },
            {
                "type": "null",
                "name": "$themes",
                "description": "An array of WP_Theme objects to prepare, if any."
            },
            {
                "type": "string",
                "name": "$current_theme",
                "description": "The current theme slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_prepare_themes_for_js",
        "description": "Filter the themes prepared for JavaScript, for themes.php.",
        "arguments": [
            {
                "type": "array",
                "name": "$prepared_themes",
                "description": "Array of themes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "translations_api",
        "description": "Allows a plugin to override the WordPress.org Translation Install API entirely.",
        "arguments": [
            {
                "type": "bool",
                "name": "$result",
                "description": "The result object. Default false."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The type of translations being requested."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Translation API arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "translations_api_result",
        "description": "Filter the Translation Install API response results.",
        "arguments": [
            {
                "type": "object",
                "name": "$res",
                "description": "Response object or WP_Error."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The type of translations being requested."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Translation API arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_feedback",
        "description": "Filter feedback messages displayed during the core update process.",
        "arguments": [
            {
                "type": "string",
                "name": "$feedback",
                "description": "The core update feedback messages."
            }
        ],
        "type": "filter"
    },
    {
        "text": "_core_updated_successfully",
        "description": "Fires after WordPress core has been successfully updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$wp_version",
                "description": "The current WordPress version."
            }
        ],
        "type": "action"
    },
    {
        "text": "update_right_now_text",
        "description": "Filter the text displayed in the 'At a Glance' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Default text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "in_plugin_update_message-{$file}",
        "description": "Fires at the end of the update message container in each row of the plugins list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$plugin_data",
                "description": "{     An array of plugin metadata.     @type string $name         The human-readable name of the plugin.     @type string $plugin_uri   Plugin URI.     @type string $version      Plugin version.     @type string $description  Plugin description.     @type string $author       Plugin author.     @type string $author_uri   Plugin author URI.     @type string $text_domain  Plugin text domain.     @type string $domain_path  Relative path to the plugin's .mo file(s).     @type bool   $network      Whether the plugin can only be activated network wide.     @type string $title        The human-readable title of the plugin.     @type string $author_name  Plugin author's name.     @type bool   $update       Whether there's an available update. Default null. }"
            },
            {
                "type": "array",
                "name": "$r",
                "description": "{     An array of metadata about the available plugin update.     @type int    $id           Plugin ID.     @type string $slug         Plugin slug.     @type string $new_version  New plugin version.     @type string $url          Plugin URL.     @type string $package      Plugin update package URL. }"
            }
        ],
        "type": "action"
    },
    {
        "text": "in_theme_update_message-{$theme_key}",
        "description": "Fires at the end of the update message container in each row of the themes list table.",
        "arguments": [
            {
                "type": "\\WP_Theme",
                "name": "$theme",
                "description": "The WP_Theme object."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "{     An array of metadata about the available theme update.     @type string $new_version New theme version.     @type string $url         Theme URL.     @type string $package     Theme update package URL. }"
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_install",
        "description": "Fires after a site is fully installed.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "The site owner."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_upgrade",
        "description": "Fires after a site is fully upgraded.",
        "arguments": [
            {
                "type": "int",
                "name": "$wp_db_version",
                "description": "The new $wp_db_version."
            },
            {
                "type": "int",
                "name": "$wp_current_db_version",
                "description": "The old (current) $wp_db_version."
            }
        ],
        "type": "action"
    },
    {
        "text": "dbdelta_queries",
        "description": "Filter the dbDelta SQL queries.",
        "arguments": [
            {
                "type": "array",
                "name": "$queries",
                "description": "An array of dbDelta SQL queries."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dbdelta_create_queries",
        "description": "Filter the dbDelta SQL queries for creating tables and\/or databases.",
        "arguments": [
            {
                "type": "array",
                "name": "$cqueries",
                "description": "An array of dbDelta create SQL queries."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dbdelta_insert_queries",
        "description": "Filter the dbDelta SQL queries for inserting or updating.",
        "arguments": [
            {
                "type": "array",
                "name": "$iqueries",
                "description": "An array of dbDelta insert or update SQL queries."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_should_upgrade_global_tables",
        "description": "Filter if upgrade routines should be run on global tables.",
        "arguments": [
            {
                "type": "bool",
                "name": "$should_upgrade",
                "description": "Whether to run the upgrade routines on global tables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "check_passwords",
        "description": "Fires before the password and confirm password fields are checked for congruity.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "The username."
            },
            {
                "type": "string",
                "name": "",
                "description": "&amp;$pass1     The password, passed by reference."
            },
            {
                "type": "string",
                "name": "",
                "description": "&amp;$pass2     The confirmed password, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "user_profile_update_errors",
        "description": "Fires before user profile update errors are returned.",
        "arguments": [
            {
                "type": "\\WP_Error",
                "name": "",
                "description": "&amp;$errors WP_Error object, passed by reference."
            },
            {
                "type": "bool",
                "name": "$update",
                "description": "Whether this is a user update."
            },
            {
                "type": "\\WP_User",
                "name": "",
                "description": "&amp;$user   WP_User object, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "edit_user_created_user",
        "description": "Fires after a new user has been created.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the newly created user."
            }
        ],
        "type": "action"
    },
    {
        "text": "editable_roles",
        "description": "Filter the list of editable roles.",
        "arguments": [
            {
                "type": "array",
                "name": "$all_roles",
                "description": "List of roles."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_users_drafts",
        "description": "Filter the user's drafts query string.",
        "arguments": [
            {
                "type": "string",
                "name": "$query",
                "description": "The user's drafts query string."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_user",
        "description": "Fires immediately before a user is deleted from the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "ID of the user to delete."
            },
            {
                "type": "int",
                "name": "$reassign",
                "description": "ID of the user to reassign posts and links to.                           Default null, for no reassignment."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_types_to_delete_with_user",
        "description": "Filter the list of post types to delete with a user.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_types_to_delete",
                "description": "Post types to delete."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "User ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "welcome_panel",
        "description": "Add content to the welcome panel on the admin dashboard.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "blog_privacy_selector",
        "description": "This action is documented in wp-admin\/options-reading.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "tables_to_repair",
        "description": "Filter additional database tables to repair.",
        "arguments": [
            {
                "type": "array",
                "name": "$tables",
                "description": "Array of prefixed table names to be repaired."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_upload_default_type",
        "description": "Filter the default media upload type in the legacy (pre-3.5.0) media popup.",
        "arguments": [
            {
                "type": "string",
                "name": "$type",
                "description": "The default media upload type. Possible values include                     'image', 'audio', 'video', 'file', etc. Default 'file'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_upload_{$type}",
        "description": "Fires inside specific upload-type views in the legacy (pre-3.5.0) media popup based on the current tab.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "media_upload_{$tab}",
        "description": "Fires inside limited and specific upload-tab views in the legacy (pre-3.5.0) media popup.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "parent_file",
        "description": "Filter the parent file of an admin menu sub-menu item.",
        "arguments": [
            {
                "type": "string",
                "name": "$parent_file",
                "description": "The parent file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "submenu_file",
        "description": "Filter the file of an admin menu sub-menu item.",
        "arguments": [
            {
                "type": "string",
                "name": "$submenu_file",
                "description": "The submenu file."
            },
            {
                "type": "string",
                "name": "$parent_file",
                "description": "The submenu item's parent file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "adminmenu",
        "description": "Fires after the admin menu has been output.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "delete_site_email_content",
        "description": "Filter the email content sent when a site in a Multisite network is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "The email content that will be sent to the user who deleted a site in a Multisite network."
            }
        ],
        "type": "filter"
    },
    {
        "text": "myblogs_allblogs_options",
        "description": "Fires before the sites list on the My Sites screen.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "myblogs_options",
        "description": "Enable the Global Settings section on the My Sites screen.",
        "arguments": [
            {
                "type": "string",
                "name": "$settings_html",
                "description": "The settings HTML markup. Default empty."
            },
            {
                "type": "object",
                "name": "$context",
                "description": "Context of the setting (global or site-specific). Default 'global'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "myblogs_blog_actions",
        "description": "Filter the row links displayed for each site on the My Sites screen.",
        "arguments": [
            {
                "type": "string",
                "name": "$string",
                "description": "The HTML site link markup."
            },
            {
                "type": "object",
                "name": "$user_blog",
                "description": "An object containing the site data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "after_menu_locations_table",
        "description": "Fires after the menu locations table is displayed.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_nav_locations_listed_per_menu",
        "description": "Filter the number of locations listed per menu in the drop-down select.",
        "arguments": [
            {
                "type": "int",
                "name": "$locations",
                "description": "Number of menu locations to list. Default 3."
            }
        ],
        "type": "filter"
    },
    {
        "text": "redirect_network_admin_request",
        "description": "Filter whether to redirect the request to the Network Admin.",
        "arguments": [
            {
                "type": "bool",
                "name": "$redirect_network_admin_request",
                "description": "Whether the request should be redirected."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmuadminedit",
        "description": "Fires just before the action handler in several Network Admin screens.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "network_admin_edit_{$_GET['action']}",
        "description": "Fires the requested handler action.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "update_wpmu_options",
        "description": "Fires after the network options are updated.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "mu_menu_items",
        "description": "Filter available network-wide administration menu options.",
        "arguments": [
            {
                "type": "array",
                "name": "$admin_menus",
                "description": "The menu items available."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_options",
        "description": "Fires at the end of the Network Settings form, before the submit button.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "network_site_new_created_user",
        "description": "Fires after a new user has been created via the network site-new.php page.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the newly created user."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_update_blog_options",
        "description": "Fires after the site options are updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "The ID of the site being updated."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmueditblogaction",
        "description": "Fires at the end of the Edit Site form, before the submit button.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "Site ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "network_site_users_created_user",
        "description": "Fires after a user has been created via the network site-users.php page.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the newly created user."
            }
        ],
        "type": "action"
    },
    {
        "text": "show_network_site_users_add_existing_form",
        "description": "Filter whether to show the Add Existing User form on the Multisite Users screen.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bool",
                "description": "Whether to show the Add Existing User form. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_site_users_after_list_table",
        "description": "Fires after the list table on the Users screen in the Multisite Network Admin.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "show_network_site_users_add_new_form",
        "description": "Filter whether to show the Add New User form on the Multisite Users screen.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bool",
                "description": "Whether to show the Add New User form. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "activate_blog",
        "description": "Fires after a network site is activated.",
        "arguments": [
            {
                "type": "string",
                "name": "$id",
                "description": "The ID of the activated site."
            }
        ],
        "type": "action"
    },
    {
        "text": "deactivate_blog",
        "description": "Fires before a network site is deactivated.",
        "arguments": [
            {
                "type": "string",
                "name": "$id",
                "description": "The ID of the site being deactivated."
            }
        ],
        "type": "action"
    },
    {
        "text": "network_sites_updated_message_{$_GET['updated']}",
        "description": "Filter a specific, non-default site-updated message in the Network admin.",
        "arguments": [
            {
                "type": "string",
                "name": "$msg",
                "description": "The update message. Default 'Settings saved'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_upgrade_site",
        "description": "Fires after each site has been upgraded.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "The id of the blog."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_upgrade_page",
        "description": "Fires before the footer on the network upgrade screen.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "network_user_new_created_user",
        "description": "Fires after a new user has been created via the network user-new.php page.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the newly created user."
            }
        ],
        "type": "action"
    },
    {
        "text": "thread_comments_depth_max",
        "description": "Filter the maximum depth of threaded\/nested comments.",
        "arguments": [
            {
                "type": "int",
                "name": "$max_depth",
                "description": "The maximum depth of threaded comments. Default 10."
            }
        ],
        "type": "filter"
    },
    {
        "text": "avatar_defaults",
        "description": "Filter the default avatars.",
        "arguments": [
            {
                "type": "array",
                "name": "$avatar_defaults",
                "description": "Array of default avatars."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_avatar_select",
        "description": "Filter the HTML output of the default avatar list.",
        "arguments": [
            {
                "type": "string",
                "name": "$avatar_list",
                "description": "HTML markup of the avatar list."
            }
        ],
        "type": "filter"
    },
    {
        "text": "date_formats",
        "description": "Filter the default date formats.",
        "arguments": [
            {
                "type": "array",
                "name": "$default_date_formats",
                "description": "Array of default date formats."
            }
        ],
        "type": "filter"
    },
    {
        "text": "time_formats",
        "description": "Filter the default time formats.",
        "arguments": [
            {
                "type": "array",
                "name": "$default_time_formats",
                "description": "Array of default time formats."
            }
        ],
        "type": "filter"
    },
    {
        "text": "option_page_capability_{$option_page}",
        "description": "Filter the capability required when using the Settings API.",
        "arguments": [
            {
                "type": "string",
                "name": "$capability",
                "description": "The capability used for the page, which is manage_options by default."
            }
        ],
        "type": "filter"
    },
    {
        "text": "whitelist_options",
        "description": "Filter the options white list.",
        "arguments": [
            {
                "type": "array",
                "name": "",
                "description": "White list options."
            }
        ],
        "type": "filter"
    },
    {
        "text": "editable_extensions",
        "description": "Filter file type extensions editable in the plugin editor.",
        "arguments": [
            {
                "type": "array",
                "name": "$editable_extensions",
                "description": "An array of editable plugin file extensions."
            }
        ],
        "type": "filter"
    },
    {
        "text": "install_plugins_pre_{$tab}",
        "description": "Fires before each tab on the Install Plugins screen is loaded.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "install_plugins_{$tab}",
        "description": "Fires after the plugins list table in each tab of the Install Plugins screen.",
        "arguments": [
            {
                "type": "int",
                "name": "$paged",
                "description": "The current page number of the plugins list table."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_current_active_plugins",
        "description": "Fires before the plugins list table is rendered.",
        "arguments": [
            {
                "type": "array",
                "name": "$plugins_all",
                "description": "An array containing all installed plugins."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_theme_editor_filetypes",
        "description": "Filter the list of file types allowed for editing in the Theme editor.",
        "arguments": [
            {
                "type": "array",
                "name": "$default_types",
                "description": "List of file types. Default types include 'php' and 'css'."
            },
            {
                "type": "\\WP_Theme",
                "name": "$theme",
                "description": "The current Theme object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "install_themes_pre_{$tab}",
        "description": "Fires before each of the tabs are rendered on the Install Themes page.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "install_themes_tabs",
        "description": "Filter the tabs shown on the Add Themes screen.",
        "arguments": [
            {
                "type": "array",
                "name": "$tabs",
                "description": "The tabs shown on the Add Themes screen. Default is 'upload'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "install_themes_{$tab}",
        "description": "Fires at the top of each of the tabs on the Install Themes page.",
        "arguments": [
            {
                "type": "int",
                "name": "$paged",
                "description": "Number of the current page of results being viewed."
            }
        ],
        "type": "action"
    },
    {
        "text": "tool_box",
        "description": "Fires at the end of the Tools Administration screen.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "core_upgrade_preamble",
        "description": "Fires after the core, plugin, and theme update tables.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "update-core-custom_{$action}",
        "description": "Fires for each custom update action on the WordPress Updates screen.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "update-custom_{$action}",
        "description": "Fires when a custom plugin or theme update request is received.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "redirect_user_admin_request",
        "description": "Filter whether to redirect the request to the User Admin in Multisite.",
        "arguments": [
            {
                "type": "bool",
                "name": "$redirect_user_admin_request",
                "description": "Whether the request should be redirected."
            }
        ],
        "type": "filter"
    },
    {
        "text": "enable_edit_any_user_configuration",
        "description": "Filter whether to allow administrators on Multisite to edit every user.",
        "arguments": [
            {
                "type": "bool",
                "name": "$allow",
                "description": "Whether to allow editing of any user. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "personal_options_update",
        "description": "Fires before the page loads on the 'Your Profile' editing screen.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_user_profile_update",
        "description": "Fires before the page loads on the 'Edit User' screen.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "user_edit_form_tag",
        "description": "Fires inside the your-profile form tag on the user editing screen.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "admin_color_scheme_picker",
        "description": "Fires in the 'Admin Color Scheme' section of the user editing screen.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "personal_options",
        "description": "Fires at the end of the 'Personal Options' settings table on the user editing screen.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "The current WP_User object."
            }
        ],
        "type": "action"
    },
    {
        "text": "profile_personal_options",
        "description": "Fires after the 'Personal Options' settings table on the 'Your Profile' editing screen.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "The current WP_User object."
            }
        ],
        "type": "action"
    },
    {
        "text": "user_{$name}_label",
        "description": "Filter a user contactmethod label.",
        "arguments": [
            {
                "type": "string",
                "name": "$desc",
                "description": "The translatable label for the contactmethod."
            }
        ],
        "type": "filter"
    },
    {
        "text": "show_password_fields",
        "description": "Filter the display of the password fields.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show",
                "description": "Whether to show the password fields. Default true."
            },
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "User object for the current user to edit."
            }
        ],
        "type": "filter"
    },
    {
        "text": "show_user_profile",
        "description": "Fires after the 'About Yourself' settings table on the 'Your Profile' editing screen.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "The current WP_User object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_user_profile",
        "description": "Fires after the 'About the User' settings table on the 'Edit User' screen.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "The current WP_User object."
            }
        ],
        "type": "action"
    },
    {
        "text": "additional_capabilities_display",
        "description": "Filter whether to display additional capabilities for the user.",
        "arguments": [
            {
                "type": "bool",
                "name": "$enable",
                "description": "Whether to display the capabilities. Default true."
            },
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "The current WP_User object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "invite_user",
        "description": "Fires immediately after a user is invited to join a site, but before the notification is sent.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "The invited user's ID."
            },
            {
                "type": "array",
                "name": "$role",
                "description": "The role of invited user."
            },
            {
                "type": "string",
                "name": "$newuser_key",
                "description": "The key of the invitation."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_user_login",
        "description": "Filter the user_login, also known as the username, before it is added to the site.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "The sanitized username."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_new_form_tag",
        "description": "Fires inside the adduser form tag.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "user_new_form",
        "description": "Fires at the end of the new user form.",
        "arguments": [
            {
                "type": "string",
                "name": "$type",
                "description": "A contextual string specifying which type of new user form the hook follows."
            }
        ],
        "type": "action"
    },
    {
        "text": "widgets_admin_page",
        "description": "Fires before the Widgets administration page content loads.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "sidebar_admin_page",
        "description": "Fires after the available widgets and sidebars have loaded, before the admin footer.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "set_comment_cookies",
        "description": "Perform other actions when comment cookies are set.",
        "arguments": [
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "Comment object."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User object. The user may not exist."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_post_redirect",
        "description": "Filter the location URI to send the commenter after posting.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The 'redirect_to' URI sent via $_POST."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "Comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "bbl_translated_taxonomy",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "bbl_translated_post_type",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "bbl_the_title_in_lang",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "bbl_permalink_in_lang",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "bbl_post_type_archive_link_in_lang",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "comments_template_args",
        "description": "The url of the current comment author escaped for use in attributes.",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "comments_array",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "comments_template",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "bbl_translation_post_meta_boxes",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "enter_name_here",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "bbl_translation_terms_meta_boxes",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "bbl_translation_meta_meta_boxes",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "customize_allowed_urls",
        "description": "Filter the list of URLs allowed to be clicked and followed in the Customizer preview.",
        "arguments": [
            {
                "type": "array",
                "name": "$allowed_urls",
                "description": "An array of allowed URLs."
            }
        ],
        "type": "filter"
    },
    {
        "text": "removable_query_args",
        "description": "Filter the list of URL parameters to remove.",
        "arguments": [
            {
                "type": "array",
                "name": "$removable_query_args",
                "description": "An array of parameters to remove from the URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_id_not_found",
        "description": "Fires when a comment is attempted on a post that does not exist.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_post_ID",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_closed",
        "description": "Fires when a comment is attempted on a post that has comments closed.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_post_ID",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_on_trash",
        "description": "Fires when a comment is attempted on a trashed post.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_post_ID",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_on_draft",
        "description": "Fires when a comment is attempted on a post in draft mode.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_post_ID",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_on_password_protected",
        "description": "Fires when a comment is attempted on a password-protected post.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_post_ID",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_comment_on_post",
        "description": "Fires before a comment is posted.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_post_ID",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "twentyeleven_author_bio_avatar_size",
        "description": "Filter the Twenty Eleven author bio avatar size.",
        "arguments": [
            {
                "type": "int",
                "name": "",
                "description": "The height and width avatar dimension in pixels. Default 60."
            }
        ],
        "type": "filter"
    },
    {
        "text": "category_archive_meta",
        "description": "Filter the default Twenty Eleven category description.",
        "arguments": [
            {
                "type": "string",
                "name": "",
                "description": "The default category description HTML."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyeleven_status_avatar",
        "description": "Filter the Twenty Eleven status avatar size.",
        "arguments": [
            {
                "type": "int",
                "name": "",
                "description": "The height and width avatar dimensions in pixels. Default 65."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyeleven_credits",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "twentyeleven_header_image_width",
        "description": "Filter the Twenty Eleven default header image width.",
        "arguments": [
            {
                "type": "int",
                "name": "",
                "description": "The default header image width in pixels. Default 1000."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyeleven_header_image_height",
        "description": "Filter the Twenty Eleven default header image height.",
        "arguments": [
            {
                "type": "int",
                "name": "",
                "description": "The default header image height in pixels. Default 288."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyeleven_attachment_size",
        "description": "Filter the Twenty Eleven default attachment size.",
        "arguments": [
            {
                "type": "int",
                "name": "",
                "description": "The height and width attachment size dimensions in pixels. Default 848."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyeleven_color_schemes",
        "description": "Filter the Twenty Eleven color scheme options.",
        "arguments": [
            {
                "type": "array",
                "name": "$color_scheme_options",
                "description": "An associative array of color scheme options."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyeleven_layouts",
        "description": "Filter the Twenty Eleven layout options.",
        "arguments": [
            {
                "type": "array",
                "name": "$layout_options",
                "description": "An associative array of layout options."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyeleven_default_theme_options",
        "description": "Filter the Twenty Eleven default options.",
        "arguments": [
            {
                "type": "array",
                "name": "$default_theme_options",
                "description": "An array of default theme options."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyeleven_theme_options_validate",
        "description": "Filter the Twenty Eleven sanitized form input array.",
        "arguments": [
            {
                "type": "array",
                "name": "$output",
                "description": "An array of sanitized form output."
            },
            {
                "type": "array",
                "name": "$input",
                "description": "An array of un-sanitized form input."
            },
            {
                "type": "array",
                "name": "$defaults",
                "description": "An array of default theme options."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyeleven_enqueue_color_scheme",
        "description": "Fires after the styles for the Twenty Eleven color scheme are enqueued.",
        "arguments": [
            {
                "type": "string",
                "name": "$color_scheme",
                "description": "The color scheme."
            }
        ],
        "type": "action"
    },
    {
        "text": "twentyeleven_layout_classes",
        "description": "Filter the Twenty Eleven layout body classes.",
        "arguments": [
            {
                "type": "array",
                "name": "$classes",
                "description": "An array of body classes."
            },
            {
                "type": "string",
                "name": "$current_layout",
                "description": "The current theme layout."
            }
        ],
        "type": "filter"
    },
    {
        "text": "tag_archive_meta",
        "description": "Filter the default Twenty Eleven tag description.",
        "arguments": [
            {
                "type": "string",
                "name": "",
                "description": "The default tag description."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyfifteen_author_bio_avatar_size",
        "description": "Filter the author bio avatar size.",
        "arguments": [
            {
                "type": "int",
                "name": "$size",
                "description": "The avatar height and width size in pixels."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyfifteen_credits",
        "description": "Fires before the Twenty Fifteen footer text for footer customization.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "twentyfifteen_custom_background_args",
        "description": "Twenty Fifteen only works in WordPress 4.1 or later.",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "twentyfifteen_attachment_size",
        "description": "Filter the default Twenty Fifteen image attachment size.",
        "arguments": [
            {
                "type": "string",
                "name": "$image_size",
                "description": "Image size. Default 'large'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyfifteen_custom_header_args",
        "description": "Filter Twenty Fifteen custom-header support arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "{     An array of custom-header support arguments.     @type string $default_text_color     Default color of the header text.     @type int    $width                  Width in pixels of the custom header image. Default 954.     @type int    $height                 Height in pixels of the custom header image. Default 1300.     @type string $wp-head-callback       Callback function used to styles the header image and text                                          displayed on the blog. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyfifteen_color_schemes",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "twentyfourteen_featured_posts_before",
        "description": "Fires before the Twenty Fourteen featured content.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "twentyfourteen_featured_posts_after",
        "description": "Fires after the Twenty Fourteen featured content.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "twentyfourteen_credits",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "twentyfourteen_custom_background_args",
        "description": "Twenty Fourteen only works in WordPress 3.6 or later.",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "twentyfourteen_get_featured_posts",
        "description": "Filter the featured posts to return in Twenty Fourteen.",
        "arguments": [
            {
                "type": "array",
                "name": "$posts",
                "description": "Array of featured posts, otherwise false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyfourteen_attachment_size",
        "description": "Filter the default Twenty Fourteen attachment size.",
        "arguments": [
            {
                "type": "array",
                "name": "$dimensions",
                "description": "{     An array of height and width dimensions.     @type int $height Height of the image in pixels. Default 810.     @type int $width  Width of the image in pixels. Default 810. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyfourteen_custom_header_args",
        "description": "Filter Twenty Fourteen custom-header support arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "{     An array of custom-header support arguments.     @type bool   $header_text            Whether to display custom header text. Default false.     @type int    $width                  Width in pixels of the custom header image. Default 1260.     @type int    $height                 Height in pixels of the custom header image. Default 240.     @type bool   $flex_height            Whether to allow flexible-height header images. Default true.     @type string $admin_head_callback    Callback function used to style the image displayed in                                          the Appearance > Header screen.     @type string $admin_preview_callback Callback function used to create the custom header markup in                                          the Appearance > Header screen. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyten_author_bio_avatar_size",
        "description": "Filter the Twenty Ten author bio avatar size.",
        "arguments": [
            {
                "type": "int",
                "name": "",
                "description": "The height and width avatar dimensions in pixels. Default 60."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyten_credits",
        "description": "Fires before the Twenty Ten credits in the footer.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "twentyten_header_image_width",
        "description": "Filter the Twenty Ten default header image width.",
        "arguments": [
            {
                "type": "int",
                "name": "",
                "description": "The default header image width in pixels. Default 940."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyten_header_image_height",
        "description": "Filter the Twenty Ten defaul header image height.",
        "arguments": [
            {
                "type": "int",
                "name": "",
                "description": "The default header image height in pixels. Default 198."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyten_attachment_size",
        "description": "Filter the Twenty Ten default attachment width.",
        "arguments": [
            {
                "type": "int",
                "name": "",
                "description": "The default attachment width in pixels. Default 900."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentyten_attachment_height",
        "description": "Filter the Twenty Ten default attachment height.",
        "arguments": [
            {
                "type": "int",
                "name": "",
                "description": "The default attachment height in pixels. Default 900."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentythirteen_author_bio_avatar_size",
        "description": "Filter the author bio avatar size.",
        "arguments": [
            {
                "type": "int",
                "name": "$size",
                "description": "The avatar height and width size in pixels."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentythirteen_credits",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "twentythirteen_attachment_size",
        "description": "Filter the image attachment size to use.",
        "arguments": [
            {
                "type": "array",
                "name": "$size",
                "description": "{     @type int The attachment height in pixels.     @type int The attachment width in pixels. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentytwelve_author_bio_avatar_size",
        "description": "Filter the author bio avatar size.",
        "arguments": [
            {
                "type": "int",
                "name": "$size",
                "description": "The height and width of the avatar in pixels."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentytwelve_status_avatar",
        "description": "Filter the status avatar size.",
        "arguments": [
            {
                "type": "int",
                "name": "$size",
                "description": "The height and width of the avatar in pixels."
            }
        ],
        "type": "filter"
    },
    {
        "text": "twentytwelve_credits",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "twentytwelve_attachment_size",
        "description": "Filter the image attachment size to use.",
        "arguments": [
            {
                "type": "array",
                "name": "$size",
                "description": "{     @type int The attachment height in pixels.     @type int The attachment width in pixels. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$hook}",
        "description": "Fires scheduled events.",
        "arguments": [
            {
                "type": "string",
                "name": "$hook",
                "description": "Name of the hook that was scheduled to be fired."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "The arguments to be passed to the hook."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "wp_admin_bar_class",
        "description": "Filter the admin bar class to instantiate.",
        "arguments": [
            {
                "type": "string",
                "name": "$wp_admin_bar_class",
                "description": "Admin bar class to use. Default 'WP_Admin_Bar'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_bar_menu",
        "description": "Load all necessary admin bar items.",
        "arguments": [
            {
                "type": "\\WP_Admin_Bar",
                "name": "$wp_admin_bar",
                "description": "WP_Admin_Bar instance, passed by reference"
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "wp_before_admin_bar_render",
        "description": "Fires before the admin bar is rendered.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_after_admin_bar_render",
        "description": "Fires after the admin bar is rendered.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "show_admin_bar",
        "description": "Filter whether to show the admin bar.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show_admin_bar",
                "description": "Whether the admin bar should be shown. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_author",
        "description": "Filter the display name of the current post's author.",
        "arguments": [
            {
                "type": "string",
                "name": "$authordata->display_name",
                "description": "The author's display name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_modified_author",
        "description": "Filter the display name of the author who last edited the current post.",
        "arguments": [
            {
                "type": "string",
                "name": "$last_user->display_name",
                "description": "The author's display name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_author_{$field}",
        "description": "Filter the value of the requested user metadata.",
        "arguments": [
            {
                "type": "string",
                "name": "$value",
                "description": "The value of the metadata."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID for the value."
            },
            {
                "type": "int",
                "name": "$original_user_id",
                "description": "The original user ID, as passed to the function."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_author_{$field}",
        "description": "The value of the requested user metadata.",
        "arguments": [
            {
                "type": "string",
                "name": "$author_meta",
                "description": "The value of the metadata."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_author_posts_link",
        "description": "Filter the link to the author page of the author of the current post.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "HTML link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "author_link",
        "description": "Filter the URL to the author's page.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The URL to the author's page."
            },
            {
                "type": "int",
                "name": "$author_id",
                "description": "The author's id."
            },
            {
                "type": "string",
                "name": "$author_nicename",
                "description": "The author's nice name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "is_multi_author",
        "description": "Filter whether the site has more than one author with published posts.",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_multi_author",
                "description": "Whether $is_multi_author should evaluate as true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "link_category",
        "description": "Filter the bookmarks category name.",
        "arguments": [
            {
                "type": "string",
                "name": "$cat_name",
                "description": "The category name of bookmarks."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_list_bookmarks",
        "description": "Filter the bookmarks list before it is echoed or returned.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "The HTML list of bookmarks."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_bookmarks",
        "description": "Filter the returned list of bookmarks.",
        "arguments": [
            {
                "type": "array",
                "name": "$bookmarks",
                "description": "List of the cached bookmarks."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "An array of bookmark query arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "redirect_canonical",
        "description": "Filter the canonical redirect URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$redirect_url",
                "description": "The redirect URL."
            },
            {
                "type": "string",
                "name": "$requested_url",
                "description": "The requested URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auth_post_meta_{$meta_key}",
        "description": "Filter whether the user is allowed to add post meta to a post.",
        "arguments": [
            {
                "type": "bool",
                "name": "$allowed",
                "description": "Whether the user can add the post meta. Default false."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "The meta key."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$cap",
                "description": "Capability name."
            },
            {
                "type": "array",
                "name": "$caps",
                "description": "User capabilities."
            }
        ],
        "type": "filter"
    },
    {
        "text": "map_meta_cap",
        "description": "Filter a user's capabilities depending on specific context and\/or privilege.",
        "arguments": [
            {
                "type": "array",
                "name": "$caps",
                "description": "Returns the user's actual capabilities."
            },
            {
                "type": "string",
                "name": "$cap",
                "description": "Capability name."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Adds the context to the cap. Typically the object ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_categories",
        "description": "Filter the array of categories to return for a post.",
        "arguments": [
            {
                "type": "array",
                "name": "$categories",
                "description": "An array of categories to return for the post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "list_cats",
        "description": "Filter a taxonomy drop-down display element.",
        "arguments": [
            {
                "type": "string",
                "name": "$element",
                "description": "Taxonomy element to list."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_dropdown_cats",
        "description": "Filter the taxonomy drop-down output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML output."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "Arguments used to build the drop-down."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_list_categories",
        "description": "Filter the HTML output of a taxonomy list.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML output."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of taxonomy-listing arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_tag_cloud",
        "description": "Filter the tag cloud output.",
        "arguments": [
            {
                "type": "string",
                "name": "$return",
                "description": "HTML output of the tag cloud."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of tag cloud arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "tag_cloud_sort",
        "description": "Filter how the items in a tag cloud are sorted.",
        "arguments": [
            {
                "type": "array",
                "name": "$tags",
                "description": "Ordered array of terms."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of tag cloud arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_generate_tag_cloud_data",
        "description": "Filter the data used to generate the tag cloud.",
        "arguments": [
            {
                "type": "array",
                "name": "$tags_data",
                "description": "An array of term data for term used to generate the tag cloud."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_generate_tag_cloud",
        "description": "Filter the generated output of a tag cloud.",
        "arguments": [
            {
                "type": "array",
                "name": "$return",
                "description": "String containing the generated HTML tag cloud output                             or an array of tag links if the 'format' argument                             equals 'array'."
            },
            {
                "type": "array",
                "name": "$tags",
                "description": "An array of terms used in the tag cloud."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of wp_generate_tag_cloud() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_tags",
        "description": "Filter the array of tags for the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$terms",
                "description": "An array of tags for the given post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_tags",
        "description": "Filter the tags list for a given post.",
        "arguments": [
            {
                "type": "string",
                "name": "$tag_list",
                "description": "List of tags."
            },
            {
                "type": "string",
                "name": "$before",
                "description": "String to use before tags."
            },
            {
                "type": "string",
                "name": "$sep",
                "description": "String to use between the tags."
            },
            {
                "type": "string",
                "name": "$after",
                "description": "String to use after tags."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_terms",
        "description": "Filter the list of terms attached to the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$terms",
                "description": "List of attached terms, or WP_Error on failure."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Name of the taxonomy."
            }
        ],
        "type": "filter"
    },
    {
        "text": "term_links-{$taxonomy}",
        "description": "Filter the term links for a given taxonomy.",
        "arguments": [
            {
                "type": "array",
                "name": "$links",
                "description": "An array of term links."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_terms",
        "description": "Filter the list of terms to display.",
        "arguments": [
            {
                "type": "array",
                "name": "$term_list",
                "description": "List of terms to display."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy name."
            },
            {
                "type": "string",
                "name": "$before",
                "description": "String to use before the terms."
            },
            {
                "type": "string",
                "name": "$sep",
                "description": "String to use between the terms."
            },
            {
                "type": "string",
                "name": "$after",
                "description": "String to use after the terms."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_categories_taxonomy",
        "description": "Filter the taxonomy used to retrieve terms when calling {@see get_categories()}.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy to retrieve terms from."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments. See {@see get_terms()}."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_tags",
        "description": "Filter the array of term objects returned for the 'post_tag' taxonomy.",
        "arguments": [
            {
                "type": "array",
                "name": "$tags",
                "description": "Array of 'post_tag' term objects."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments. @see get_terms()"
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_author",
        "description": "Filter the returned comment author name.",
        "arguments": [
            {
                "type": "string",
                "name": "$author",
                "description": "The comment author's username."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_author",
        "description": "Filter the comment author's name for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$author",
                "description": "The comment author's username."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_author_email",
        "description": "Filter the comment author's returned email address.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_author_email",
                "description": "The comment author's email address."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "author_email",
        "description": "Filter the comment author's email for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$author_email",
                "description": "The comment author's email address."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_email",
        "description": "Filter the comment author's email for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_author_email",
                "description": "The comment author's email address."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_author_link",
        "description": "Filter the comment author's link for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$return",
                "description": "The HTML-formatted comment author link.                           Empty for an invalid URL."
            },
            {
                "type": "string",
                "name": "$author",
                "description": "The comment author's username."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_author_IP",
        "description": "Filter the comment author's returned IP address.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_author_IP",
                "description": "The comment author's IP address."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_author_url",
        "description": "Filter the comment author's URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The comment author's URL."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_url",
        "description": "Filter the comment author's URL for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$author_url",
                "description": "The comment author's URL."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_author_url_link",
        "description": "Filter the comment author's returned URL link.",
        "arguments": [
            {
                "type": "string",
                "name": "$return",
                "description": "The HTML-formatted comment author URL link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_class",
        "description": "Filter the returned CSS classes for the current comment.",
        "arguments": [
            {
                "type": "array",
                "name": "$classes",
                "description": "An array of comment classes."
            },
            {
                "type": "string",
                "name": "$class",
                "description": "A comma-separated list of additional classes added to the list."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment id."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment"
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID or WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_date",
        "description": "Filter the returned comment date.",
        "arguments": [
            {
                "type": "string",
                "name": "$date",
                "description": "Formatted date string or Unix timestamp."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "The format of the date."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_excerpt",
        "description": "Filter the retrieved comment excerpt.",
        "arguments": [
            {
                "type": "string",
                "name": "$excerpt",
                "description": "The comment excerpt text."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_excerpt",
        "description": "Filter the comment excerpt for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_excerpt",
                "description": "The comment excerpt text."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_ID",
        "description": "Filter the returned comment ID.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The current comment ID."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_link",
        "description": "Filter the returned single comment permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The comment permalink with '#comment-$id' appended."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The current comment object."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments to override the defaults."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comments_link",
        "description": "Filter the returned post comments permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$comments_link",
                "description": "Post comments permalink with '#comments' appended."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID or WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comments_number",
        "description": "Filter the returned comment count for a post.",
        "arguments": [
            {
                "type": "int",
                "name": "$count",
                "description": "Number of comments a post has."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_number",
        "description": "Filter the comments count for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "A translatable string formatted based on whether the count                       is equal to 0, 1, or 1+."
            },
            {
                "type": "int",
                "name": "$number",
                "description": "The number of post comments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_text",
        "description": "Filter the text of a comment.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_content",
                "description": "Text of the comment."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment object."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_text",
        "description": "Filter the text of a comment to be displayed.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_text",
                "description": "Text of the current comment."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment object."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_time",
        "description": "Filter the returned comment time.",
        "arguments": [
            {
                "type": "string",
                "name": "$date",
                "description": "The comment time, formatted as a date string or Unix timestamp."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "Date format."
            },
            {
                "type": "bool",
                "name": "$gmt",
                "description": "Whether the GMT date is in use."
            },
            {
                "type": "bool",
                "name": "$translate",
                "description": "Whether the time is translated."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_type",
        "description": "Filter the returned comment type.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_type",
                "description": "The type of comment, such as 'comment', 'pingback', or 'trackback'."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "trackback_url",
        "description": "Filter the returned trackback URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$tb_url",
                "description": "The trackback URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_open",
        "description": "Filter whether the current post is open for comments.",
        "arguments": [
            {
                "type": "bool",
                "name": "$open",
                "description": "Whether the current post is open for comments."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID or WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pings_open",
        "description": "Filter whether the current post is open for pings.",
        "arguments": [
            {
                "type": "bool",
                "name": "$open",
                "description": "Whether the current post is open for pings."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID or WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_popup_link_attributes",
        "description": "Filter the comments popup link attributes for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$attributes",
                "description": "The comments popup link attributes. Default empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_reply_link_args",
        "description": "Filter the comment reply link arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Comment reply link arguments. See {@see get_comment_reply_link()}                         for more information on accepted arguments."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The object of the comment being replied to."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The {@see WP_Post} object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_reply_link",
        "description": "Filter the comment reply link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The HTML markup for the comment reply link."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments overriding the defaults."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The object of the comment being replied."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_comments_link",
        "description": "Filter the formatted post comments link HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$formatted",
                "description": "The HTML-formatted post comments link."
            },
            {
                "type": "int",
                "name": "$post",
                "description": "The post ID or WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "cancel_comment_reply_link",
        "description": "Filter the cancel comment reply link HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$formatted_link",
                "description": "The HTML-formatted cancel comment reply link."
            },
            {
                "type": "string",
                "name": "$link",
                "description": "Cancel comment reply link URL."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Cancel comment reply link text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_id_fields",
        "description": "Filter the returned comment id fields.",
        "arguments": [
            {
                "type": "string",
                "name": "$result",
                "description": "The HTML-formatted hidden id field comment elements."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "The post ID."
            },
            {
                "type": "int",
                "name": "$replytoid",
                "description": "The id of the comment being replied to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_list_comments_args",
        "description": "Filter the arguments used in retrieving the comment list.",
        "arguments": [
            {
                "type": "array",
                "name": "$r",
                "description": "An array of arguments for displaying comments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_default_fields",
        "description": "Filter the default comment form fields.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "The default comment fields."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_defaults",
        "description": "Filter the comment form default arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$defaults",
                "description": "The default comment form arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_before",
        "description": "Fires before the comment form.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "comment_form_must_log_in_after",
        "description": "Fires after the HTML-formatted 'must log in after' message in the comment form.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "comment_form_top",
        "description": "Fires at the top of the comment form, inside the form tag.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "comment_form_logged_in",
        "description": "Filter the 'logged in' message for the comment form for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$args_logged_in",
                "description": "The logged-in-as HTML-formatted message."
            },
            {
                "type": "array",
                "name": "$commenter",
                "description": "An array containing the comment author's                               username, email, and URL."
            },
            {
                "type": "string",
                "name": "$user_identity",
                "description": "If the commenter is a registered user,                               the display name, blank otherwise."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_logged_in_after",
        "description": "Fires after the is_user_logged_in() check in the comment form.",
        "arguments": [
            {
                "type": "array",
                "name": "$commenter",
                "description": "An array containing the comment author's                              username, email, and URL."
            },
            {
                "type": "string",
                "name": "$user_identity",
                "description": "If the commenter is a registered user,                              the display name, blank otherwise."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_form_before_fields",
        "description": "Fires before the comment fields in the comment form.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "comment_form_field_{$name}",
        "description": "Filter a comment form field for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$field",
                "description": "The HTML-formatted output of the comment form field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_after_fields",
        "description": "Fires after the comment fields in the comment form.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "comment_form_field_comment",
        "description": "Filter the content of the comment textarea field for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$args_comment_field",
                "description": "The content of the comment textarea field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_submit_button",
        "description": "Filter the submit button for the comment form to display.",
        "arguments": [
            {
                "type": "string",
                "name": "$submit_button",
                "description": "HTML markup for the submit button."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to <code>comment_form()<\/code>."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_submit_field",
        "description": "Filter the submit field for the comment form to display.",
        "arguments": [
            {
                "type": "string",
                "name": "$submit_field",
                "description": "HTML markup for the submit field."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to comment_form()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form",
        "description": "Fires at the bottom of the comment form, inside the closing <\/form> tag.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_form_after",
        "description": "Fires after the comment form.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "comment_form_comments_closed",
        "description": "Fires after the comment form if comments are closed.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "comment_max_links_url",
        "description": "Filter the maximum number of links allowed in a comment.",
        "arguments": [
            {
                "type": "int",
                "name": "$num_links",
                "description": "The number of links allowed."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "Comment author's URL. Included in allowed links total."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment",
        "description": "Fires after a comment is retrieved.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$_comment",
                "description": "Comment data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_default_comment_status",
        "description": "Filter the default comment status for the given post type.",
        "arguments": [
            {
                "type": "string",
                "name": "$status",
                "description": "Default status for the given post type,                             either 'open' or 'closed'."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type. Default is <code>post<\/code>."
            },
            {
                "type": "string",
                "name": "$comment_type",
                "description": "Type of comment. Default is <code>comment<\/code>."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_cookie_lifetime",
        "description": "Filter the lifetime of the comment cookie in seconds.",
        "arguments": [
            {
                "type": "int",
                "name": "$seconds",
                "description": "Comment cookie lifetime. Default 30000000."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_comment_author_name",
        "description": "Filter the comment author's name cookie before it is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$author_cookie",
                "description": "The comment author name cookie."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_comment_author_email",
        "description": "Filter the comment author's email cookie before it is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$author_email_cookie",
                "description": "The comment author email cookie."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_comment_author_url",
        "description": "Filter the comment author's URL cookie before it is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$author_url_cookie",
                "description": "The comment author URL cookie."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_duplicate_trigger",
        "description": "Fires immediately after a duplicate comment is detected.",
        "arguments": [
            {
                "type": "array",
                "name": "$commentdata",
                "description": "Comment data."
            }
        ],
        "type": "action"
    },
    {
        "text": "check_comment_flood",
        "description": "Fires immediately before a comment is marked approved.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_author_IP",
                "description": "Comment author's IP address."
            },
            {
                "type": "string",
                "name": "$comment_author_email",
                "description": "Comment author's email."
            },
            {
                "type": "string",
                "name": "$comment_date_gmt",
                "description": "GMT date the comment was posted."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_comment_approved",
        "description": "Filter a comment's approval status before it is set.",
        "arguments": [
            {
                "type": "bool",
                "name": "$approved",
                "description": "The approval status. Accepts 1, 0, or 'spam'."
            },
            {
                "type": "array",
                "name": "$commentdata",
                "description": "Comment data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_flood_filter",
        "description": "Filter the comment flood status.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bool",
                "description": "Whether a comment flood is occurring. Default false."
            },
            {
                "type": "int",
                "name": "$time_lastcomment",
                "description": "Timestamp of when the last comment was posted."
            },
            {
                "type": "int",
                "name": "$time_newcomment",
                "description": "Timestamp of when the new comment was posted."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_flood_trigger",
        "description": "Fires before the comment flood message is triggered.",
        "arguments": [
            {
                "type": "int",
                "name": "$time_lastcomment",
                "description": "Timestamp of when the last comment was posted."
            },
            {
                "type": "int",
                "name": "$time_newcomment",
                "description": "Timestamp of when the new comment was posted."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_blacklist_check",
        "description": "Fires before the comment is tested for blacklisted characters or words.",
        "arguments": [
            {
                "type": "string",
                "name": "$author",
                "description": "Comment author."
            },
            {
                "type": "string",
                "name": "$email",
                "description": "Comment author's email."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "Comment author's URL."
            },
            {
                "type": "string",
                "name": "$comment",
                "description": "Comment content."
            },
            {
                "type": "string",
                "name": "$user_ip",
                "description": "Comment author's IP address."
            },
            {
                "type": "string",
                "name": "$user_agent",
                "description": "Comment author's browser user agent."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_count_comments",
        "description": "Filter the comments count for a given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$count",
                "description": "An empty array."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_comment",
        "description": "Fires immediately before a comment is deleted from the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_comment",
        "description": "Fires immediately after a comment is deleted from the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_set_comment_status",
        "description": "This action is documented in wp-includes\/comment.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "trash_comment",
        "description": "Fires immediately before a comment is sent to the Trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "trashed_comment",
        "description": "Fires immediately after a comment is sent to Trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "untrash_comment",
        "description": "Fires immediately before a comment is restored from the Trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "untrashed_comment",
        "description": "Fires immediately after a comment is restored from the Trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "spam_comment",
        "description": "Fires immediately before a comment is marked as Spam.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "spammed_comment",
        "description": "Fires immediately after a comment is marked as Spam.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "unspam_comment",
        "description": "Fires immediately before a comment is unmarked as Spam.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "unspammed_comment",
        "description": "Fires immediately after a comment is unmarked as Spam.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "transition_comment_status",
        "description": "Fires when the comment status is in transition.",
        "arguments": [
            {
                "type": "int",
                "name": "$new_status",
                "description": "The new comment status."
            },
            {
                "type": "int",
                "name": "$old_status",
                "description": "The old comment status."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment data."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_{$old_status}_to_{$new_status}",
        "description": "Fires when the comment status is in transition from one specific status to another.",
        "arguments": [
            {
                "type": "object",
                "name": "$comment",
                "description": "Comment object."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_{$new_status}_{$comment->comment_type}",
        "description": "Fires when the status of a specific comment type is in transition.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "\\obj",
                "name": "$comment",
                "description": "Comment object."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_get_current_commenter",
        "description": "Filter the current commenter's name, email, and URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_author",
                "description": "Comment author's name."
            },
            {
                "type": "string",
                "name": "$comment_author_email",
                "description": "Comment author's email."
            },
            {
                "type": "string",
                "name": "$comment_author_url",
                "description": "Comment author's URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_insert_comment",
        "description": "Fires immediately after a comment is inserted into the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "The comment ID."
            },
            {
                "type": "\\obj",
                "name": "$comment",
                "description": "Comment object."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_user_id",
        "description": "Filter the comment author's user id before it is set.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_ID",
                "description": "The comment author's user ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_comment_user_agent",
        "description": "Filter the comment author's browser user agent before it is set.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_agent",
                "description": "The comment author's browser user agent."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_comment_content",
        "description": "Filter the comment content before it is set.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_content",
                "description": "The comment content."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_comment_user_ip",
        "description": "Filter the comment author's IP before it is set.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_author_ip",
                "description": "The comment author's IP."
            }
        ],
        "type": "filter"
    },
    {
        "text": "preprocess_comment",
        "description": "Filter a comment's data before it is sanitized and inserted into the database.",
        "arguments": [
            {
                "type": "array",
                "name": "$commentdata",
                "description": "Comment data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_post",
        "description": "Fires immediately after a comment is inserted into the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "int",
                "name": "$comment_approved",
                "description": "1 (true) if the comment is approved, 0 (false) if not."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_save_pre",
        "description": "Filter the comment content before it is updated in the database.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_content",
                "description": "The comment data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_comment",
        "description": "Fires immediately after a comment is updated in the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_update_comment_count",
        "description": "Fires immediately after a post's comment count is updated in the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "int",
                "name": "$new",
                "description": "The new comment count."
            },
            {
                "type": "int",
                "name": "$old",
                "description": "The old comment count."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_post",
        "description": "This action is documented in wp-includes\/post.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "pre_ping",
        "description": "Fires just before pinging back links found in a post.",
        "arguments": [
            {
                "type": "array",
                "name": "",
                "description": "&amp;$post_links An array of post links to be checked, passed by reference."
            },
            {
                "type": "array",
                "name": "",
                "description": "&amp;$pung       Whether a link has already been pinged, passed by reference."
            },
            {
                "type": "int",
                "name": "$post_ID",
                "description": "The post ID."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "pingback_useragent",
        "description": "Filter the user agent sent when pinging-back a URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$concat_useragent",
                "description": "The user agent concatenated with ' -- WordPress\/'                                    and the WordPress version."
            },
            {
                "type": "string",
                "name": "$useragent",
                "description": "The useragent."
            },
            {
                "type": "string",
                "name": "$pingback_server_url",
                "description": "The server URL being linked to."
            },
            {
                "type": "string",
                "name": "$pagelinkedto",
                "description": "URL of page linked to."
            },
            {
                "type": "string",
                "name": "$pagelinkedfrom",
                "description": "URL of page linked from."
            }
        ],
        "type": "filter"
    },
    {
        "text": "close_comments_for_post_types",
        "description": "Filter the list of post types to automatically close comments for.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_types",
                "description": "An array of registered post types. Default array with 'post'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "schedule_event",
        "description": "Filter a single event before it is scheduled.",
        "arguments": [
            {
                "type": "object",
                "name": "$event",
                "description": "An object containing an event's data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "cron_request",
        "description": "Filter the cron request arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$cron_request_array",
                "description": "{     An array of cron request URL arguments.     @type string $url  The cron request URL.     @type int    $key  The 22 digit GMT microtime.     @type array  $args {         An array of cron request arguments.         @type int  $timeout   The request timeout in seconds. Default .01 seconds.         @type bool $blocking  Whether to set blocking for the request. Default false.         @type bool $sslverify Whether SSL should be verified for the request. Default false.     } }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "cron_schedules",
        "description": "Filter the non-default cron schedules.",
        "arguments": [
            {
                "type": "array",
                "name": "$new_schedules",
                "description": "An array of non-default cron schedules. Default empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widgets_init",
        "description": "Fires after all default WordPress widgets have been registered.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "the_content_rss",
        "description": "TODO: consult hierarchy",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "icon_dir",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "attachment_max_dims",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "attachment_icon",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "attachment_innerHTML",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "delete_usermeta",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "deleted_usermeta",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "update_usermeta",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "added_usermeta",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "updated_usermeta",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "{$boundary}_post_rel_link",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "index_rel_link",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "parent_post_rel_link",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "extra_theme_headers",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "image_memory_limit",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "richedit_pre",
        "description": "Filter text returned for the rich text editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Text for the rich text editor."
            }
        ],
        "type": "filter"
    },
    {
        "text": "htmledit_pre",
        "description": "Filter the text before it is formatted for the HTML editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The HTML-formatted text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rss_tag_pre",
        "description": "This action is documented in wp-includes\/feed-rss2.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "atom_ns",
        "description": "This action is documented in wp-includes\/feed-atom.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "atom_comments_ns",
        "description": "Fires inside the feed tag in the Atom comment feed.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "comments_atom_head",
        "description": "Fires at the end of the Atom comment feed header.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "comment_atom_entry",
        "description": "Fires at the end of each Atom comment feed item.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "ID of the current comment."
            },
            {
                "type": "int",
                "name": "$comment_post_id",
                "description": "ID of the post the current comment is connected to."
            }
        ],
        "type": "action"
    },
    {
        "text": "atom_head",
        "description": "Fires just before the first Atom feed entry.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "atom_author",
        "description": "Fires at the end of each Atom feed author entry.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "atom_entry",
        "description": "Fires at the end of each Atom feed item.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "rdf_ns",
        "description": "Fires at the end of the feed root to add namespaces.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "rdf_header",
        "description": "Fires at the end of the RDF feed header.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "rdf_item",
        "description": "Fires at the end of each RDF feed item.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "rss_head",
        "description": "Fires at the end of the RSS Feed Header.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "rss_item",
        "description": "Fires at the end of each RSS feed item.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "rss2_ns",
        "description": "This action is documented in wp-includes\/feed-rss2.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "rss2_comments_ns",
        "description": "Fires at the end of the RSS root to add namespaces.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "commentsrss2_head",
        "description": "Fires at the end of the RSS2 comment feed header.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "commentrss2_item",
        "description": "Fires at the end of each RSS2 comment feed item.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment->comment_ID",
                "description": "The ID of the comment being displayed."
            },
            {
                "type": "int",
                "name": "$comment_post->ID",
                "description": "The ID of the post the comment is connected to."
            }
        ],
        "type": "action"
    },
    {
        "text": "rss2_item",
        "description": "Fires at the end of each RSS2 feed item.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "get_bloginfo_rss",
        "description": "Filter the bloginfo for use in RSS feeds.",
        "arguments": [
            {
                "type": "string",
                "name": "$info",
                "description": "Converted string value of the blog information."
            },
            {
                "type": "string",
                "name": "$show",
                "description": "The type of blog information to retrieve."
            }
        ],
        "type": "filter"
    },
    {
        "text": "bloginfo_rss",
        "description": "Filter the bloginfo for display in RSS feeds.",
        "arguments": [
            {
                "type": "string",
                "name": "$rss_container",
                "description": "RSS container for the blog information."
            },
            {
                "type": "string",
                "name": "$show",
                "description": "The type of blog information to retrieve."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_feed",
        "description": "Filter the default feed type.",
        "arguments": [
            {
                "type": "string",
                "name": "$feed_type",
                "description": "Type of default feed. Possible values include 'rss2', 'atom'.                          Default 'rss2'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_wp_title_rss",
        "description": "Filter the blog title for use as the feed title.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "The current blog title."
            },
            {
                "type": "string",
                "name": "$sep",
                "description": "Separator used by wp_title()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_title_rss",
        "description": "Filter the blog title for display of the feed title.",
        "arguments": [
            {
                "type": "string",
                "name": "$wp_title",
                "description": "The current blog title."
            },
            {
                "type": "string",
                "name": "$sep",
                "description": "Separator used by wp_title()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_content_feed",
        "description": "Filter the post content for use in feeds.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "The current post content."
            },
            {
                "type": "string",
                "name": "$feed_type",
                "description": "Type of feed. Possible values include 'rss2', 'atom'.                          Default 'rss2'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_excerpt_rss",
        "description": "Filter the post excerpt for a feed.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The current post excerpt."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_permalink_rss",
        "description": "Filter the permalink to the post for use in feeds.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_permalink",
                "description": "The current post permalink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_link_feed",
        "description": "Filter the comments permalink for the current post.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_permalink",
                "description": "The current comment permalink with                                  '#comments' appended."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_link",
        "description": "Filter the current comment's permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_permalink",
                "description": "The current comment permalink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_author_rss",
        "description": "Filter the current comment author for use in a feed.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_author",
                "description": "The current comment author."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_text_rss",
        "description": "Filter the current comment content for use in a feed.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_text",
                "description": "The content of the current comment."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_category_rss",
        "description": "Filter all of the post categories for display in a feed.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_list",
                "description": "All of the RSS post categories."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Type of feed. Possible values include 'rss2', 'atom'.                         Default 'rss2'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rss_enclosure",
        "description": "Filter the RSS enclosure HTML link tag for the current post.",
        "arguments": [
            {
                "type": "string",
                "name": "$html_link_tag",
                "description": "The HTML link tag with a URI and other attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "atom_enclosure",
        "description": "Filter the atom enclosure HTML link tag for the current post.",
        "arguments": [
            {
                "type": "string",
                "name": "$html_link_tag",
                "description": "The HTML link tag with a URI and other attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "self_link",
        "description": "Filter the current feed URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$feed_link",
                "description": "The link for the feed with set URL scheme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "feed_content_type",
        "description": "Filter the content type for a specific feed type.",
        "arguments": [
            {
                "type": "string",
                "name": "$content_type",
                "description": "Content type indicating the type of data that a feed contains."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Type of feed. Possible values include 'rss2', 'atom'.                             Default 'rss2'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_feed_options",
        "description": "Fires just before processing the SimplePie feed object.",
        "arguments": [
            {
                "type": "object",
                "name": "",
                "description": "&amp;$feed SimplePie feed object, passed by reference."
            },
            {
                "type": "mixed",
                "name": "$url",
                "description": "URL of feed to retrieve. If an array of URLs, the feeds are merged."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "run_wptexturize",
        "description": "Filter whether to skip running wptexturize().",
        "arguments": [
            {
                "type": "bool",
                "name": "$run_texturize",
                "description": "Whether to short-circuit wptexturize()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "no_texturize_tags",
        "description": "Filter the list of HTML elements not to texturize.",
        "arguments": [
            {
                "type": "array",
                "name": "$default_no_texturize_tags",
                "description": "An array of HTML element names."
            }
        ],
        "type": "filter"
    },
    {
        "text": "no_texturize_shortcodes",
        "description": "Filter the list of shortcodes not to texturize.",
        "arguments": [
            {
                "type": "array",
                "name": "$default_no_texturize_shortcodes",
                "description": "An array of shortcode names."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_file_name_chars",
        "description": "Filter the list of characters to remove from a filename.",
        "arguments": [
            {
                "type": "array",
                "name": "$special_chars",
                "description": "Characters to remove."
            },
            {
                "type": "string",
                "name": "$filename_raw",
                "description": "Filename as it was passed into sanitize_file_name()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_file_name",
        "description": "Filter a sanitized filename string.",
        "arguments": [
            {
                "type": "string",
                "name": "$filename",
                "description": "Sanitized filename."
            },
            {
                "type": "string",
                "name": "$filename_raw",
                "description": "The filename prior to sanitization."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_user",
        "description": "Filter a sanitized username string.",
        "arguments": [
            {
                "type": "string",
                "name": "$username",
                "description": "Sanitized username."
            },
            {
                "type": "string",
                "name": "$raw_username",
                "description": "The username prior to sanitization."
            },
            {
                "type": "bool",
                "name": "$strict",
                "description": "Whether to limit the sanitization to specific characters. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_key",
        "description": "Filter a sanitized key string.",
        "arguments": [
            {
                "type": "string",
                "name": "$key",
                "description": "Sanitized key."
            },
            {
                "type": "string",
                "name": "$raw_key",
                "description": "The key prior to sanitization."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_title",
        "description": "Filter a sanitized title string.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Sanitized title."
            },
            {
                "type": "string",
                "name": "$raw_title",
                "description": "The title prior to sanitization."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The context for which the title is being sanitized."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_html_class",
        "description": "Filter a sanitized HTML class string.",
        "arguments": [
            {
                "type": "string",
                "name": "$sanitized",
                "description": "The sanitized HTML class."
            },
            {
                "type": "string",
                "name": "$class",
                "description": "HTML class before sanitization."
            },
            {
                "type": "string",
                "name": "$fallback",
                "description": "The fallback string."
            }
        ],
        "type": "filter"
    },
    {
        "text": "format_to_edit",
        "description": "Filter the text to be formatted for editing.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "The text, prior to formatting for editing."
            }
        ],
        "type": "filter"
    },
    {
        "text": "smilies_src",
        "description": "Filter the Smiley image URL before it's used in the image element.",
        "arguments": [
            {
                "type": "string",
                "name": "$smiley_url",
                "description": "URL for the smiley image."
            },
            {
                "type": "string",
                "name": "$img",
                "description": "Filename for the smiley image."
            },
            {
                "type": "string",
                "name": "$site_url",
                "description": "Site URL, as returned by site_url()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "is_email",
        "description": "Filter whether an email address is valid.",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_email",
                "description": "Whether the email address has passed the is_email() checks. Default false."
            },
            {
                "type": "string",
                "name": "$email",
                "description": "The email address being checked."
            },
            {
                "type": "string",
                "name": "$message",
                "description": "An explanatory message to the user."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context under which the email was tested."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_email",
        "description": "Filter a sanitized email address.",
        "arguments": [
            {
                "type": "string",
                "name": "$email",
                "description": "The sanitized email address."
            },
            {
                "type": "string",
                "name": "$email",
                "description": "The email address, as provided to sanitize_email()."
            },
            {
                "type": "string",
                "name": "$message",
                "description": "A message to pass to the user."
            }
        ],
        "type": "filter"
    },
    {
        "text": "human_time_diff",
        "description": "Filter the human readable difference between two timestamps.",
        "arguments": [
            {
                "type": "string",
                "name": "$since",
                "description": "The difference in human readable text."
            },
            {
                "type": "int",
                "name": "$diff",
                "description": "The difference in seconds."
            },
            {
                "type": "int",
                "name": "$from",
                "description": "Unix timestamp from which the difference begins."
            },
            {
                "type": "int",
                "name": "$to",
                "description": "Unix timestamp to end the time difference."
            }
        ],
        "type": "filter"
    },
    {
        "text": "excerpt_length",
        "description": "Filter the number of words in an excerpt.",
        "arguments": [
            {
                "type": "int",
                "name": "$number",
                "description": "The number of words. Default 55."
            }
        ],
        "type": "filter"
    },
    {
        "text": "excerpt_more",
        "description": "Filter the string in the \"more\" link displayed after a trimmed excerpt.",
        "arguments": [
            {
                "type": "string",
                "name": "$more_string",
                "description": "The string shown within the more link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_trim_excerpt",
        "description": "Filter the trimmed excerpt string.",
        "arguments": [
            {
                "type": "string",
                "name": "$text",
                "description": "The trimmed text."
            },
            {
                "type": "string",
                "name": "$raw_excerpt",
                "description": "The text prior to trimming."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_trim_words",
        "description": "Filter the text content after words have been trimmed.",
        "arguments": [
            {
                "type": "string",
                "name": "$text",
                "description": "The trimmed text."
            },
            {
                "type": "int",
                "name": "$num_words",
                "description": "The number of words to trim the text to. Default 5."
            },
            {
                "type": "string",
                "name": "$more",
                "description": "An optional string to append to the end of the trimmed text, e.g. &hellip;."
            },
            {
                "type": "string",
                "name": "$original_text",
                "description": "The text before it was trimmed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_ent2ncr",
        "description": "Filter text before named entities are converted into numbered entities.",
        "arguments": [
            {
                "type": "null",
                "name": "$converted_text",
                "description": "The text to be converted. Default null."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "The text prior to entity conversion."
            }
        ],
        "type": "filter"
    },
    {
        "text": "format_for_editor",
        "description": "Filter the text after it is formatted for the editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$text",
                "description": "The formatted text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "clean_url",
        "description": "Filter a string cleaned and escaped for output as a URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$good_protocol_url",
                "description": "The cleaned URL to be returned."
            },
            {
                "type": "string",
                "name": "$original_url",
                "description": "The URL prior to cleaning."
            },
            {
                "type": "string",
                "name": "$_context",
                "description": "If 'display', replace ampersands and single quotes only."
            }
        ],
        "type": "filter"
    },
    {
        "text": "js_escape",
        "description": "Filter a string cleaned and escaped for output in JavaScript.",
        "arguments": [
            {
                "type": "string",
                "name": "$safe_text",
                "description": "The text after it has been escaped."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "The text prior to being escaped."
            }
        ],
        "type": "filter"
    },
    {
        "text": "esc_html",
        "description": "Filter a string cleaned and escaped for output in HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$safe_text",
                "description": "The text after it has been escaped."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "The text prior to being escaped."
            }
        ],
        "type": "filter"
    },
    {
        "text": "attribute_escape",
        "description": "Filter a string cleaned and escaped for output in an HTML attribute.",
        "arguments": [
            {
                "type": "string",
                "name": "$safe_text",
                "description": "The text after it has been escaped."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "The text prior to being escaped."
            }
        ],
        "type": "filter"
    },
    {
        "text": "esc_textarea",
        "description": "Filter a string cleaned and escaped for output in a textarea element.",
        "arguments": [
            {
                "type": "string",
                "name": "$safe_text",
                "description": "The text after it has been escaped."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "The text prior to being escaped."
            }
        ],
        "type": "filter"
    },
    {
        "text": "tag_escape",
        "description": "Filter a string cleaned and escaped for output as an HTML tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$safe_tag",
                "description": "The tag name after it has been escaped."
            },
            {
                "type": "string",
                "name": "$tag_name",
                "description": "The text before it was escaped."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_option_{$option}",
        "description": "Filter an option value following sanitization.",
        "arguments": [
            {
                "type": "string",
                "name": "$value",
                "description": "The sanitized option value."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "The option name."
            },
            {
                "type": "string",
                "name": "$original_value",
                "description": "The original value passed to the function."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_parse_str",
        "description": "Filter the array of variables derived from a parsed string.",
        "arguments": [
            {
                "type": "array",
                "name": "$array",
                "description": "The array populated with variables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_sprintf",
        "description": "Filter a fragment from the pattern passed to wp_sprintf().",
        "arguments": [
            {
                "type": "string",
                "name": "$fragment",
                "description": "A fragment from the pattern."
            },
            {
                "type": "string",
                "name": "$arg",
                "description": "The argument."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_sprintf_l",
        "description": "Filter the translated delimiters used by wp_sprintf_l().",
        "arguments": [
            {
                "type": "array",
                "name": "$delimiters",
                "description": "An array of translated delimiters."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_text_field",
        "description": "Filter a sanitized text field string.",
        "arguments": [
            {
                "type": "string",
                "name": "$filtered",
                "description": "The sanitized string."
            },
            {
                "type": "string",
                "name": "$str",
                "description": "The string prior to being sanitized."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_mime_type",
        "description": "Filter a mime type following sanitization.",
        "arguments": [
            {
                "type": "string",
                "name": "$sani_mime_type",
                "description": "The sanitized mime type."
            },
            {
                "type": "string",
                "name": "$mime_type",
                "description": "The mime type prior to sanitization."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_trackback_urls",
        "description": "Filter a list of trackback URLs following sanitization.",
        "arguments": [
            {
                "type": "string",
                "name": "$urls_to_ping",
                "description": "Sanitized space or carriage return separated URLs."
            },
            {
                "type": "string",
                "name": "$to_ping",
                "description": "Space or carriage return separated URLs before sanitization."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_spaces_regexp",
        "description": "Filter the regexp for common whitespace characters.",
        "arguments": [
            {
                "type": "string",
                "name": "$spaces",
                "description": "Regexp pattern for matching common whitespace characters."
            }
        ],
        "type": "filter"
    },
    {
        "text": "emoji_url",
        "description": "Filter the URL where emoji images are hosted.",
        "arguments": [
            {
                "type": "string",
                "name": "",
                "description": "The emoji base URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "emoji_ext",
        "description": "Filter the extension of the emoji files.",
        "arguments": [
            {
                "type": "string",
                "name": "",
                "description": "The emoji extension. Default .png."
            }
        ],
        "type": "filter"
    },
    {
        "text": "date_i18n",
        "description": "Filter the date formatted based on the locale.",
        "arguments": [
            {
                "type": "string",
                "name": "$j",
                "description": "Formatted date string."
            },
            {
                "type": "string",
                "name": "$req_format",
                "description": "Format to display the date."
            },
            {
                "type": "int",
                "name": "$i",
                "description": "Unix timestamp."
            },
            {
                "type": "bool",
                "name": "$gmt",
                "description": "Whether to convert to GMT for time. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "number_format_i18n",
        "description": "Filter the number formatted based on the locale.",
        "arguments": [
            {
                "type": "string",
                "name": "$formatted",
                "description": "Converted number in string format."
            }
        ],
        "type": "filter"
    },
    {
        "text": "status_header",
        "description": "Filter an HTTP status header.",
        "arguments": [
            {
                "type": "string",
                "name": "$status_header",
                "description": "HTTP status header."
            },
            {
                "type": "int",
                "name": "$code",
                "description": "HTTP status code."
            },
            {
                "type": "string",
                "name": "$description",
                "description": "Description for the status code."
            },
            {
                "type": "string",
                "name": "$protocol",
                "description": "Server protocol."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nocache_headers",
        "description": "Filter the cache-controlling headers.",
        "arguments": [
            {
                "type": "array",
                "name": "$headers",
                "description": "{     Header names and field values.     @type string $Expires       Expires header.     @type string $Cache-Control Cache-Control header.     @type string $Pragma        Pragma header. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "do_robotstxt",
        "description": "Fires when displaying the robots.txt file.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "robots_txt",
        "description": "Filter the robots.txt output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Robots.txt output."
            },
            {
                "type": "bool",
                "name": "$public",
                "description": "Whether the site is considered \"public\"."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upload_dir",
        "description": "Filter the uploads directory data.",
        "arguments": [
            {
                "type": "array",
                "name": "$uploads",
                "description": "Array of upload directory data with keys of 'path',                       'url', 'subdir, 'basedir', and 'error'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_upload_bits",
        "description": "Filter whether to treat the upload bits as an error.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$upload_bits_error",
                "description": "An array of upload bits data, or a non-array error to return."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ext2type",
        "description": "Filter file type based on the extension name.",
        "arguments": [
            {
                "type": "array",
                "name": "$ext2type",
                "description": "Multi-dimensional array with extensions for a default set                        of file types."
            }
        ],
        "type": "filter"
    },
    {
        "text": "getimagesize_mimes_to_exts",
        "description": "Filter the list mapping image mime types to their respective extensions.",
        "arguments": [
            {
                "type": "array",
                "name": "$mime_to_ext",
                "description": "Array of image mime types and their matching extensions."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_check_filetype_and_ext",
        "description": "Filter the \"real\" file type of the given file.",
        "arguments": [
            {
                "type": "array",
                "name": "$wp_check_filetype_and_ext",
                "description": "File data array containing 'ext', 'type', and                                          'proper_filename' keys."
            },
            {
                "type": "string",
                "name": "$file",
                "description": "Full path to the file."
            },
            {
                "type": "string",
                "name": "$filename",
                "description": "The name of the file (may differ from $file due to                                          $file being in a tmp directory)."
            },
            {
                "type": "array",
                "name": "$mimes",
                "description": "Key is the file extension with value as the mime type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mime_types",
        "description": "Filter the list of mime types and file extensions.",
        "arguments": [
            {
                "type": "array",
                "name": "$wp_get_mime_types",
                "description": "Mime types keyed by the file extension regex                                 corresponding to those types."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upload_mimes",
        "description": "Filter list of allowed mime types and file extensions.",
        "arguments": [
            {
                "type": "array",
                "name": "$t",
                "description": "Mime types keyed by the file extension regex corresponding to                               those types. 'swf' and 'exe' removed from full list. 'htm|html' also                               removed depending on '$user' capabilities."
            },
            {
                "type": "int",
                "name": "$user",
                "description": "User ID, User object or null if not provided (indicates current user)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_die_ajax_handler",
        "description": "Filter callback for killing WordPress execution for AJAX requests.",
        "arguments": [
            {
                "type": "callback",
                "name": "$function",
                "description": "Callback function name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_die_xmlrpc_handler",
        "description": "Filter callback for killing WordPress execution for XML-RPC requests.",
        "arguments": [
            {
                "type": "callback",
                "name": "$function",
                "description": "Callback function name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_die_handler",
        "description": "Filter callback for killing WordPress execution for all non-AJAX, non-XML-RPC requests.",
        "arguments": [
            {
                "type": "callback",
                "name": "$function",
                "description": "Callback function name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_default_widgets",
        "description": "Filter whether to load the Widgets library.",
        "arguments": [
            {
                "type": "bool",
                "name": "$wp_maybe_load_widgets",
                "description": "Whether to load the Widgets library.                                    Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "deprecated_function_run",
        "description": "Fires when a deprecated function is called.",
        "arguments": [
            {
                "type": "string",
                "name": "$function",
                "description": "The function that was called."
            },
            {
                "type": "string",
                "name": "$replacement",
                "description": "The function that should have been called."
            },
            {
                "type": "string",
                "name": "$version",
                "description": "The version of WordPress that deprecated the function."
            }
        ],
        "type": "action"
    },
    {
        "text": "deprecated_function_trigger_error",
        "description": "Filter whether to trigger an error for deprecated functions.",
        "arguments": [
            {
                "type": "bool",
                "name": "$trigger",
                "description": "Whether to trigger the error for deprecated functions. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "deprecated_constructor_run",
        "description": "Fires when a deprecated constructor is called.",
        "arguments": [
            {
                "type": "string",
                "name": "$class",
                "description": "The class containing the deprecated constructor."
            },
            {
                "type": "string",
                "name": "$version",
                "description": "The version of WordPress that deprecated the function."
            }
        ],
        "type": "action"
    },
    {
        "text": "deprecated_constructor_trigger_error",
        "description": "Filter whether to trigger an error for deprecated functions.",
        "arguments": [
            {
                "type": "bool",
                "name": "$trigger",
                "description": "Whether to trigger the error for deprecated functions. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "deprecated_file_included",
        "description": "Fires when a deprecated file is called.",
        "arguments": [
            {
                "type": "string",
                "name": "$file",
                "description": "The file that was called."
            },
            {
                "type": "string",
                "name": "$replacement",
                "description": "The file that should have been included based on ABSPATH."
            },
            {
                "type": "string",
                "name": "$version",
                "description": "The version of WordPress that deprecated the file."
            },
            {
                "type": "string",
                "name": "$message",
                "description": "A message regarding the change."
            }
        ],
        "type": "action"
    },
    {
        "text": "deprecated_file_trigger_error",
        "description": "Filter whether to trigger an error for deprecated files.",
        "arguments": [
            {
                "type": "bool",
                "name": "$trigger",
                "description": "Whether to trigger the error for deprecated files. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "deprecated_argument_run",
        "description": "Fires when a deprecated argument is called.",
        "arguments": [
            {
                "type": "string",
                "name": "$function",
                "description": "The function that was called."
            },
            {
                "type": "string",
                "name": "$message",
                "description": "A message regarding the change."
            },
            {
                "type": "string",
                "name": "$version",
                "description": "The version of WordPress that deprecated the argument used."
            }
        ],
        "type": "action"
    },
    {
        "text": "deprecated_argument_trigger_error",
        "description": "Filter whether to trigger an error for deprecated arguments.",
        "arguments": [
            {
                "type": "bool",
                "name": "$trigger",
                "description": "Whether to trigger the error for deprecated arguments. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "doing_it_wrong_run",
        "description": "Fires when the given function is being used incorrectly.",
        "arguments": [
            {
                "type": "string",
                "name": "$function",
                "description": "The function that was called."
            },
            {
                "type": "string",
                "name": "$message",
                "description": "A message explaining what has been done incorrectly."
            },
            {
                "type": "string",
                "name": "$version",
                "description": "The version of WordPress where the message was added."
            }
        ],
        "type": "action"
    },
    {
        "text": "doing_it_wrong_trigger_error",
        "description": "Filter whether to trigger an error for _doing_it_wrong() calls.",
        "arguments": [
            {
                "type": "bool",
                "name": "$trigger",
                "description": "Whether to trigger the error for _doing_it_wrong() calls. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "iis7_supports_permalinks",
        "description": "Filter whether IIS 7+ supports pretty permalinks.",
        "arguments": [
            {
                "type": "bool",
                "name": "$supports_permalinks",
                "description": "Whether IIS7 supports permalinks. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_main_network_id",
        "description": "Filter the main network ID.",
        "arguments": [
            {
                "type": "int",
                "name": "$main_network_id",
                "description": "The ID of the main network."
            }
        ],
        "type": "filter"
    },
    {
        "text": "global_terms_enabled",
        "description": "Filter whether global terms are enabled.",
        "arguments": [
            {
                "type": "null",
                "name": "$enabled",
                "description": "Whether global terms are enabled."
            }
        ],
        "type": "filter"
    },
    {
        "text": "extra_{$context}_headers",
        "description": "Filter extra file headers by context.",
        "arguments": [
            {
                "type": "array",
                "name": "$extra_context_headers",
                "description": "Empty array by default."
            }
        ],
        "type": "filter"
    },
    {
        "text": "kses_allowed_protocols",
        "description": "Filter the list of protocols allowed in HTML attributes.",
        "arguments": [
            {
                "type": "array",
                "name": "$protocols",
                "description": "Array of allowed protocols e.g. 'http', 'ftp', 'tel', and more."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_checkdate",
        "description": "Filter whether the given date is valid for the Gregorian calendar.",
        "arguments": [
            {
                "type": "bool",
                "name": "$checkdate",
                "description": "Whether the given date is valid."
            },
            {
                "type": "string",
                "name": "$source_date",
                "description": "Date to check."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_auth_check_load",
        "description": "Filter whether to load the authentication check.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show",
                "description": "Whether to load the authentication check."
            },
            {
                "type": "\\WP_Screen",
                "name": "$screen",
                "description": "The current screen object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_auth_check_same_domain",
        "description": "Filter whether the authentication check originated at the same domain.",
        "arguments": [
            {
                "type": "bool",
                "name": "$same_domain",
                "description": "Whether the authentication check originated at the same domain."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_delete_file",
        "description": "Filter the path of the file to delete.",
        "arguments": [
            {
                "type": "string",
                "name": "$medium",
                "description": "Path to the file to delete."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_print_scripts",
        "description": "Fires before scripts in the $handles queue are printed.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_print_styles",
        "description": "Fires before styles in the $handles queue are printed.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "get_header",
        "description": "Fires before the header template file is loaded.",
        "arguments": [
            {
                "type": "string",
                "name": "$name",
                "description": "Name of the specific header file to use."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_footer",
        "description": "Fires before the footer template file is loaded.",
        "arguments": [
            {
                "type": "string",
                "name": "$name",
                "description": "Name of the specific footer file to use."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_sidebar",
        "description": "Fires before the sidebar template file is loaded.",
        "arguments": [
            {
                "type": "string",
                "name": "$name",
                "description": "Name of the specific sidebar file to use."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_template_part_{$slug}",
        "description": "Fires before the specified template part file is loaded.",
        "arguments": [
            {
                "type": "string",
                "name": "$slug",
                "description": "The slug name for the generic template."
            },
            {
                "type": "string",
                "name": "$name",
                "description": "The name of the specialized template."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_get_search_form",
        "description": "Fires before the search form is retrieved, at the start of get_search_form().",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "search_form_format",
        "description": "Filter the HTML format of the search form.",
        "arguments": [
            {
                "type": "string",
                "name": "$format",
                "description": "The type of markup to use in the search form.                       Accepts 'html5', 'xhtml'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_search_form",
        "description": "Filter the HTML output of the search form.",
        "arguments": [
            {
                "type": "string",
                "name": "$form",
                "description": "The search form HTML output."
            }
        ],
        "type": "filter"
    },
    {
        "text": "loginout",
        "description": "Filter the HTML output for the Log In\/Log Out link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The HTML link content."
            }
        ],
        "type": "filter"
    },
    {
        "text": "logout_url",
        "description": "Filter the logout URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$logout_url",
                "description": "The Log Out URL."
            },
            {
                "type": "string",
                "name": "$redirect",
                "description": "Path to redirect to on logout."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_url",
        "description": "Filter the login URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$login_url",
                "description": "The login URL."
            },
            {
                "type": "string",
                "name": "$redirect",
                "description": "The path to redirect to on login, if supplied."
            },
            {
                "type": "bool",
                "name": "$force_reauth",
                "description": "Whether to force reauthorization, even if a cookie is present."
            }
        ],
        "type": "filter"
    },
    {
        "text": "register_url",
        "description": "Filter the user registration URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$register",
                "description": "The user registration URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_form_defaults",
        "description": "Filter the default login form output arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$defaults",
                "description": "An array of default login form arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_form_top",
        "description": "Filter content to display at the top of the login form.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Content to display. Default empty."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Array of login form arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_form_middle",
        "description": "Filter content to display in the middle of the login form.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Content to display. Default empty."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Array of login form arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_form_bottom",
        "description": "Filter content to display at the bottom of the login form.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Content to display. Default empty."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Array of login form arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "lostpassword_url",
        "description": "Filter the Lost Password URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$lostpassword_url",
                "description": "The lost password page URL."
            },
            {
                "type": "string",
                "name": "$redirect",
                "description": "The path to redirect to on login."
            }
        ],
        "type": "filter"
    },
    {
        "text": "register",
        "description": "Filter the HTML link to the Registration or Admin page.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The HTML code for the link to the Registration or Admin page."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_meta",
        "description": "Fires before displaying echoed content in the sidebar.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "bloginfo_url",
        "description": "Filter the URL returned by get_bloginfo().",
        "arguments": [
            {
                "type": "mixed",
                "name": "$output",
                "description": "The URL returned by bloginfo()."
            },
            {
                "type": "mixed",
                "name": "$show",
                "description": "Type of information requested."
            }
        ],
        "type": "filter"
    },
    {
        "text": "bloginfo",
        "description": "Filter the site information returned by get_bloginfo().",
        "arguments": [
            {
                "type": "mixed",
                "name": "$output",
                "description": "The requested non-URL site information."
            },
            {
                "type": "mixed",
                "name": "$show",
                "description": "Type of information requested."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_title_parts",
        "description": "Filter the parts of the page title.",
        "arguments": [
            {
                "type": "array",
                "name": "$title_array",
                "description": "Parts of the page title."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_title",
        "description": "Filter the text of the page title.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Page title."
            },
            {
                "type": "string",
                "name": "$sep",
                "description": "Title separator."
            },
            {
                "type": "string",
                "name": "$seplocation",
                "description": "Location of the separator (left or right)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "single_post_title",
        "description": "Filter the page title for a single post.",
        "arguments": [
            {
                "type": "string",
                "name": "$_post_title",
                "description": "The single post page title."
            },
            {
                "type": "object",
                "name": "$_post",
                "description": "The current queried object as returned by get_queried_object()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_type_archive_title",
        "description": "Filter the post type archive title.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_type_name",
                "description": "Post type 'name' label."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "single_cat_title",
        "description": "Filter the category archive page title.",
        "arguments": [
            {
                "type": "string",
                "name": "$term_name",
                "description": "Category name for archive being displayed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "single_tag_title",
        "description": "Filter the tag archive page title.",
        "arguments": [
            {
                "type": "string",
                "name": "$term_name",
                "description": "Tag name for archive being displayed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "single_term_title",
        "description": "Filter the custom taxonomy archive page title.",
        "arguments": [
            {
                "type": "string",
                "name": "$term_name",
                "description": "Term name for archive being displayed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_archive_title",
        "description": "Filter the archive title.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Archive title to be displayed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_archive_description",
        "description": "Filter the archive description.",
        "arguments": [
            {
                "type": "string",
                "name": "$description",
                "description": "Archive description to be displayed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_archives_link",
        "description": "Filter the archive link content.",
        "arguments": [
            {
                "type": "string",
                "name": "$link_html",
                "description": "The archive HTML link content."
            }
        ],
        "type": "filter"
    },
    {
        "text": "getarchives_where",
        "description": "Filter the SQL WHERE clause for retrieving archives.",
        "arguments": [
            {
                "type": "string",
                "name": "$sql_where",
                "description": "Portion of SQL query containing the WHERE clause."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "An array of default arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "getarchives_join",
        "description": "Filter the SQL JOIN clause for retrieving archives.",
        "arguments": [
            {
                "type": "string",
                "name": "$sql_join",
                "description": "Portion of SQL query containing JOIN clause."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "An array of default arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_date",
        "description": "Filter the date a post was published for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_date",
                "description": "The formatted date string."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "PHP date format. Defaults to 'date_format' option                         if not specified."
            },
            {
                "type": "string",
                "name": "$before",
                "description": "HTML output before the date."
            },
            {
                "type": "string",
                "name": "$after",
                "description": "HTML output after the date."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_date",
        "description": "Filter the date a post was published.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_date",
                "description": "The formatted date."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "PHP date format. Defaults to 'date_format' option                              if not specified."
            },
            {
                "type": "int",
                "name": "$post",
                "description": "The post object or ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_modified_date",
        "description": "Filter the date a post was last modified for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_modified_date",
                "description": "The last modified date."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "PHP date format. Defaults to 'date_format' option                                  if not specified."
            },
            {
                "type": "string",
                "name": "$before",
                "description": "HTML output before the date."
            },
            {
                "type": "string",
                "name": "$after",
                "description": "HTML output after the date."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_modified_date",
        "description": "Filter the date a post was last modified.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_time",
                "description": "The formatted date."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "PHP date format. Defaults to value specified in                         'date_format' option."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_time",
        "description": "Filter the time a post was written for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$get_the_time",
                "description": "The formatted time."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "The time format. Accepts 'G', 'U',                             or php date format."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_time",
        "description": "Filter the time a post was written.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_time",
                "description": "The formatted time."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "Format to use for retrieving the time the post was written.                              Accepts 'G', 'U', or php date format value specified                              in 'time_format' option. Default empty."
            },
            {
                "type": "int",
                "name": "$post",
                "description": "WP_Post object or ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_post_time",
        "description": "Filter the localized time a post was written.",
        "arguments": [
            {
                "type": "string",
                "name": "$time",
                "description": "The formatted time."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "Format to use for retrieving the time the post was written.                     Accepts 'G', 'U', or php date format. Default 'U'."
            },
            {
                "type": "bool",
                "name": "$gmt",
                "description": "Whether to retrieve the GMT time. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_modified_time",
        "description": "Filter the localized time a post was last modified, for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$get_the_modified_time",
                "description": "The formatted time."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "The time format. Accepts 'G', 'U',                                      or php date format. Defaults to value                                      specified in 'time_format' option."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_modified_time",
        "description": "Filter the localized time a post was last modified.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_time",
                "description": "The formatted time."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "Format to use for retrieving the time the post was                         written. Accepts 'G', 'U', or php date format. Defaults                         to value specified in 'time_format' option."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_post_modified_time",
        "description": "Filter the localized time a post was last modified.",
        "arguments": [
            {
                "type": "string",
                "name": "$time",
                "description": "The formatted time."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "The date format. Accepts 'G', 'U', or php date format. Default 'U'."
            },
            {
                "type": "bool",
                "name": "$gmt",
                "description": "Whether to return the GMT time. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_weekday",
        "description": "Filter the weekday on which the post was written, for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_weekday",
                "description": ""
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_weekday_date",
        "description": "Filter the localized date on which the post was written, for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_weekday_date",
                "description": ""
            },
            {
                "type": "string",
                "name": "$before",
                "description": "The HTML to output before the date."
            },
            {
                "type": "string",
                "name": "$after",
                "description": "The HTML to output after the date."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_head",
        "description": "Print scripts or data in the head tag on the front end.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_footer",
        "description": "Print scripts or data before the closing body tag on the front end.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "site_icon_meta_tags",
        "description": "Filter the site icon meta tags, so Plugins can add their own.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta_tags",
                "description": "Site Icon meta elements."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_can_richedit",
        "description": "Filter whether the user can access the rich (Visual) editor.",
        "arguments": [
            {
                "type": "bool",
                "name": "$wp_rich_edit",
                "description": "Whether the user can access to the rich (Visual) editor."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_default_editor",
        "description": "Filter which editor should be displayed by default.",
        "arguments": [
            {
                "type": "array",
                "name": "$r",
                "description": "An array of editors. Accepts 'tinymce', 'html', 'test'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_search_query",
        "description": "Filter the contents of the search query variable.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$search",
                "description": "Contents of the search query variable."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_search_query",
        "description": "Filter the contents of the search query variable for display.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$search",
                "description": "Contents of the search query variable."
            }
        ],
        "type": "filter"
    },
    {
        "text": "language_attributes",
        "description": "Filter the language attributes for display in the html tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "A space-separated list of language attributes."
            },
            {
                "type": "string",
                "name": "$doctype",
                "description": "The type of html document (xhtml|html)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "paginate_links",
        "description": "Filter the paginated links for the given archive pages.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The paginated link URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_admin_css_uri",
        "description": "Filter the URI of a WordPress admin CSS file.",
        "arguments": [
            {
                "type": "string",
                "name": "$_file",
                "description": "Relative path to the file with query arguments attached."
            },
            {
                "type": "string",
                "name": "$file",
                "description": "Relative path to the file, minus its \".css\" extension."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_admin_css",
        "description": "Filter the stylesheet link to the specified CSS file.",
        "arguments": [
            {
                "type": "string",
                "name": "$file",
                "description": "Style handle name or filename (without \".css\" extension)                     relative to wp-admin\/. Defaults to 'wp-admin'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_generator_type",
        "description": "Filter the output of the XHTML generator tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$generator_type",
                "description": "The XHTML generator."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_generator",
        "description": "Filter the output of the XHTML generator tag for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$generator_type",
                "description": "The generator output."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The type of generator to output. Accepts 'html',                               'xhtml', 'atom', 'rss2', 'rdf', 'comment', 'export'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_generator_{$type}",
        "description": "Filter the HTML for the retrieved generator type.",
        "arguments": [
            {
                "type": "string",
                "name": "$gen",
                "description": "The HTML markup output to {@see wp_head()}."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The type of generator. Accepts 'html', 'xhtml', 'atom',                     'rss2', 'rdf', 'comment', 'export'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_origin",
        "description": "Change the origin of an HTTP request.",
        "arguments": [
            {
                "type": "string",
                "name": "$origin",
                "description": "The original origin for the request."
            }
        ],
        "type": "filter"
    },
    {
        "text": "allowed_http_origins",
        "description": "Change the origin types allowed for HTTP requests.",
        "arguments": [
            {
                "type": "array",
                "name": "$allowed_origins",
                "description": "{     Default allowed HTTP origins.     @type string Non-secure URL for admin origin.     @type string Secure URL for admin origin.     @type string Non-secure URL for home origin.     @type string Secure URL for home origin. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "allowed_http_origin",
        "description": "Change the allowed HTTP origin result.",
        "arguments": [
            {
                "type": "string",
                "name": "$origin",
                "description": "Result of check for allowed origin."
            },
            {
                "type": "string",
                "name": "$origin_arg",
                "description": "Original origin string passed into is_allowed_http_origin function."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_request_host_is_external",
        "description": "Check if HTTP request is external or not.",
        "arguments": [
            {
                "type": "bool",
                "name": "",
                "description": "false Whether HTTP request is external or not."
            },
            {
                "type": "string",
                "name": "$host",
                "description": "IP of the requested host."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "URL of the requested host."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_kses_allowed_html",
        "description": "Filter HTML elements allowed for a given context.",
        "arguments": [
            {
                "type": "string",
                "name": "$tags",
                "description": "Allowed tags, attributes, and\/or entities."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context to judge allowed tags by. Allowed values are 'post',                        'data', 'strip', 'entities', 'explicit', or the name of a filter."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_kses",
        "description": "Filter content to be run through kses.",
        "arguments": [
            {
                "type": "string",
                "name": "$string",
                "description": "Content to run through kses."
            },
            {
                "type": "array",
                "name": "$allowed_html",
                "description": "Allowed HTML elements."
            },
            {
                "type": "array",
                "name": "$allowed_protocols",
                "description": "Allowed protocol in links."
            }
        ],
        "type": "filter"
    },
    {
        "text": "safe_style_css",
        "description": "Filter list of allowed CSS attributes.",
        "arguments": [
            {
                "type": "array",
                "name": "$attr",
                "description": "List of allowed CSS attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "locale",
        "description": "Filter WordPress install's locale ID.",
        "arguments": [
            {
                "type": "string",
                "name": "$locale",
                "description": "The locale ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "gettext",
        "description": "Filter text with its translation.",
        "arguments": [
            {
                "type": "string",
                "name": "$translations",
                "description": "Translated text."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Text to translate."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "gettext_with_context",
        "description": "Filter text with its translation based on context information.",
        "arguments": [
            {
                "type": "string",
                "name": "$translations",
                "description": "Translated text."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Text to translate."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context information for the translators."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ngettext",
        "description": "Filter text with its translation when plural option is available.",
        "arguments": [
            {
                "type": "string",
                "name": "$translation",
                "description": "Translated text."
            },
            {
                "type": "string",
                "name": "$single",
                "description": "The text that will be used if $number is 1."
            },
            {
                "type": "string",
                "name": "$plural",
                "description": "The text that will be used if $number is not 1."
            },
            {
                "type": "string",
                "name": "$number",
                "description": "The number to compare against to use either $single or $plural."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ngettext_with_context",
        "description": "Filter text with its translation while plural option and context are available.",
        "arguments": [
            {
                "type": "string",
                "name": "$translation",
                "description": "Translated text."
            },
            {
                "type": "string",
                "name": "$single",
                "description": "The text that will be used if $number is 1."
            },
            {
                "type": "string",
                "name": "$plural",
                "description": "The text that will be used if $number is not 1."
            },
            {
                "type": "string",
                "name": "$number",
                "description": "The number to compare against to use either $single or $plural."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context information for the translators."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "override_load_textdomain",
        "description": "Filter text domain and\/or MO file path for loading translations.",
        "arguments": [
            {
                "type": "bool",
                "name": "$override",
                "description": "Whether to override the text domain. Default false."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            },
            {
                "type": "string",
                "name": "$mofile",
                "description": "Path to the MO file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_textdomain",
        "description": "Fires before the MO translation file is loaded.",
        "arguments": [
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            },
            {
                "type": "string",
                "name": "$mofile",
                "description": "Path to the .mo file."
            }
        ],
        "type": "action"
    },
    {
        "text": "load_textdomain_mofile",
        "description": "Filter MO file path for loading translations for a specific text domain.",
        "arguments": [
            {
                "type": "string",
                "name": "$mofile",
                "description": "Path to the MO file."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "override_unload_textdomain",
        "description": "Filter the text domain for loading translation.",
        "arguments": [
            {
                "type": "bool",
                "name": "$override",
                "description": "Whether to override unloading the text domain. Default false."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "unload_textdomain",
        "description": "Fires before the text domain is unloaded.",
        "arguments": [
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "action"
    },
    {
        "text": "plugin_locale",
        "description": "Filter a plugin's locale.",
        "arguments": [
            {
                "type": "string",
                "name": "$locale",
                "description": "The plugin's current locale."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_locale",
        "description": "Filter a theme's locale.",
        "arguments": [
            {
                "type": "string",
                "name": "$locale",
                "description": "The theme's current locale."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_trailingslashit",
        "description": "Filter the trailing slashed string, depending on whether the site is set to use training slashes.",
        "arguments": [
            {
                "type": "string",
                "name": "$string",
                "description": "URL with or without a trailing slash."
            },
            {
                "type": "string",
                "name": "$type_of_url",
                "description": "The type of URL being considered. Accepts 'single', 'single_trackback',                            'single_feed', 'single_paged', 'feed', 'category', 'page', 'year',                            'month', 'day', 'paged', 'post_type_archive'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_post_link",
        "description": "Filter the permalink structure for a post before token replacement occurs.",
        "arguments": [
            {
                "type": "string",
                "name": "$permalink",
                "description": "The site's permalink structure."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post in question."
            },
            {
                "type": "bool",
                "name": "$leavename",
                "description": "Whether to keep the post name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_link_category",
        "description": "Filter the category that gets used in the %category% permalink token.",
        "arguments": [
            {
                "type": "\\stdClass",
                "name": "$cat",
                "description": "The category to use in the permalink."
            },
            {
                "type": "array",
                "name": "$cats",
                "description": "Array of all categories associated with the post."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post in question."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_link",
        "description": "Filter the permalink for a post.",
        "arguments": [
            {
                "type": "string",
                "name": "$permalink",
                "description": "The post's permalink."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post in question."
            },
            {
                "type": "bool",
                "name": "$leavename",
                "description": "Whether to keep the post name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_type_link",
        "description": "Filter the permalink for a post with a custom post type.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_link",
                "description": "The post's permalink."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post in question."
            },
            {
                "type": "bool",
                "name": "$leavename",
                "description": "Whether to keep the post name."
            },
            {
                "type": "bool",
                "name": "$sample",
                "description": "Is it a sample permalink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "page_link",
        "description": "Filter the permalink for a page.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The page's permalink."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The ID of the page."
            },
            {
                "type": "bool",
                "name": "$sample",
                "description": "Is it a sample permalink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "_get_page_link",
        "description": "Filter the permalink for a non-page_on_front page.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The page's permalink."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The ID of the page."
            }
        ],
        "type": "filter"
    },
    {
        "text": "attachment_link",
        "description": "Filter the permalink for an attachment.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The attachment's permalink."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "year_link",
        "description": "Filter the year archive permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$yearlink",
                "description": "Permalink for the year archive."
            },
            {
                "type": "int",
                "name": "$year",
                "description": "Year for the archive."
            }
        ],
        "type": "filter"
    },
    {
        "text": "month_link",
        "description": "Filter the month archive permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$monthlink",
                "description": "Permalink for the month archive."
            },
            {
                "type": "int",
                "name": "$year",
                "description": "Year for the archive."
            },
            {
                "type": "int",
                "name": "$month",
                "description": "The month for the archive."
            }
        ],
        "type": "filter"
    },
    {
        "text": "day_link",
        "description": "Filter the day archive permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$daylink",
                "description": "Permalink for the day archive."
            },
            {
                "type": "int",
                "name": "$year",
                "description": "Year for the archive."
            },
            {
                "type": "int",
                "name": "$month",
                "description": "Month for the archive."
            },
            {
                "type": "int",
                "name": "$day",
                "description": "The day for the archive."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_feed_link",
        "description": "Filter the feed link anchor tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The complete anchor tag for a feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "The feed type, or an empty string for the                     default feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "feed_link",
        "description": "Filter the feed type permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The feed permalink."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_comments_feed_link",
        "description": "Filter the post comments feed permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "Post comments feed permalink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_comments_feed_link_html",
        "description": "Filter the post comment feed link anchor tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The complete anchor tag for the comment feed link."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "The feed type, or an empty string for the default feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "author_feed_link",
        "description": "Filter the feed link for a given author.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The author feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "category_feed_link",
        "description": "Filter the category feed link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The category feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "tag_feed_link",
        "description": "Filter the post tag feed link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The tag feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "taxonomy_feed_link",
        "description": "Filter the feed link for a taxonomy other than 'category' or 'post_tag'.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The taxonomy feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "The taxonomy name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_edit_tag_link",
        "description": "Filter the edit link for a tag (or term in another taxonomy).",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The term edit link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_tag_link",
        "description": "Filter the anchor tag for the edit link for a tag (or term in another taxonomy).",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The anchor tag for the edit link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_edit_term_link",
        "description": "Filter the edit link for a term.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The edit link."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy name."
            },
            {
                "type": "string",
                "name": "$object_type",
                "description": "The object type (eg. the post type)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_term_link",
        "description": "Filter the anchor tag for the edit link of a term.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The anchor tag for the edit link."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "search_link",
        "description": "Filter the search permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "Search permalink."
            },
            {
                "type": "string",
                "name": "$search",
                "description": "The URL-encoded search term."
            }
        ],
        "type": "filter"
    },
    {
        "text": "search_feed_link",
        "description": "Filter the search feed link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "Search feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The search type. One of 'posts' or 'comments'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_type_archive_link",
        "description": "Filter the post type archive permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The post type archive permalink."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_type_archive_feed_link",
        "description": "Filter the post type archive feed link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The post type archive feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_edit_post_link",
        "description": "Filter the post edit link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The edit link."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The link context. If set to 'display' then ampersands                        are encoded."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_post_link",
        "description": "Filter the post edit link anchor tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "Anchor tag for the edit link."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Anchor text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_delete_post_link",
        "description": "Filter the post delete link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The delete link."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "bool",
                "name": "$force_delete",
                "description": "Whether to bypass the trash and force deletion. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_edit_comment_link",
        "description": "Filter the comment edit link.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The edit link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_comment_link",
        "description": "Filter the comment edit link anchor tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "Anchor tag for the edit link."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Anchor text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_edit_bookmark_link",
        "description": "Filter the bookmark (link) edit link.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The edit link."
            },
            {
                "type": "int",
                "name": "$link_id",
                "description": "Bookmark ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_bookmark_link",
        "description": "Filter the bookmark edit link anchor tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "Anchor tag for the edit link."
            },
            {
                "type": "int",
                "name": "$link_id",
                "description": "Bookmark ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_edit_user_link",
        "description": "Filter the user edit link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The edit link."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_{$adjacent}_post_join",
        "description": "Filter the JOIN clause in the SQL for an adjacent post query.",
        "arguments": [
            {
                "type": "string",
                "name": "$join",
                "description": "The JOIN clause in the SQL."
            },
            {
                "type": "bool",
                "name": "$in_same_term",
                "description": "Whether post should be in a same taxonomy term."
            },
            {
                "type": "array",
                "name": "$excluded_terms",
                "description": "Array of excluded term IDs."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_{$adjacent}_post_where",
        "description": "Filter the WHERE clause in the SQL for an adjacent post query.",
        "arguments": [
            {
                "type": "string",
                "name": "$where",
                "description": "The <code>WHERE<\/code> clause in the SQL."
            },
            {
                "type": "bool",
                "name": "$in_same_term",
                "description": "Whether post should be in a same taxonomy term."
            },
            {
                "type": "array",
                "name": "$excluded_terms",
                "description": "Array of excluded term IDs."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_{$adjacent}_post_sort",
        "description": "Filter the ORDER BY clause in the SQL for an adjacent post query.",
        "arguments": [
            {
                "type": "string",
                "name": "$order_by",
                "description": "The <code>ORDER BY<\/code> clause in the SQL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$adjacent}_post_rel_link",
        "description": "Filter the adjacent post relational link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The relational link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$adjacent}_post_link",
        "description": "Filter the adjacent post link.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The adjacent post link."
            },
            {
                "type": "string",
                "name": "$format",
                "description": "Link anchor format."
            },
            {
                "type": "string",
                "name": "$link",
                "description": "Link permalink format."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The adjacent post."
            },
            {
                "type": "string",
                "name": "$adjacent",
                "description": "Whether the post is previous or next."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_pagenum_link",
        "description": "Filter the page number link for the current request.",
        "arguments": [
            {
                "type": "string",
                "name": "$result",
                "description": "The page number link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "next_posts_link_attributes",
        "description": "Filter the anchor tag attributes for the next posts page link.",
        "arguments": [
            {
                "type": "string",
                "name": "$attributes",
                "description": "Attributes for the anchor tag."
            }
        ],
        "type": "filter"
    },
    {
        "text": "previous_posts_link_attributes",
        "description": "Filter the anchor tag attributes for the previous posts page link.",
        "arguments": [
            {
                "type": "string",
                "name": "$attributes",
                "description": "Attributes for the anchor tag."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comments_pagenum_link",
        "description": "Filter the comments page number link for the current request.",
        "arguments": [
            {
                "type": "string",
                "name": "$result",
                "description": "The comments page number link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "next_comments_link_attributes",
        "description": "Filter the anchor tag attributes for the next comments page link.",
        "arguments": [
            {
                "type": "string",
                "name": "$attributes",
                "description": "Attributes for the anchor tag."
            }
        ],
        "type": "filter"
    },
    {
        "text": "previous_comments_link_attributes",
        "description": "Filter the anchor tag attributes for the previous comments page link.",
        "arguments": [
            {
                "type": "string",
                "name": "$attributes",
                "description": "Attributes for the anchor tag."
            }
        ],
        "type": "filter"
    },
    {
        "text": "shortcut_link",
        "description": "Filter the Press This bookmarklet link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The Press This bookmarklet link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "home_url",
        "description": "Filter the home URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete home URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the home URL. Blank string if no path is specified."
            },
            {
                "type": "string",
                "name": "$orig_scheme",
                "description": "Scheme to give the home URL context. Accepts 'http', 'https', 'relative' or null."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID, or null for the current blog."
            }
        ],
        "type": "filter"
    },
    {
        "text": "site_url",
        "description": "Filter the site URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete site URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the site URL. Blank string if no path is specified."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Scheme to give the site URL context. Accepts 'http', 'https', 'login',                             'login_post', 'admin', 'relative' or null."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID, or null for the current blog."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_url",
        "description": "Filter the admin area URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete admin area URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the admin area URL. Blank string if no path is specified."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID, or null for the current blog."
            }
        ],
        "type": "filter"
    },
    {
        "text": "includes_url",
        "description": "Filter the URL to the includes directory.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL to the includes directory including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the URL to the wp-includes directory. Blank string                     if no path is specified."
            }
        ],
        "type": "filter"
    },
    {
        "text": "content_url",
        "description": "Filter the URL to the content directory.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL to the content directory including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the URL to the content directory. Blank string                     if no path is specified."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugins_url",
        "description": "Filter the URL to the plugins directory.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL to the plugins directory including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the URL to the plugins directory. Blank string                       if no path is specified."
            },
            {
                "type": "string",
                "name": "$plugin",
                "description": "The plugin file path to be relative to. Blank string if no plugin                       is specified."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_site_url",
        "description": "Filter the network site URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete network site URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the network site URL. Blank string if                            no path is specified."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Scheme to give the URL context. Accepts 'http', 'https',                            'relative' or null."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_home_url",
        "description": "Filter the network home URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete network home URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the network home URL. Blank string                                 if no path is specified."
            },
            {
                "type": "string",
                "name": "$orig_scheme",
                "description": "Scheme to give the URL context. Accepts 'http', 'https',                                 'relative' or null."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_admin_url",
        "description": "Filter the network admin URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete network admin URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the network admin URL. Blank string if                     no path is specified."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_admin_url",
        "description": "Filter the user admin URL for the current user.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the URL. Blank string if                     no path is specified."
            }
        ],
        "type": "filter"
    },
    {
        "text": "set_url_scheme",
        "description": "Filter the resulting URL after setting the scheme.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Scheme applied to the URL. One of 'http', 'https', or 'relative'."
            },
            {
                "type": "string",
                "name": "$orig_scheme",
                "description": "Scheme requested for the URL. One of 'http', 'https', 'login',                            'login_post', 'admin', 'rpc', or 'relative'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_dashboard_url",
        "description": "Filter the dashboard URL for a user.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL including scheme and path."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the URL. Blank string if no path is specified."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Scheme to give the URL context. Accepts 'http', 'https', 'login',                        'login_post', 'admin', 'relative' or null."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_profile_url",
        "description": "Filter the URL for a user's profile editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL including scheme and path."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Scheme to give the URL context. Accepts 'http', 'https', 'login',                        'login_post', 'admin', 'relative' or null."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_shortlink",
        "description": "Filter whether to preempt generating a shortlink for the given post.",
        "arguments": [
            {
                "type": "bool",
                "name": "$return",
                "description": "Short-circuit return value. Either false or a URL string."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Post ID, or 0 for the current post."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The context for the link. One of 'post' or 'query',"
            },
            {
                "type": "bool",
                "name": "$allow_slugs",
                "description": "Whether to allow post slugs in the shortlink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_shortlink",
        "description": "Filter the shortlink for a post.",
        "arguments": [
            {
                "type": "string",
                "name": "$shortlink",
                "description": "Shortlink URL."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Post ID, or 0 for the current post."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The context for the link. One of 'post' or 'query',"
            },
            {
                "type": "bool",
                "name": "$allow_slugs",
                "description": "Whether to allow post slugs in the shortlink. Not used by default."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_shortlink",
        "description": "Filter the shortlink anchor tag for a post.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "Shortlink anchor tag."
            },
            {
                "type": "string",
                "name": "$shortlink",
                "description": "Shortlink URL."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Shortlink's text."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Shortlink's title attribute."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_avatar_data",
        "description": "Filter whether to retrieve the avatar URL early.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to get_avatar_data(), after processing."
            },
            {
                "type": "int",
                "name": "$id_or_email",
                "description": "A user ID, email address, or comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_avatar_comment_types",
        "description": "Filter the list of allowed comment types for retrieving avatars.",
        "arguments": [
            {
                "type": "array",
                "name": "$types",
                "description": "An array of content types. Default only contains 'comment'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_avatar_url",
        "description": "Filter the avatar URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The URL of the avatar."
            },
            {
                "type": "int",
                "name": "$id_or_email",
                "description": "A user ID, email address, or comment object."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to get_avatar_data(), after processing."
            }
        ],
        "type": "filter"
    },
    {
        "text": "shutdown",
        "description": "Fires just before PHP shuts down execution.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "print_media_templates",
        "description": "Fires when the custom Backbone media templates are printed.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "editor_max_image_size",
        "description": "Filter the maximum image size dimensions for the editor.",
        "arguments": [
            {
                "type": "array",
                "name": "$max_image_size",
                "description": "An array with the width as the first element,                                     and the height as the second element."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Size of what the result image should be."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The context the image is being resized for.                                     Possible values are 'display' (like in a theme)                                     or 'edit' (like inserting into an editor)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_downsize",
        "description": "Filter whether to preempt the output of image_downsize().",
        "arguments": [
            {
                "type": "bool",
                "name": "$downsize",
                "description": "Whether to short-circuit the image downsize. Default false."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Attachment ID for image."
            },
            {
                "type": "array",
                "name": "$size",
                "description": "Size of image, either array or string. Default 'medium'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_image_tag_class",
        "description": "Filter the value of the attachment's image tag class attribute.",
        "arguments": [
            {
                "type": "string",
                "name": "$class",
                "description": "CSS class name or space-separated list of classes."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Attachment ID."
            },
            {
                "type": "string",
                "name": "$align",
                "description": "Part of the class name for aligning the image."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Optional. Default is 'medium'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_image_tag",
        "description": "Filter the HTML content for the image tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "HTML content for the image."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Attachment ID."
            },
            {
                "type": "string",
                "name": "$alt",
                "description": "Alternate text."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Attachment title."
            },
            {
                "type": "string",
                "name": "$align",
                "description": "Part of the class name for aligning the image."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Optional. Default is 'medium'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_constrain_dimensions",
        "description": "Filter dimensions to constrain down-sampled images to.",
        "arguments": [
            {
                "type": "array",
                "name": "$dimensions",
                "description": "The image width and height."
            },
            {
                "type": "int",
                "name": "$current_width",
                "description": "The current width of the image."
            },
            {
                "type": "int",
                "name": "$current_height",
                "description": "The current height of the image."
            },
            {
                "type": "int",
                "name": "$max_width",
                "description": "The maximum width permitted."
            },
            {
                "type": "int",
                "name": "$max_height",
                "description": "The maximum height permitted."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_resize_dimensions",
        "description": "Filter whether to preempt calculating the image resize dimensions.",
        "arguments": [
            {
                "type": "null",
                "name": "$null",
                "description": "Whether to preempt output of the resize dimensions."
            },
            {
                "type": "int",
                "name": "$orig_w",
                "description": "Original width in pixels."
            },
            {
                "type": "int",
                "name": "$orig_h",
                "description": "Original height in pixels."
            },
            {
                "type": "int",
                "name": "$dest_w",
                "description": "New width in pixels."
            },
            {
                "type": "int",
                "name": "$dest_h",
                "description": "New height in pixels."
            },
            {
                "type": "bool",
                "name": "$crop",
                "description": "Whether to crop image to specified height and width or resize.                           An array can specify positioning of the crop area. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "intermediate_image_sizes",
        "description": "Filter the list of intermediate image sizes.",
        "arguments": [
            {
                "type": "array",
                "name": "$image_sizes",
                "description": "An array of intermediate image sizes. Defaults                           are 'thumbnail', 'medium', 'large'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_image_src",
        "description": "Filter the image src result.",
        "arguments": [
            {
                "type": "array",
                "name": "$image",
                "description": "Either array with src, width &amp; height, icon src, or false."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Image attachment ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Registered image size to retrieve the source for or a flat                                    array of height and width dimensions. Default 'thumbnail'."
            },
            {
                "type": "bool",
                "name": "$icon",
                "description": "Whether the image should be treated as an icon. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_image_attributes",
        "description": "Filter the list of attachment image attributes.",
        "arguments": [
            {
                "type": "array",
                "name": "$attr",
                "description": "Attributes for the image markup."
            },
            {
                "type": "\\WP_Post",
                "name": "$attachment",
                "description": "Image attachment post."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Requested size."
            }
        ],
        "type": "filter"
    },
    {
        "text": "img_caption_shortcode",
        "description": "Filter the default caption shortcode output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The caption output. Default empty."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "Attributes of the caption shortcode."
            },
            {
                "type": "string",
                "name": "$content",
                "description": "The image element, possibly wrapped in a hyperlink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "img_caption_shortcode_width",
        "description": "Filter the width of an image's caption.",
        "arguments": [
            {
                "type": "int",
                "name": "$caption_width",
                "description": "Width of the caption in pixels. To remove this inline style,                              return zero."
            },
            {
                "type": "array",
                "name": "$atts",
                "description": "Attributes of the caption shortcode."
            },
            {
                "type": "string",
                "name": "$content",
                "description": "The image element, possibly wrapped in a hyperlink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_gallery",
        "description": "Filter the default gallery shortcode output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The gallery output. Default empty."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "Attributes of the gallery shortcode."
            },
            {
                "type": "int",
                "name": "$instance",
                "description": "Unique numeric ID of this gallery shortcode instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "use_default_gallery_style",
        "description": "Filter whether to print default gallery styles.",
        "arguments": [
            {
                "type": "bool",
                "name": "$print",
                "description": "Whether to print default gallery styles.                    Defaults to false if the theme supports HTML5 galleries.                    Otherwise, defaults to true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "gallery_style",
        "description": "Filter the default gallery shortcode CSS styles.",
        "arguments": [
            {
                "type": "string",
                "name": "$gallery_style",
                "description": "Default CSS styles and opening HTML div container                              for the gallery shortcode output."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_playlist",
        "description": "Filter the playlist output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Playlist output. Default empty."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "An array of shortcode attributes."
            },
            {
                "type": "int",
                "name": "$instance",
                "description": "Unique numeric ID of this playlist shortcode instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_playlist_scripts",
        "description": "Print and enqueue playlist scripts, styles, and JavaScript templates.",
        "arguments": [
            {
                "type": "string",
                "name": "$type",
                "description": "Type of playlist. Possible values are 'audio' or 'video'."
            },
            {
                "type": "string",
                "name": "$style",
                "description": "The 'theme' for the playlist. Core provides 'light' and 'dark'."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_mediaelement_fallback",
        "description": "Filter the Mediaelement fallback output for no-JS.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Fallback output for no-JS."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "Media file URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_audio_extensions",
        "description": "Filter the list of supported audio formats.",
        "arguments": [
            {
                "type": "array",
                "name": "$extensions",
                "description": "An array of support audio formats. Defaults are                          'mp3', 'ogg', 'wma', 'm4a', 'wav'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_id3_keys",
        "description": "Filter the editable list of keys to look up data from an attachment's metadata.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "Key\/value pairs of field keys to labels."
            },
            {
                "type": "\\WP_Post",
                "name": "$attachment",
                "description": "Attachment object."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The context. Accepts 'edit', 'display'. Default 'display'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_audio_shortcode_override",
        "description": "Filter the default audio shortcode output.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "Empty variable to be replaced with shortcode markup."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "Attributes of the shortcode. @see wp_audio_shortcode()"
            },
            {
                "type": "string",
                "name": "$content",
                "description": "Shortcode content."
            },
            {
                "type": "int",
                "name": "$instance",
                "description": "Unique numeric ID of this audio shortcode instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_audio_shortcode_library",
        "description": "Filter the media library used for the audio shortcode.",
        "arguments": [
            {
                "type": "string",
                "name": "$library",
                "description": "Media library used for the audio shortcode."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_audio_shortcode_class",
        "description": "Filter the class attribute for the audio shortcode output container.",
        "arguments": [
            {
                "type": "string",
                "name": "$class",
                "description": "CSS class or list of space-separated classes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_audio_shortcode",
        "description": "Filter the audio shortcode output.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "Audio shortcode HTML output."
            },
            {
                "type": "array",
                "name": "$atts",
                "description": "Array of audio shortcode attributes."
            },
            {
                "type": "string",
                "name": "$audio",
                "description": "Audio file."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$library",
                "description": "Media library used for the audio shortcode."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_video_extensions",
        "description": "Filter the list of supported video formats.",
        "arguments": [
            {
                "type": "array",
                "name": "$extensions",
                "description": "An array of support video formats. Defaults are                          'mp4', 'm4v', 'webm', 'ogv', 'wmv', 'flv'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_video_shortcode_override",
        "description": "Filter the default video shortcode output.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "Empty variable to be replaced with shortcode markup."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "Attributes of the video shortcode."
            },
            {
                "type": "string",
                "name": "$content",
                "description": "Video shortcode content."
            },
            {
                "type": "int",
                "name": "$instance",
                "description": "Unique numeric ID of this video shortcode instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_video_shortcode_library",
        "description": "Filter the media library used for the video shortcode.",
        "arguments": [
            {
                "type": "string",
                "name": "$library",
                "description": "Media library used for the video shortcode."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_video_shortcode_class",
        "description": "Filter the class attribute for the video shortcode output container.",
        "arguments": [
            {
                "type": "string",
                "name": "$class",
                "description": "CSS class or list of space-separated classes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_video_shortcode",
        "description": "Filter the output of the video shortcode.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Video shortcode HTML output."
            },
            {
                "type": "array",
                "name": "$atts",
                "description": "Array of video shortcode attributes."
            },
            {
                "type": "string",
                "name": "$video",
                "description": "Video file."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$library",
                "description": "Media library used for the video shortcode."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$adjacent}_image_link",
        "description": "Filter the adjacent image link.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Adjacent image HTML markup."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Attachment ID"
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Image size."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Link text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_defaults",
        "description": "Filter the default array of embed dimensions.",
        "arguments": [
            {
                "type": "int",
                "name": "$width",
                "description": "Width of the embed in pixels."
            },
            {
                "type": "int",
                "name": "$height",
                "description": "Height of the embed in pixels."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The URL that should be embedded."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_default_embeds",
        "description": "Filter whether to load the default embed handlers.",
        "arguments": [
            {
                "type": "bool",
                "name": "$maybe_load_embeds",
                "description": "Whether to load the embeds library. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_audio_embed_handler",
        "description": "Filter the audio embed handler callback.",
        "arguments": [
            {
                "type": "callback",
                "name": "$handler",
                "description": "Audio embed handler callback function."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_video_embed_handler",
        "description": "Filter the video embed handler callback.",
        "arguments": [
            {
                "type": "callback",
                "name": "$handler",
                "description": "Video embed handler callback function."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_googlevideo",
        "description": "Filter the Google Video embed output.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "Google Video HTML embed markup."
            },
            {
                "type": "array",
                "name": "$matches",
                "description": "The RegEx matches from the provided regex."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "An array of embed attributes."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The original URL that was matched by the regex."
            },
            {
                "type": "array",
                "name": "$rawattr",
                "description": "The original unmodified attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_embed_handler_youtube",
        "description": "Filter the YoutTube embed output.",
        "arguments": [
            {
                "type": "string",
                "name": "$embed",
                "description": "YouTube embed output."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "An array of embed attributes."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The original URL that was matched by the regex."
            },
            {
                "type": "array",
                "name": "$rawattr",
                "description": "The original unmodified attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_embed_handler_audio",
        "description": "Filter the audio embed output.",
        "arguments": [
            {
                "type": "string",
                "name": "$audio",
                "description": "Audio embed output."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "An array of embed attributes."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The original URL that was matched by the regex."
            },
            {
                "type": "array",
                "name": "$rawattr",
                "description": "The original unmodified attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_embed_handler_video",
        "description": "Filter the video embed output.",
        "arguments": [
            {
                "type": "string",
                "name": "$video",
                "description": "Video embed output."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "An array of embed attributes."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The original URL that was matched by the regex."
            },
            {
                "type": "array",
                "name": "$rawattr",
                "description": "The original unmodified attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upload_size_limit",
        "description": "Filter the maximum upload size allowed in php.ini.",
        "arguments": [
            {
                "type": "int",
                "name": "$size",
                "description": "Max upload size limit in bytes."
            },
            {
                "type": "int",
                "name": "$u_bytes",
                "description": "Maximum upload filesize in bytes."
            },
            {
                "type": "int",
                "name": "$p_bytes",
                "description": "Maximum size of POST data in bytes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_image_editors",
        "description": "Filter the list of image editing library classes.",
        "arguments": [
            {
                "type": "array",
                "name": "$image_editors",
                "description": "List of available image editors. Defaults are                             'WP_Image_Editor_Imagick', 'WP_Image_Editor_GD'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plupload_default_settings",
        "description": "Filter the Plupload default settings.",
        "arguments": [
            {
                "type": "array",
                "name": "$defaults",
                "description": "Default Plupload settings array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plupload_default_params",
        "description": "Filter the Plupload default parameters.",
        "arguments": [
            {
                "type": "array",
                "name": "$params",
                "description": "Default Plupload parameters array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_prepare_attachment_for_js",
        "description": "Filter the attachment data prepared for JavaScript.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "Array of prepared attachment data."
            },
            {
                "type": "int",
                "name": "$attachment",
                "description": "Attachment ID or object."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Array of attachment meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_view_settings",
        "description": "Filter the media view settings.",
        "arguments": [
            {
                "type": "array",
                "name": "$settings",
                "description": "List of media view settings."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_view_strings",
        "description": "Filter the media view strings.",
        "arguments": [
            {
                "type": "array",
                "name": "$strings",
                "description": "List of media view strings."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_enqueue_media",
        "description": "Fires at the conclusion of wp_enqueue_media().",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "get_attached_media_args",
        "description": "Filter arguments used to retrieve media attached to the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Post query arguments."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Mime type of the desired media."
            },
            {
                "type": "mixed",
                "name": "$post",
                "description": "Post ID or object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_attached_media",
        "description": "Filter the list of media attached to the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$children",
                "description": "Associative array of media attached to the given post."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Mime type of the media desired."
            },
            {
                "type": "mixed",
                "name": "$post",
                "description": "Post ID or object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_embedded_in_content_allowed_types",
        "description": "Filter the embedded media types that are allowed to be returned from the content blob.",
        "arguments": [
            {
                "type": "array",
                "name": "$allowed_media_types",
                "description": "An array of allowed media types. Default media types are                                   'audio', 'video', 'object', 'embed', and 'iframe'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_post_galleries",
        "description": "Filter the list of all found galleries in the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$galleries",
                "description": "Associative array of all found post galleries."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_post_gallery",
        "description": "Filter the first-found post gallery.",
        "arguments": [
            {
                "type": "array",
                "name": "$gallery",
                "description": "The first-found post gallery."
            },
            {
                "type": "int",
                "name": "$post",
                "description": "Post ID or object."
            },
            {
                "type": "array",
                "name": "$galleries",
                "description": "Associative array of all found post galleries."
            }
        ],
        "type": "filter"
    },
    {
        "text": "attachment_url_to_postid",
        "description": "Filter an attachment id found by URL.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post_id (if any) found by the function."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The URL being looked up."
            }
        ],
        "type": "filter"
    },
    {
        "text": "add_{$meta_type}_metadata",
        "description": "Filter whether to add metadata of a specific type.",
        "arguments": [
            {
                "type": "null",
                "name": "$check",
                "description": "Whether to allow adding metadata for the given type."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value. Must be serializable if non-scalar."
            },
            {
                "type": "bool",
                "name": "$unique",
                "description": "Whether the specified meta key should be unique                              for the object. Optional. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "add_{$meta_type}_meta",
        "description": "Fires immediately before meta of a specific type is added.",
        "arguments": [
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "added_{$meta_type}_meta",
        "description": "Fires immediately after meta of a specific type is added.",
        "arguments": [
            {
                "type": "int",
                "name": "$mid",
                "description": "The meta ID after successful update."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "update_{$meta_type}_metadata",
        "description": "Filter whether to update metadata of a specific type.",
        "arguments": [
            {
                "type": "null",
                "name": "$check",
                "description": "Whether to allow updating metadata for the given type."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value. Must be serializable if non-scalar."
            },
            {
                "type": "mixed",
                "name": "$prev_value",
                "description": "Optional. If specified, only update existing                              metadata entries with the specified value.                              Otherwise, update all entries."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_{$meta_type}_meta",
        "description": "Fires immediately before updating metadata of a specific type.",
        "arguments": [
            {
                "type": "int",
                "name": "$meta_id",
                "description": "ID of the metadata entry to update."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "update_postmeta",
        "description": "Fires immediately before updating a post's metadata.",
        "arguments": [
            {
                "type": "int",
                "name": "$meta_id",
                "description": "ID of metadata entry to update."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "updated_{$meta_type}_meta",
        "description": "Fires immediately after updating metadata of a specific type.",
        "arguments": [
            {
                "type": "int",
                "name": "$meta_id",
                "description": "ID of updated metadata entry."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "updated_postmeta",
        "description": "Fires immediately after updating a post's metadata.",
        "arguments": [
            {
                "type": "int",
                "name": "$meta_id",
                "description": "ID of updated metadata entry."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_{$meta_type}_metadata",
        "description": "Filter whether to delete metadata of a specific type.",
        "arguments": [
            {
                "type": "null",
                "name": "$delete",
                "description": "Whether to allow metadata deletion of the given type."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value. Must be serializable if non-scalar."
            },
            {
                "type": "bool",
                "name": "$delete_all",
                "description": "Whether to delete the matching metadata entries                              for all objects, ignoring the specified $object_id.                              Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_{$meta_type}_meta",
        "description": "Fires immediately before deleting metadata of a specific type.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta_ids",
                "description": "An array of metadata entry IDs to delete."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_postmeta",
        "description": "Fires immediately before deleting metadata for a post.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta_ids",
                "description": "An array of post metadata entry IDs to delete."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_{$meta_type}_meta",
        "description": "Fires immediately after deleting metadata of a specific type.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta_ids",
                "description": "An array of deleted metadata entry IDs."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_postmeta",
        "description": "Fires immediately after deleting metadata for a post.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta_ids",
                "description": "An array of deleted post metadata entry IDs."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_{$meta_type}_metadata",
        "description": "Filter whether to retrieve metadata of a specific type.",
        "arguments": [
            {
                "type": "null",
                "name": "$value",
                "description": "The value get_metadata() should                                     return - a single metadata value,                                     or an array of values."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "string",
                "name": "$single",
                "description": "Meta value, or an array of values."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_{$meta_type}meta",
        "description": "Fires immediately before deleting post or comment metadata of a specific type.",
        "arguments": [
            {
                "type": "int",
                "name": "$meta_id",
                "description": "ID of the metadata entry to delete."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_{$meta_type}meta",
        "description": "Fires immediately after deleting post or comment metadata of a specific type.",
        "arguments": [
            {
                "type": "int",
                "name": "$meta_ids",
                "description": "Deleted metadata entry ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "is_protected_meta",
        "description": "Filter whether a meta key is protected.",
        "arguments": [
            {
                "type": "bool",
                "name": "$protected",
                "description": "Whether the key is protected. Default false."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "string",
                "name": "$meta_type",
                "description": "Meta type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_{$meta_type}_meta_{$meta_key}",
        "description": "Filter the sanitization of a specific meta key of a specific meta type.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value to sanitize."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "string",
                "name": "$meta_type",
                "description": "Meta type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_blog_updated",
        "description": "Fires after the blog details are updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "blog_details",
        "description": "Filter a blog's details.",
        "arguments": [
            {
                "type": "object",
                "name": "$details",
                "description": "The blog details."
            }
        ],
        "type": "filter"
    },
    {
        "text": "refresh_blog_details",
        "description": "Fires after the blog details cache is cleared.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "make_spam_blog",
        "description": "Fires when the blog status is changed to 'spam'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "make_ham_blog",
        "description": "Fires when the blog status is changed to 'ham'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "mature_blog",
        "description": "Fires when the blog status is changed to 'mature'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "unmature_blog",
        "description": "Fires when the blog status is changed to 'unmature'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "archive_blog",
        "description": "Fires when the blog status is changed to 'archived'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "unarchive_blog",
        "description": "Fires when the blog status is changed to 'unarchived'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "make_delete_blog",
        "description": "Fires when the blog status is changed to 'deleted'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "make_undelete_blog",
        "description": "Fires when the blog status is changed to 'undeleted'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "blog_option_{$option}",
        "description": "Filter a blog option value.",
        "arguments": [
            {
                "type": "string",
                "name": "$value",
                "description": "The option value."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Blog ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "switch_blog",
        "description": "Fires when the blog is switched.",
        "arguments": [
            {
                "type": "int",
                "name": "$new_blog",
                "description": "New blog ID."
            },
            {
                "type": "int",
                "name": "$new_blog",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "update_blog_public",
        "description": "Fires after the current blog's 'public' setting is updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            },
            {
                "type": "string",
                "name": "$value",
                "description": "The value of blog status."
            }
        ],
        "type": "action"
    },
    {
        "text": "graceful_fail",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "graceful_fail_template",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "add_user_to_blog",
        "description": "Fires immediately after a user is added to a site.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$role",
                "description": "User role."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "remove_user_from_blog",
        "description": "Fires before a user is removed from a site.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "is_email_address_unsafe",
        "description": "Filter whether an email address is unsafe.",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_email_address_unsafe",
                "description": "Whether the email address is \"unsafe\". Default false."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_validate_user_signup",
        "description": "Filter the validated user registration details.",
        "arguments": [
            {
                "type": "array",
                "name": "$result",
                "description": "{     The array of user name, email and the error messages.     @type string   $user_name     Sanitized and unique username.     @type string   $orig_username Original username.     @type string   $user_email    User email address.     @type WP_Error $errors        WP_Error object containing any errors found. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "newblogname",
        "description": "Filter the new site name during registration.",
        "arguments": [
            {
                "type": "string",
                "name": "$blogname",
                "description": "Site name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_validate_blog_signup",
        "description": "Filter site details and error messages following registration.",
        "arguments": [
            {
                "type": "array",
                "name": "$result",
                "description": "{     Array of domain, path, blog name, blog title, user and error messages.     @type string   $domain     Domain for the site.     @type string   $path       Path for the site. Used in subdirectory installs.     @type string   $blogname   The unique site name (slug).     @type string   $blog_title Blog title.     @type string   $user       User email address.     @type WP_Error $errors     WP_Error containing any errors found. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_signup_blog_notification",
        "description": "Filter whether to bypass the new site email notification.",
        "arguments": [
            {
                "type": "string",
                "name": "$domain",
                "description": "Site domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Site path."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Site title."
            },
            {
                "type": "string",
                "name": "$user",
                "description": "User login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Activation key created in wpmu_signup_blog()."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "By default, contains the requested privacy setting and lang_id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_signup_blog_notification_email",
        "description": "Filter the message content of the new blog notification email.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Content of the notification email."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Site domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Site path."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Site title."
            },
            {
                "type": "string",
                "name": "$user",
                "description": "User login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Activation key created in wpmu_signup_blog()."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "By default, contains the requested privacy setting and lang_id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_signup_blog_notification_subject",
        "description": "Filter the subject of the new blog notification email.",
        "arguments": [
            {
                "type": "string",
                "name": "$subject",
                "description": "Subject of the notification email."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Site domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Site path."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Site title."
            },
            {
                "type": "string",
                "name": "$user",
                "description": "User login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Activation key created in wpmu_signup_blog()."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "By default, contains the requested privacy setting and lang_id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_signup_user_notification",
        "description": "Filter whether to bypass the email notification for new user sign-up.",
        "arguments": [
            {
                "type": "string",
                "name": "$user",
                "description": "User login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Activation key created in wpmu_signup_user()."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_signup_user_notification_email",
        "description": "Filter the content of the notification email for new user sign-up.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Content of the notification email."
            },
            {
                "type": "string",
                "name": "$user",
                "description": "User login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Activation key created in wpmu_signup_user()."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_signup_user_notification_subject",
        "description": "Filter the subject of the notification email of new user signup.",
        "arguments": [
            {
                "type": "string",
                "name": "$subject",
                "description": "Subject of the notification email."
            },
            {
                "type": "string",
                "name": "$user",
                "description": "User login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Activation key created in wpmu_signup_user()."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_activate_user",
        "description": "Fires immediately after a new user is activated.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "int",
                "name": "$password",
                "description": "User password."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_activate_blog",
        "description": "Fires immediately after a site is activated.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "int",
                "name": "$password",
                "description": "User password."
            },
            {
                "type": "string",
                "name": "$signup_title",
                "description": "Site title."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_new_user",
        "description": "Fires immediately after a new user is created.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_new_blog",
        "description": "Fires immediately after a new site is created.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Site domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Site path."
            },
            {
                "type": "int",
                "name": "$site_id",
                "description": "Site ID. Only relevant on multi-network installs."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Meta data. Used to set initial site options."
            }
        ],
        "type": "action"
    },
    {
        "text": "newblog_notify_siteadmin",
        "description": "Filter the message body of the new site activation email sent to the network administrator.",
        "arguments": [
            {
                "type": "string",
                "name": "$msg",
                "description": "Email body."
            }
        ],
        "type": "filter"
    },
    {
        "text": "newuser_notify_siteadmin",
        "description": "Filter the message body of the new user activation email sent to the network administrator.",
        "arguments": [
            {
                "type": "string",
                "name": "$msg",
                "description": "Email body."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User instance of the new user."
            }
        ],
        "type": "filter"
    },
    {
        "text": "domain_exists",
        "description": "Filter whether a blogname is taken.",
        "arguments": [
            {
                "type": "int",
                "name": "$result",
                "description": "The blog_id if the blogname exists, null otherwise."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Domain to be checked."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path to be checked."
            },
            {
                "type": "int",
                "name": "$site_id",
                "description": "Site ID. Relevant only on multi-network installs."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_welcome_notification",
        "description": "Filter whether to bypass the welcome email after site activation.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "User password."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Site title."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_welcome_email",
        "description": "Filter the content of the welcome email after site activation.",
        "arguments": [
            {
                "type": "string",
                "name": "$welcome_email",
                "description": "Message body of the email."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "User password."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Site title."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_welcome_subject",
        "description": "Filter the subject of the welcome email after site activation.",
        "arguments": [
            {
                "type": "string",
                "name": "$subject",
                "description": "Subject of the email."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_welcome_user_notification",
        "description": "Filter whether to bypass the welcome email after user activation.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "User password."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_welcome_user_email",
        "description": "Filter the content of the welcome email after user activation.",
        "arguments": [
            {
                "type": "\\type",
                "name": "$welcome_email",
                "description": "The message body of the account activation success email."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "User password."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_welcome_user_subject",
        "description": "Filter the subject of the welcome email after user activation.",
        "arguments": [
            {
                "type": "string",
                "name": "$subject",
                "description": "Subject of the email."
            }
        ],
        "type": "filter"
    },
    {
        "text": "blog_redirect_404",
        "description": "Filter the redirect URL for 404s on the main site.",
        "arguments": [
            {
                "type": "string",
                "name": "$no_blog_redirect",
                "description": "The redirect URL defined in NOBLOGREDIRECT."
            }
        ],
        "type": "filter"
    },
    {
        "text": "added_existing_user",
        "description": "Fires immediately after an existing user is added to a site.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "mixed",
                "name": "$result",
                "description": "True on success or a WP_Error object if the user doesn't exist."
            }
        ],
        "type": "action"
    },
    {
        "text": "enable_live_network_counts",
        "description": "Filter whether to update network site or user counts when a new site is created.",
        "arguments": [
            {
                "type": "bool",
                "name": "$small_network",
                "description": "Whether the network is considered small."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context. Either 'users' or 'sites'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_space_used",
        "description": "Filter the amount of storage space used by the current site.",
        "arguments": [
            {
                "type": "int",
                "name": "$space_used",
                "description": "The amount of used space, in megabytes. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_space_allowed",
        "description": "Filter the upload quota for the current site.",
        "arguments": [
            {
                "type": "int",
                "name": "$space_allowed",
                "description": "Upload quota in megabytes for the current blog."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_is_large_network",
        "description": "Filter whether the network is considered large.",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_large_network",
                "description": "Whether the network has more than 10000 users or sites."
            },
            {
                "type": "string",
                "name": "$component",
                "description": "The component to count. Accepts 'users', or 'sites'."
            },
            {
                "type": "int",
                "name": "$count",
                "description": "The count of items for the component."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ms_site_check",
        "description": "Filter checking the status of the current blog.",
        "arguments": [
            {
                "type": "bool",
                "name": "",
                "description": "null Whether to skip the blog status check. Default null."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_by_path_segments_count",
        "description": "Filter the number of path segments to consider when searching for a site.",
        "arguments": [
            {
                "type": "int",
                "name": "$segments",
                "description": "The number of path segments to consider. WordPress by default looks at                           one path segment. The function default of null only makes sense when you                           know the requested path should match a network."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "The requested domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The requested path, in full."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_network_by_path",
        "description": "Determine a network by its domain and path.",
        "arguments": [
            {
                "type": "null",
                "name": "$network",
                "description": "Network value to return by path."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "The requested domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The requested path, in full."
            },
            {
                "type": "int",
                "name": "$segments",
                "description": "The suggested number of paths to consult.                                   Default null, meaning the entire path was to be consulted."
            },
            {
                "type": "array",
                "name": "$paths",
                "description": "The paths to search for, based on $path and $segments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "site_by_path_segments_count",
        "description": "Filter the number of path segments to consider when searching for a site.",
        "arguments": [
            {
                "type": "int",
                "name": "$segments",
                "description": "The number of path segments to consider. WordPress by default looks at                           one path segment following the network path. The function default of                           null only makes sense when you know the requested path should match a site."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "The requested domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The requested path, in full."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_site_by_path",
        "description": "Determine a site by its domain and path.",
        "arguments": [
            {
                "type": "null",
                "name": "$site",
                "description": "Site value to return by path."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "The requested domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The requested path, in full."
            },
            {
                "type": "int",
                "name": "$segments",
                "description": "The suggested number of paths to consult.                                   Default null, meaning the entire path was to be consulted."
            },
            {
                "type": "array",
                "name": "$paths",
                "description": "The paths to search for, based on $path and $segments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ms_site_not_found",
        "description": "Fires when a network can be determined but a site cannot.",
        "arguments": [
            {
                "type": "object",
                "name": "$current_site",
                "description": "The network that had been determined."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "The domain used to search for a site."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The path used to search for a site."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_nav_menu_args",
        "description": "Filter the arguments used to display a navigation menu.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Array of wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_wp_nav_menu",
        "description": "Filter whether to short-circuit the wp_nav_menu() output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Nav menu output to short-circuit with. Default null."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "An object containing wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_nav_menu_container_allowedtags",
        "description": "Filter the list of HTML tags that are valid for use as menu containers.",
        "arguments": [
            {
                "type": "array",
                "name": "$tags",
                "description": "The acceptable HTML tags for use as menu containers.                    Default is array containing 'div' and 'nav'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_nav_menu_objects",
        "description": "Filter the sorted list of menu item objects before generating the menu's HTML.",
        "arguments": [
            {
                "type": "array",
                "name": "$sorted_menu_items",
                "description": "The menu items, sorted by each menu item's menu order."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "An object containing wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_nav_menu_items",
        "description": "Filter the HTML list content for navigation menus.",
        "arguments": [
            {
                "type": "string",
                "name": "$items",
                "description": "The HTML list content for the menu items."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "An object containing wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_nav_menu_{$menu->slug}_items",
        "description": "Filter the HTML list content for a specific navigation menu.",
        "arguments": [
            {
                "type": "string",
                "name": "$items",
                "description": "The HTML list content for the menu items."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "An object containing wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_nav_menu",
        "description": "Filter the HTML content for navigation menus.",
        "arguments": [
            {
                "type": "string",
                "name": "$nav_menu",
                "description": "The HTML content for the navigation menu."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "An object containing wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_nav_menu_object",
        "description": "Filter the nav_menu term retrieved for wp_get_nav_menu_object().",
        "arguments": [
            {
                "type": "object",
                "name": "$menu_obj",
                "description": "Term from nav_menu taxonomy, or false if nothing had been found."
            },
            {
                "type": "string",
                "name": "$menu",
                "description": "The menu ID, slug, or name passed to wp_get_nav_menu_object()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "has_nav_menu",
        "description": "Filter whether a nav menu is assigned to the specified location.",
        "arguments": [
            {
                "type": "bool",
                "name": "$has_nav_menu",
                "description": "Whether there is a menu assigned to a location."
            },
            {
                "type": "string",
                "name": "$location",
                "description": "Menu location."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_delete_nav_menu",
        "description": "Fires after a navigation menu has been successfully deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "ID of the deleted menu."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_create_nav_menu",
        "description": "Fires after a navigation menu is successfully created.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "ID of the new menu."
            },
            {
                "type": "array",
                "name": "$menu_data",
                "description": "An array of menu data."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_update_nav_menu_item",
        "description": "Fires after a navigation menu item has been updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$menu_id",
                "description": "ID of the updated menu."
            },
            {
                "type": "int",
                "name": "$menu_item_db_id",
                "description": "ID of the updated menu item."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments used to update a menu item."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_get_nav_menus",
        "description": "Filter the navigation menu objects being returned.",
        "arguments": [
            {
                "type": "array",
                "name": "$menus",
                "description": "An array of menu objects."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments used to retrieve menu objects."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_nav_menu_items",
        "description": "Filter the navigation menu items being returned.",
        "arguments": [
            {
                "type": "array",
                "name": "$items",
                "description": "An array of menu item post objects."
            },
            {
                "type": "object",
                "name": "$menu",
                "description": "The menu object."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments used to retrieve menu item objects."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nav_menu_attr_title",
        "description": "Filter a navigation menu item's title attribute.",
        "arguments": [
            {
                "type": "string",
                "name": "$item_title",
                "description": "The menu item title attribute."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nav_menu_description",
        "description": "Filter a navigation menu item's description.",
        "arguments": [
            {
                "type": "string",
                "name": "$description",
                "description": "The menu item description."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_setup_nav_menu_item",
        "description": "Filter a navigation menu item object.",
        "arguments": [
            {
                "type": "object",
                "name": "$menu_item",
                "description": "The menu item object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_option_{$option}",
        "description": "Filter the value of an existing option before it is retrieved.",
        "arguments": [
            {
                "type": "bool",
                "name": "$pre_option",
                "description": "Value to return instead of the option value.                               Default false to skip it."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_option_{$option}",
        "description": "Filter the default value for an option.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$default",
                "description": "The default value to return if the option does not exist                       in the database."
            }
        ],
        "type": "filter"
    },
    {
        "text": "option_{$option}",
        "description": "Filter the value of an existing option.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the option. If stored serialized, it will be                     unserialized prior to being returned."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_update_option_{$option}",
        "description": "Filter a specific option before its value is (maybe) serialized and updated.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new, unserialized option value."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_update_option",
        "description": "Filter an option before its value is (maybe) serialized and updated.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new, unserialized option value."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_option",
        "description": "Fires immediately before an option value is updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to update."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "update_option_{$option}",
        "description": "Fires after the value of a specific option has been successfully updated.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "updated_option",
        "description": "Fires after the value of an option has been successfully updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the updated option."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_option",
        "description": "Fires before an option is added.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to add."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the option."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_option_{$option}",
        "description": "Fires after a specific option has been added.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to add."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the option."
            }
        ],
        "type": "action"
    },
    {
        "text": "added_option",
        "description": "Fires after an option has been added.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the added option."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the option."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_option",
        "description": "Fires immediately before an option is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to delete."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_option_{$option}",
        "description": "Fires after a specific option has been deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the deleted option."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_option",
        "description": "Fires after an option has been deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the deleted option."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_transient_{$transient}",
        "description": "Fires immediately before a specific transient is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_transient",
        "description": "Fires after a transient is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$transient",
                "description": "Deleted transient name."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_transient_{$transient}",
        "description": "Filter the value of an existing transient.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$pre_transient",
                "description": "The default value to return if the transient does not exist.                             Any value other than false will short-circuit the retrieval                             of the transient, and return the returned value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "transient_{$transient}",
        "description": "Filter an existing transient's value.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of transient."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_set_transient_{$transient}",
        "description": "Filter a specific transient before its value is set.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "New value of transient."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds."
            }
        ],
        "type": "filter"
    },
    {
        "text": "set_transient_{$transient}",
        "description": "Fires after the value for a specific transient has been set.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Transient value."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds. Default 0."
            }
        ],
        "type": "action"
    },
    {
        "text": "setted_transient",
        "description": "Fires after the value for a transient has been set.",
        "arguments": [
            {
                "type": "string",
                "name": "$transient",
                "description": "The name of the transient."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Transient value."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds. Default 0."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_site_option_{$option}",
        "description": "Filter an existing site option before it is retrieved.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$pre_option",
                "description": "The default value to return if the option does not exist."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_site_option_{$option}",
        "description": "Filter a specific default site option.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$default",
                "description": "The value to return if the site option does not exist                       in the database."
            }
        ],
        "type": "filter"
    },
    {
        "text": "site_option_{$option}",
        "description": "Filter the value of an existing site option.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of site option."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_add_site_option_{$option}",
        "description": "Filter the value of a specific site option before it is added.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of site option."
            }
        ],
        "type": "filter"
    },
    {
        "text": "add_site_option_{$option}",
        "description": "Fires after a specific site option has been successfully added.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of site option."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of site option."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_site_option",
        "description": "Fires after a site option has been successfully added.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of site option."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of site option."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_delete_site_option_{$option}",
        "description": "Fires immediately before a specific site option is deleted.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "delete_site_option_{$option}",
        "description": "Fires after a specific site option has been deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the site option."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_site_option",
        "description": "Fires after a site option has been deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the site option."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_update_site_option_{$option}",
        "description": "Filter a specific site option before its value is updated.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "New value of site option."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "Old value of site option."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_site_option_{$option}",
        "description": "Fires after the value of a specific site option has been successfully updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of site option."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Current value of site option."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "Old value of site option."
            }
        ],
        "type": "action"
    },
    {
        "text": "update_site_option",
        "description": "Fires after the value of a site option has been successfully updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of site option."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Current value of site option."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "Old value of site option."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_site_transient_{$transient}",
        "description": "Fires immediately before a specific site transient is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_site_transient",
        "description": "Fires after a transient is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$transient",
                "description": "Deleted transient name."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_site_transient_{$transient}",
        "description": "Filter the value of an existing site transient.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$pre_site_transient",
                "description": "The default value to return if the site transient does not exist.                                  Any value other than false will short-circuit the retrieval                                  of the transient, and return the returned value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "site_transient_{$transient}",
        "description": "Filter the value of an existing site transient.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of site transient."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_set_site_transient_{$transient}",
        "description": "Filter the value of a specific site transient before it is set.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of site transient."
            }
        ],
        "type": "filter"
    },
    {
        "text": "set_site_transient_{$transient}",
        "description": "Fires after the value for a specific site transient has been set.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Site transient value."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds. Default 0."
            }
        ],
        "type": "action"
    },
    {
        "text": "setted_site_transient",
        "description": "Fires after the value for a site transient has been set.",
        "arguments": [
            {
                "type": "string",
                "name": "$transient",
                "description": "The name of the site transient."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Site transient value."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds. Default 0."
            }
        ],
        "type": "action"
    },
    {
        "text": "set_current_user",
        "description": "Fires after the current user is set.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "determine_current_user",
        "description": "Filter the current user.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID if one has been determined, false otherwise."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mail",
        "description": "Filter the wp_mail() arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "A compacted array of wp_mail() arguments, including the \"to\" email,                    subject, message, headers, and attachments values."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mail_from",
        "description": "Filter the email address to send from.",
        "arguments": [
            {
                "type": "string",
                "name": "$from_email",
                "description": "Email address to send from."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mail_from_name",
        "description": "Filter the name to associate with the \"from\" email address.",
        "arguments": [
            {
                "type": "string",
                "name": "$from_name",
                "description": "Name associated with the \"from\" email address."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mail_charset",
        "description": "Filter the default wp_mail() charset.",
        "arguments": [
            {
                "type": "string",
                "name": "$charset",
                "description": "Default email charset."
            }
        ],
        "type": "filter"
    },
    {
        "text": "phpmailer_init",
        "description": "Fires after PHPMailer is initialized.",
        "arguments": [
            {
                "type": "\\PHPMailer",
                "name": "",
                "description": "&amp;$phpmailer The PHPMailer instance, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "authenticate",
        "description": "Filter the user to authenticate.",
        "arguments": [
            {
                "type": "null",
                "name": "$user",
                "description": "User to authenticate."
            },
            {
                "type": "string",
                "name": "$username",
                "description": "User login."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "User password"
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_login_failed",
        "description": "Fires after a user login has failed.",
        "arguments": [
            {
                "type": "string",
                "name": "$username",
                "description": "User login."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_logout",
        "description": "Fires after a user is logged-out.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "auth_cookie_malformed",
        "description": "Fires if an authentication cookie is malformed.",
        "arguments": [
            {
                "type": "string",
                "name": "$cookie",
                "description": "Malformed auth cookie."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Authentication scheme. Values include 'auth', 'secure_auth',                       or 'logged_in'."
            }
        ],
        "type": "action"
    },
    {
        "text": "auth_cookie_expired",
        "description": "Fires once an authentication cookie has expired.",
        "arguments": [
            {
                "type": "array",
                "name": "$cookie_elements",
                "description": "An array of data for the authentication cookie."
            }
        ],
        "type": "action"
    },
    {
        "text": "auth_cookie_bad_username",
        "description": "Fires if a bad username is entered in the user authentication process.",
        "arguments": [
            {
                "type": "array",
                "name": "$cookie_elements",
                "description": "An array of data for the authentication cookie."
            }
        ],
        "type": "action"
    },
    {
        "text": "auth_cookie_bad_hash",
        "description": "Fires if a bad authentication cookie hash is encountered.",
        "arguments": [
            {
                "type": "array",
                "name": "$cookie_elements",
                "description": "An array of data for the authentication cookie."
            }
        ],
        "type": "action"
    },
    {
        "text": "auth_cookie_bad_session_token",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "auth_cookie_valid",
        "description": "Fires once an authentication cookie has been validated.",
        "arguments": [
            {
                "type": "array",
                "name": "$cookie_elements",
                "description": "An array of data for the authentication cookie."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User object."
            }
        ],
        "type": "action"
    },
    {
        "text": "auth_cookie",
        "description": "Filter the authentication cookie.",
        "arguments": [
            {
                "type": "string",
                "name": "$cookie",
                "description": "Authentication cookie."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Authentication cookie expiration in seconds."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Cookie scheme used. Accepts 'auth', 'secure_auth', or 'logged_in'."
            },
            {
                "type": "string",
                "name": "$token",
                "description": "User's session token used."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auth_cookie_expiration",
        "description": "Filter the duration of the authentication cookie expiration period.",
        "arguments": [
            {
                "type": "int",
                "name": "$length",
                "description": "Duration of the expiration period in seconds."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "bool",
                "name": "$remember",
                "description": "Whether to remember the user login. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "secure_auth_cookie",
        "description": "Filter whether the connection is secure.",
        "arguments": [
            {
                "type": "bool",
                "name": "$secure",
                "description": "Whether the connection is secure."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "secure_logged_in_cookie",
        "description": "Filter whether to use a secure cookie when logged-in.",
        "arguments": [
            {
                "type": "bool",
                "name": "$secure_logged_in_cookie",
                "description": "Whether to use a secure cookie when logged-in."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "bool",
                "name": "$secure",
                "description": "Whether the connection is secure."
            }
        ],
        "type": "filter"
    },
    {
        "text": "set_auth_cookie",
        "description": "Fires immediately before the authentication cookie is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$auth_cookie",
                "description": "Authentication cookie."
            },
            {
                "type": "int",
                "name": "$expire",
                "description": "Login grace period in seconds. Default 43,200 seconds, or 12 hours."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Duration in seconds the authentication cookie should be valid.                            Default 1,209,600 seconds, or 14 days."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Authentication scheme. Values include 'auth', 'secure_auth', or 'logged_in'."
            }
        ],
        "type": "action"
    },
    {
        "text": "set_logged_in_cookie",
        "description": "Fires immediately before the secure authentication cookie is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$logged_in_cookie",
                "description": "The logged-in cookie."
            },
            {
                "type": "int",
                "name": "$expire",
                "description": "Login grace period in seconds. Default 43,200 seconds, or 12 hours."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Duration in seconds the authentication cookie should be valid.                                 Default 1,209,600 seconds, or 14 days."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Authentication scheme. Default 'logged_in'."
            }
        ],
        "type": "action"
    },
    {
        "text": "clear_auth_cookie",
        "description": "Fires just before the authentication cookies are cleared.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "secure_auth_redirect",
        "description": "Filter whether to use a secure authentication redirect.",
        "arguments": [
            {
                "type": "bool",
                "name": "$secure",
                "description": "Whether to use a secure authentication redirect. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auth_redirect_scheme",
        "description": "Filter the authentication redirect scheme.",
        "arguments": [
            {
                "type": "string",
                "name": "$scheme",
                "description": "Authentication redirect scheme. Default empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auth_redirect",
        "description": "Fires before the authentication redirect.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "check_admin_referer",
        "description": "Fires once the admin request has been validated or not.",
        "arguments": [
            {
                "type": "string",
                "name": "$action",
                "description": "The nonce action."
            },
            {
                "type": "false",
                "name": "$result",
                "description": "False if the nonce is invalid, 1 if the nonce is valid and generated between                          0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago."
            }
        ],
        "type": "action"
    },
    {
        "text": "check_ajax_referer",
        "description": "Fires once the AJAX request has been validated or not.",
        "arguments": [
            {
                "type": "string",
                "name": "$action",
                "description": "The AJAX nonce action."
            },
            {
                "type": "false",
                "name": "$result",
                "description": "False if the nonce is invalid, 1 if the nonce is valid and generated between                          0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_redirect",
        "description": "Filter the redirect location.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The path to redirect to."
            },
            {
                "type": "int",
                "name": "$status",
                "description": "Status code to use."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_redirect_status",
        "description": "Filter the redirect status code.",
        "arguments": [
            {
                "type": "int",
                "name": "$status",
                "description": "Status code to use."
            },
            {
                "type": "string",
                "name": "$location",
                "description": "The path to redirect to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_safe_redirect_fallback",
        "description": "Filter the redirect fallback URL for when the provided redirect is not safe (local).",
        "arguments": [
            {
                "type": "string",
                "name": "$fallback_url",
                "description": "The fallback URL to use by default."
            },
            {
                "type": "int",
                "name": "$status",
                "description": "The redirect status."
            }
        ],
        "type": "filter"
    },
    {
        "text": "allowed_redirect_hosts",
        "description": "Filter the whitelist of hosts to redirect to.",
        "arguments": [
            {
                "type": "array",
                "name": "$hosts",
                "description": "An array of allowed hosts."
            },
            {
                "type": "bool",
                "name": "$host",
                "description": "The parsed host; empty if not isset."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_notification_recipients",
        "description": "Filter the list of email addresses to receive a comment notification.",
        "arguments": [
            {
                "type": "array",
                "name": "$emails",
                "description": "An array of email addresses to receive a comment notification."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_notification_notify_author",
        "description": "Filter whether to notify comment authors of their comments on their own posts.",
        "arguments": [
            {
                "type": "bool",
                "name": "$notify",
                "description": "Whether to notify the post author of their own comment.                         Default false."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_notification_text",
        "description": "Filter the comment notification email text.",
        "arguments": [
            {
                "type": "string",
                "name": "$notify_message",
                "description": "The comment notification email text."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_notification_subject",
        "description": "Filter the comment notification email subject.",
        "arguments": [
            {
                "type": "string",
                "name": "$subject",
                "description": "The comment notification email subject."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_notification_headers",
        "description": "Filter the comment notification email headers.",
        "arguments": [
            {
                "type": "string",
                "name": "$message_headers",
                "description": "Headers for the comment notification email."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_moderation_recipients",
        "description": "Filter the list of recipients for comment moderation emails.",
        "arguments": [
            {
                "type": "array",
                "name": "$emails",
                "description": "List of email addresses to notify for comment moderation."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_moderation_text",
        "description": "Filter the comment moderation email text.",
        "arguments": [
            {
                "type": "string",
                "name": "$notify_message",
                "description": "Text of the comment moderation email."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_moderation_subject",
        "description": "Filter the comment moderation email subject.",
        "arguments": [
            {
                "type": "string",
                "name": "$subject",
                "description": "Subject of the comment moderation email."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_moderation_headers",
        "description": "Filter the comment moderation email headers.",
        "arguments": [
            {
                "type": "string",
                "name": "$message_headers",
                "description": "Headers for the comment moderation email."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "retrieve_password_key",
        "description": "This action is documented in wp-login.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "nonce_life",
        "description": "Filter the lifespan of nonces in seconds.",
        "arguments": [
            {
                "type": "int",
                "name": "$lifespan",
                "description": "Lifespan of nonces in seconds. Default 86,400 seconds, or one day."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nonce_user_logged_out",
        "description": "Filter whether the user who generated the nonce is logged out.",
        "arguments": [
            {
                "type": "int",
                "name": "$uid",
                "description": "ID of the nonce-owning user."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "The nonce action."
            }
        ],
        "type": "filter"
    },
    {
        "text": "salt",
        "description": "Filter the WordPress salt.",
        "arguments": [
            {
                "type": "string",
                "name": "$cached_salt",
                "description": "Cached salt for the given scheme."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Authentication scheme. Values include 'auth',                            'secure_auth', 'logged_in', and 'nonce'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "check_password",
        "description": "Filter whether the plaintext password matches the encrypted password.",
        "arguments": [
            {
                "type": "bool",
                "name": "$check",
                "description": "Whether the passwords match."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "The plaintext password."
            },
            {
                "type": "string",
                "name": "$hash",
                "description": "The hashed password."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "random_password",
        "description": "Filter the randomly-generated password.",
        "arguments": [
            {
                "type": "string",
                "name": "$password",
                "description": "The generated password."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_avatar",
        "description": "Filter whether to retrieve the avatar URL early.",
        "arguments": [
            {
                "type": "string",
                "name": "$avatar",
                "description": "HTML for the user's avatar. Default null."
            },
            {
                "type": "int",
                "name": "$id_or_email",
                "description": "A user ID, email address, or comment object."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to get_avatar_url(), after processing."
            }
        ],
        "type": "filter"
    },
    {
        "text": "protected_title_format",
        "description": "Filter the text prepended to the post title for protected posts.",
        "arguments": [
            {
                "type": "string",
                "name": "$prepend",
                "description": "Text displayed before the post title.                         Default 'Protected: %s'."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Current post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "private_title_format",
        "description": "Filter the text prepended to the post title of private posts.",
        "arguments": [
            {
                "type": "string",
                "name": "$prepend",
                "description": "Text displayed before the post title.                         Default 'Private: %s'."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Current post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_guid",
        "description": "Filter the escaped Global Unique Identifier (guid) of the post.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_guid",
                "description": "Escaped Global Unique Identifier (guid) of the post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_guid",
        "description": "Filter the Global Unique Identifier (guid) of the post.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_guid",
                "description": "Global Unique Identifier (guid) of the post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_content_more_link",
        "description": "Filter the Read More link text.",
        "arguments": [
            {
                "type": "string",
                "name": "$more_link_element",
                "description": "Read More link element."
            },
            {
                "type": "string",
                "name": "$more_link_text",
                "description": "Read More text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_excerpt",
        "description": "Filter the retrieved post excerpt.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_excerpt",
                "description": "The post excerpt."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_class",
        "description": "Filter the list of CSS classes for the current post.",
        "arguments": [
            {
                "type": "array",
                "name": "$classes",
                "description": "An array of post classes."
            },
            {
                "type": "string",
                "name": "$class",
                "description": "A comma-separated list of additional classes added to the post."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "body_class",
        "description": "Filter the list of CSS body classes for the current post or page.",
        "arguments": [
            {
                "type": "array",
                "name": "$classes",
                "description": "An array of body classes."
            },
            {
                "type": "string",
                "name": "$class",
                "description": "A comma-separated list of additional classes added to the body."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_link_pages_args",
        "description": "Filter the arguments used in retrieving page links for paginated posts.",
        "arguments": [
            {
                "type": "array",
                "name": "$params",
                "description": "An array of arguments for page links for paginated posts."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_link_pages_link",
        "description": "Filter the HTML output of individual page number links.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The page number HTML output."
            },
            {
                "type": "int",
                "name": "$i",
                "description": "Page number for paginated posts' page links."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_link_pages",
        "description": "Filter the HTML output of page links for paginated posts.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML output of paginated posts' page links."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_meta_key",
        "description": "Filter the HTML output of the li element in the post custom fields list.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "The HTML output for the li element."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Meta key."
            },
            {
                "type": "string",
                "name": "$value",
                "description": "Meta value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_dropdown_pages",
        "description": "Filter the HTML output of a list of pages as a drop down.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML output for drop down list of pages."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_list_pages_excludes",
        "description": "Filter the array of pages to exclude from the pages list.",
        "arguments": [
            {
                "type": "array",
                "name": "$exclude_array",
                "description": "An array of page IDs to exclude."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_list_pages",
        "description": "Filter the HTML output of the pages to list.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML output of the pages list."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "An array of page-listing arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_page_menu_args",
        "description": "Filter the arguments used to generate a page-based menu.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of page menu arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_page_menu",
        "description": "Filter the HTML output of a page-based menu.",
        "arguments": [
            {
                "type": "string",
                "name": "$menu",
                "description": "The HTML output."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_link",
        "description": "Filter a retrieved attachment page link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link_html",
                "description": "The page link HTML output."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Image size. Default 'thumbnail'."
            },
            {
                "type": "bool",
                "name": "$permalink",
                "description": "Whether to add permalink to image. Default false."
            },
            {
                "type": "bool",
                "name": "$icon",
                "description": "Whether to include an icon. Default false."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "If string, will be link text. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "prepend_attachment",
        "description": "Filter the attachment markup to be prepended to the post content.",
        "arguments": [
            {
                "type": "string",
                "name": "$p",
                "description": "The attachment HTML output."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_password_form",
        "description": "Filter the HTML output for the protected post password form.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The password form HTML output."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_thumbnail_size",
        "description": "Filter the post thumbnail size.",
        "arguments": [
            {
                "type": "string",
                "name": "$size",
                "description": "The post thumbnail size."
            }
        ],
        "type": "filter"
    },
    {
        "text": "begin_fetch_post_thumbnail_html",
        "description": "Fires before fetching the post thumbnail HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_id",
                "description": "The post ID."
            },
            {
                "type": "string",
                "name": "$post_thumbnail_id",
                "description": "The post thumbnail ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "The post thumbnail size."
            }
        ],
        "type": "action"
    },
    {
        "text": "end_fetch_post_thumbnail_html",
        "description": "Fires after fetching the post thumbnail HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_id",
                "description": "The post ID."
            },
            {
                "type": "string",
                "name": "$post_thumbnail_id",
                "description": "The post thumbnail ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "The post thumbnail size."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_thumbnail_html",
        "description": "Filter the post thumbnail HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "The post thumbnail HTML."
            },
            {
                "type": "string",
                "name": "$post_id",
                "description": "The post ID."
            },
            {
                "type": "string",
                "name": "$post_thumbnail_id",
                "description": "The post thumbnail ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "The post thumbnail size."
            },
            {
                "type": "string",
                "name": "$attr",
                "description": "Query string of attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_attached_file",
        "description": "Filter the attached file based on the given ID.",
        "arguments": [
            {
                "type": "string",
                "name": "$file",
                "description": "Path to attached file."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_attached_file",
        "description": "Filter the path to the attached file to update.",
        "arguments": [
            {
                "type": "string",
                "name": "$file",
                "description": "Path to the attached file to update."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "_wp_relative_upload_path",
        "description": "Filter the relative path to an uploaded file.",
        "arguments": [
            {
                "type": "string",
                "name": "$new_path",
                "description": "Relative path to the file."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Full path to the file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "registered_post_type",
        "description": "Fires after a post type is registered.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Arguments used to register the post type."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_type_labels_{$post_type}",
        "description": "Filter the labels of a specific post type.",
        "arguments": [
            {
                "type": "object",
                "name": "$labels",
                "description": "Object with labels for the post type as member variables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$field_no_prefix}_edit_pre",
        "description": "Filter the value of a specific post field to edit.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the post field."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_post_{$field}",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "{$field_no_prefix}_save_pre",
        "description": "Filter the value of a specific field before saving.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the post field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_post_{$field}",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "{$field}_pre",
        "description": "Filter the value of a specific post field before saving.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the post field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_{$field}",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_count_attachments",
        "description": "Modify returned attachment counts by mime type.",
        "arguments": [
            {
                "type": "object",
                "name": "$counts",
                "description": "An object containing the attachment counts by                          mime type."
            },
            {
                "type": "string",
                "name": "$mime_type",
                "description": "The mime type pattern used to filter the attachments                          counted."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_mime_types",
        "description": "Filter the default list of post mime types.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_mime_types",
                "description": "Default list of post mime types."
            }
        ],
        "type": "filter"
    },
    {
        "text": "before_delete_post",
        "description": "Fires before a post is deleted, at the start of wp_delete_post().",
        "arguments": [
            {
                "type": "int",
                "name": "$postid",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_post",
        "description": "Fires immediately before a post is deleted from the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$postid",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_post",
        "description": "Fires immediately after a post is deleted from the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$postid",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "after_delete_post",
        "description": "Fires after a post is deleted, at the conclusion of wp_delete_post().",
        "arguments": [
            {
                "type": "int",
                "name": "$postid",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_trash_post",
        "description": "Fires before a post is sent to the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "trashed_post",
        "description": "Fires after a post is sent to the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "untrash_post",
        "description": "Fires before a post is restored from the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "untrashed_post",
        "description": "Fires after a post is restored from the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "trash_post_comments",
        "description": "Fires before comments are sent to the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "trashed_post_comments",
        "description": "Fires after comments are sent to the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "array",
                "name": "$statuses",
                "description": "Array of comment statuses."
            }
        ],
        "type": "action"
    },
    {
        "text": "untrash_post_comments",
        "description": "Fires before comments are restored for a post from the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "untrashed_post_comments",
        "description": "Fires after comments are restored for a post from the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_insert_post_empty_content",
        "description": "Filter whether the post should be considered \"empty\".",
        "arguments": [
            {
                "type": "bool",
                "name": "$maybe_empty",
                "description": "Whether the post should be considered \"empty\"."
            },
            {
                "type": "array",
                "name": "$postarr",
                "description": "Array of post data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_insert_post_parent",
        "description": "Filter the post parent -- used to check for and prevent hierarchy loops.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_parent",
                "description": "Post parent ID."
            },
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "array",
                "name": "$new_postarr",
                "description": "Array of parsed post data."
            },
            {
                "type": "array",
                "name": "$postarr",
                "description": "Array of sanitized, but otherwise unmodified post data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_insert_attachment_data",
        "description": "Filter attachment post data before it is updated in or added to the database.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "An array of sanitized attachment post data."
            },
            {
                "type": "array",
                "name": "$postarr",
                "description": "An array of unsanitized attachment post data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_insert_post_data",
        "description": "Filter slashed post data just before it is inserted into the database.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "An array of slashed post data."
            },
            {
                "type": "array",
                "name": "$postarr",
                "description": "An array of sanitized, but otherwise unmodified post data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_post_update",
        "description": "Fires immediately before an existing post is updated in the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "array",
                "name": "$data",
                "description": "Array of unslashed post data."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_attachment",
        "description": "Fires once an existing attachment has been updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Attachment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_attachment",
        "description": "Fires once an attachment has been added.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Attachment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_updated",
        "description": "Fires once an existing post has been updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post_after",
                "description": "Post object following the update."
            },
            {
                "type": "\\WP_Post",
                "name": "$post_before",
                "description": "Post object before the update."
            }
        ],
        "type": "action"
    },
    {
        "text": "save_post_{$post->post_type}",
        "description": "Fires once a post has been saved.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            },
            {
                "type": "bool",
                "name": "$update",
                "description": "Whether this is an existing post being updated or not."
            }
        ],
        "type": "action"
    },
    {
        "text": "save_post",
        "description": "Fires once a post has been saved.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            },
            {
                "type": "bool",
                "name": "$update",
                "description": "Whether this is an existing post being updated or not."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_insert_post",
        "description": "Fires once a post has been saved.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            },
            {
                "type": "bool",
                "name": "$update",
                "description": "Whether this is an existing post being updated or not."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_unique_post_slug_is_bad_attachment_slug",
        "description": "Filter whether the post slug would make a bad attachment slug.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bad_slug",
                "description": "Whether the slug would be bad as an attachment slug."
            },
            {
                "type": "string",
                "name": "$slug",
                "description": "The post slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_unique_post_slug_is_bad_hierarchical_slug",
        "description": "Filter whether the post slug would make a bad hierarchical post slug.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bad_slug",
                "description": "Whether the post slug would be bad in a hierarchical post context."
            },
            {
                "type": "string",
                "name": "$slug",
                "description": "The post slug."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            },
            {
                "type": "int",
                "name": "$post_parent",
                "description": "Post parent ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_unique_post_slug_is_bad_flat_slug",
        "description": "Filter whether the post slug would be bad as a flat slug.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bad_slug",
                "description": "Whether the post slug would be bad as a flat slug."
            },
            {
                "type": "string",
                "name": "$slug",
                "description": "The post slug."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_unique_post_slug",
        "description": "Filter the unique post slug.",
        "arguments": [
            {
                "type": "string",
                "name": "$slug",
                "description": "The post slug."
            },
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$post_status",
                "description": "The post status."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            },
            {
                "type": "int",
                "name": "$post_parent",
                "description": "Post parent ID"
            },
            {
                "type": "string",
                "name": "$original_slug",
                "description": "The original post slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "transition_post_status",
        "description": "Fires when a post is transitioned from one status to another.",
        "arguments": [
            {
                "type": "string",
                "name": "$new_status",
                "description": "New post status."
            },
            {
                "type": "string",
                "name": "$old_status",
                "description": "Old post status."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$old_status}_to_{$new_status}",
        "description": "Fires when a post is transitioned from one status to another.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$new_status}_{$post->post_type}",
        "description": "Fires when a post is transitioned from one status to another.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_ping",
        "description": "Filter the new ping URL to add for the given post.",
        "arguments": [
            {
                "type": "string",
                "name": "$new",
                "description": "New ping URL to add."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_enclosed",
        "description": "Filter the list of enclosures already enclosed for the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$pung",
                "description": "Array of enclosures for the given post."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_pung",
        "description": "Filter the list of already-pinged URLs for the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$pung",
                "description": "Array of URLs already pinged for the given post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_to_ping",
        "description": "Filter the list of URLs yet to ping for the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$to_ping",
                "description": "List of URLs yet to ping."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_attachment",
        "description": "Fires before an attachment is deleted, at the start of wp_delete_attachment().",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_get_attachment_metadata",
        "description": "Filter the attachment meta data.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "Array of meta data for the given attachment, or false                            if the object does not exist."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_update_attachment_metadata",
        "description": "Filter the updated attachment meta data.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "Array of updated attachment meta data."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_url",
        "description": "Filter the attachment URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "URL for the given attachment."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_thumb_file",
        "description": "Filter the attachment thumbnail file path.",
        "arguments": [
            {
                "type": "string",
                "name": "$thumbfile",
                "description": "File path to the attachment thumbnail."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_thumb_url",
        "description": "Filter the attachment thumbnail URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "URL for the attachment thumbnail."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "icon_dir_uri",
        "description": "Filter the icon directory URI.",
        "arguments": [
            {
                "type": "string",
                "name": "$uri",
                "description": "Icon directory URI."
            }
        ],
        "type": "filter"
    },
    {
        "text": "icon_dirs",
        "description": "Filter the list of icon directory URIs.",
        "arguments": [
            {
                "type": "array",
                "name": "$uris",
                "description": "List of icon directory URIs."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mime_type_icon",
        "description": "Filter the mime type icon.",
        "arguments": [
            {
                "type": "string",
                "name": "$icon",
                "description": "Path to the mime type icon."
            },
            {
                "type": "string",
                "name": "$mime",
                "description": "Mime type."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID. Will equal 0 if the function passed                        the mime type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pub_priv_sql_capability",
        "description": "Filter the capability to read private posts for a custom post type when generating SQL for getting posts by author.",
        "arguments": [
            {
                "type": "string",
                "name": "$cap",
                "description": "Capability."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_lastpostdate",
        "description": "Filter the date the last post was published.",
        "arguments": [
            {
                "type": "string",
                "name": "$date",
                "description": "Date the last post was published. Likely values are 'gmt',                         'blog', or 'server'."
            },
            {
                "type": "string",
                "name": "$timezone",
                "description": "Location to use for getting the post published date."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_lastpostmodified",
        "description": "Filter the date the last post was modified.",
        "arguments": [
            {
                "type": "string",
                "name": "$lastpostmodified",
                "description": "Date the last post was modified."
            },
            {
                "type": "string",
                "name": "$timezone",
                "description": "Location to use for getting the post modified date.                                 See {@see get_lastpostmodified()} for accepted <code>$timezone<\/code> values."
            }
        ],
        "type": "filter"
    },
    {
        "text": "clean_post_cache",
        "description": "Fires immediately after the given post's cache is cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "clean_page_cache",
        "description": "Fires immediately after the given page's cache is cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "clean_attachment_cache",
        "description": "Fires after the given attachment's cache is cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "Attachment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "private_to_published",
        "description": "Fires when a post's status is transitioned from private to published.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_publish_post",
        "description": "Fires when _publish_post_hook() is called during an XML-RPC request.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "_wp_post_revision_fields",
        "description": "Filter the list of fields saved in post revisions.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "List of fields to revision. Contains 'post_title',                      'post_content', and 'post_excerpt' by default."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_save_post_revision_post_has_changed",
        "description": "Filter whether a post has changed.",
        "arguments": [
            {
                "type": "bool",
                "name": "$post_has_changed",
                "description": "Whether the post has changed."
            },
            {
                "type": "\\WP_Post",
                "name": "$last_revision",
                "description": "The last revision post object."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_save_post_revision_check_for_changes",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "_wp_put_post_revision",
        "description": "Fires once a revision has been saved.",
        "arguments": [
            {
                "type": "int",
                "name": "$revision_id",
                "description": "Post revision ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_restore_post_revision",
        "description": "Fires after a post revision has been restored.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "int",
                "name": "$revision_id",
                "description": "Post revision ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_delete_post_revision",
        "description": "Fires once a post revision has been deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$revision_id",
                "description": "Post revision ID."
            },
            {
                "type": "object",
                "name": "$revision",
                "description": "Post revision object or array."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_revisions_to_keep",
        "description": "Filter the number of revisions to save for the given post.",
        "arguments": [
            {
                "type": "int",
                "name": "$num",
                "description": "Number of revisions to store."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "url_to_postid",
        "description": "Filter the URL to derive the post ID from.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The URL to derive the post ID from."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_feed_engine",
        "description": "Fires before MagpieRSS is loaded, to optionally replace it.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "heartbeat_settings",
        "description": "Filter the Heartbeat settings.",
        "arguments": [
            {
                "type": "array",
                "name": "$settings",
                "description": "Heartbeat settings array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_auth_check_interval",
        "description": "Filter the authentication check interval.",
        "arguments": [
            {
                "type": "int",
                "name": "$interval",
                "description": "The interval in which to check a user's authentication.                      Default 3 minutes in seconds, or 180."
            }
        ],
        "type": "filter"
    },
    {
        "text": "print_head_scripts",
        "description": "Filter whether to print the head scripts.",
        "arguments": [
            {
                "type": "bool",
                "name": "$print",
                "description": "Whether to print the head scripts. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "print_footer_scripts",
        "description": "Filter whether to print the footer scripts.",
        "arguments": [
            {
                "type": "bool",
                "name": "$print",
                "description": "Whether to print the footer scripts. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_print_footer_scripts",
        "description": "Fires when footer scripts are printed.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_enqueue_scripts",
        "description": "Fires when scripts and styles are enqueued.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "print_admin_styles",
        "description": "Filter whether to print the admin styles.",
        "arguments": [
            {
                "type": "bool",
                "name": "$print",
                "description": "Whether to print the admin styles. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "print_late_styles",
        "description": "Filter whether to print the styles queued too late for the HTML head.",
        "arguments": [
            {
                "type": "bool",
                "name": "$print",
                "description": "Whether to print the 'late' styles. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "shortcode_atts_{$shortcode}",
        "description": "Filter a shortcode's default attributes.",
        "arguments": [
            {
                "type": "array",
                "name": "$out",
                "description": "The output array of shortcode attributes."
            },
            {
                "type": "array",
                "name": "$pairs",
                "description": "The supported attributes and their defaults."
            },
            {
                "type": "array",
                "name": "$atts",
                "description": "The user defined shortcode attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_format_rewrite_base",
        "description": "Filter the post formats rewrite base.",
        "arguments": [
            {
                "type": "string",
                "name": "$context",
                "description": "Context of the rewrite base. Default 'type'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "registered_taxonomy",
        "description": "Fires after a taxonomy is registered.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "array",
                "name": "$object_type",
                "description": "Object type or array of object types."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Array of taxonomy registration arguments."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_term",
        "description": "Filter a term.",
        "arguments": [
            {
                "type": "int",
                "name": "$_term",
                "description": "Term object or ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_{$taxonomy}",
        "description": "Filter a taxonomy.",
        "arguments": [
            {
                "type": "int",
                "name": "$_term",
                "description": "Term object or ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_terms_args",
        "description": "Filter the terms query arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of get_term() arguments."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_terms",
        "description": "Filter the given taxonomy's terms cache.",
        "arguments": [
            {
                "type": "array",
                "name": "$cache",
                "description": "Cached array of terms for the given taxonomy."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of get_terms() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_terms_orderby",
        "description": "Filter the ORDERBY clause of the terms query.",
        "arguments": [
            {
                "type": "string",
                "name": "$orderby",
                "description": "<code>ORDERBY<\/code> clause of the terms query."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of terms query arguments."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            }
        ],
        "type": "filter"
    },
    {
        "text": "list_terms_exclusions",
        "description": "Filter the terms to exclude from the terms query.",
        "arguments": [
            {
                "type": "string",
                "name": "$exclusions",
                "description": "<code>NOT IN<\/code> clause of the terms query."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of terms query arguments."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_terms_fields",
        "description": "Filter the fields to select in the terms query.",
        "arguments": [
            {
                "type": "array",
                "name": "$selects",
                "description": "An array of fields to select for the terms query."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of term query arguments."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            }
        ],
        "type": "filter"
    },
    {
        "text": "terms_clauses",
        "description": "Filter the terms query SQL clauses.",
        "arguments": [
            {
                "type": "array",
                "name": "$pieces",
                "description": "Terms query SQL clauses."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of terms query arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_term_{$field}",
        "description": "Filter a term field to edit before it is sanitized.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the term field."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_{$taxonomy}_{$field}",
        "description": "Filter the taxonomy field to edit before it is sanitized.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the taxonomy field to edit."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_term_{$field}",
        "description": "Filter a term field value before it is sanitized.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the term field."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_{$taxonomy}_{$field}",
        "description": "Filter a taxonomy field before it is sanitized.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the taxonomy field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_category_nicename",
        "description": "Filter the category nicename before it is sanitized.",
        "arguments": [
            {
                "type": "string",
                "name": "$value",
                "description": "The category nicename."
            }
        ],
        "type": "filter"
    },
    {
        "text": "term_{$field}_rss",
        "description": "Filter the term field for use in RSS.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the term field."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$taxonomy}_{$field}_rss",
        "description": "Filter the taxonomy field for use in RSS.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the taxonomy field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "term_{$field}",
        "description": "Filter the term field sanitized for display.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the term field."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context to retrieve the term field value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$taxonomy}_{$field}",
        "description": "Filter the taxonomy field sanitized for display.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the taxonomy field."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context to retrieve the taxonomy field value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_delete_term",
        "description": "Fires when deleting a term, before any modifications are made to posts or terms.",
        "arguments": [
            {
                "type": "int",
                "name": "$term",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy Name."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_term_taxonomies",
        "description": "Fires immediately before a term to delete's children are reassigned a parent.",
        "arguments": [
            {
                "type": "array",
                "name": "$edit_tt_ids",
                "description": "An array of term taxonomy IDs for the given term."
            }
        ],
        "type": "action"
    },
    {
        "text": "edited_term_taxonomies",
        "description": "Fires immediately after a term to delete's children are reassigned a parent.",
        "arguments": [
            {
                "type": "array",
                "name": "$edit_tt_ids",
                "description": "An array of term taxonomy IDs for the given term."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_term_taxonomy",
        "description": "Fires immediately before a term taxonomy ID is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_term_taxonomy",
        "description": "Fires immediately after a term taxonomy ID is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_term",
        "description": "Fires after a term is deleted from the database and the cache is cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "mixed",
                "name": "$deleted_term",
                "description": "Copy of the already-deleted term, in the form specified                              by the parent function. WP_Error otherwise."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_{$taxonomy}",
        "description": "Fires after a term in a specific taxonomy is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$term",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "mixed",
                "name": "$deleted_term",
                "description": "Copy of the already-deleted term, in the form specified                              by the parent function. WP_Error otherwise."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_object_terms",
        "description": "Filter the terms for a given object or objects.",
        "arguments": [
            {
                "type": "array",
                "name": "$terms",
                "description": "An array of terms for the given object or objects."
            },
            {
                "type": "array",
                "name": "$object_id_array",
                "description": "Array of object IDs for which <code>$terms<\/code> were retrieved."
            },
            {
                "type": "array",
                "name": "$taxonomy_array",
                "description": "Array of taxonomies from which <code>$terms<\/code> were retrieved."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments for retrieving terms for the given                               object(s). See wp_get_object_terms() for details."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_object_terms",
        "description": "Filter the terms for a given object or objects.",
        "arguments": [
            {
                "type": "array",
                "name": "$terms",
                "description": "An array of terms for the given object or objects."
            },
            {
                "type": "int",
                "name": "$object_ids",
                "description": "Object ID or array of IDs."
            },
            {
                "type": "string",
                "name": "$taxonomies",
                "description": "SQL-formatted (comma-separated and quoted) list of taxonomy names."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments for retrieving terms for the given object(s).                              See {@see wp_get_object_terms()} for details."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_insert_term",
        "description": "Filter a term before it is sanitized and inserted into the database.",
        "arguments": [
            {
                "type": "string",
                "name": "$term",
                "description": "The term to add or update."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_terms",
        "description": "This action is documented in wp-includes\/taxonomy.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "edited_terms",
        "description": "This action is documented in wp-includes\/taxonomy.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "create_term",
        "description": "Fires immediately after a new term is created, before the term cache is cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "create_{$taxonomy}",
        "description": "Fires after a new term is created for a specific taxonomy.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "term_id_filter",
        "description": "Filter the term ID after a new term is created.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Taxonomy term ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "created_term",
        "description": "Fires after a new term is created, and after the term cache has been cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "created_{$taxonomy}",
        "description": "Fires after a new term in a specific taxonomy is created, and after the term cache has been cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_term_relationship",
        "description": "Fires immediately before an object-term relationship is added.",
        "arguments": [
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "added_term_relationship",
        "description": "Fires immediately after an object-term relationship is added.",
        "arguments": [
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "set_object_terms",
        "description": "Fires after an object's terms have been set.",
        "arguments": [
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "array",
                "name": "$terms",
                "description": "An array of object terms."
            },
            {
                "type": "array",
                "name": "$tt_ids",
                "description": "An array of term taxonomy IDs."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "bool",
                "name": "$append",
                "description": "Whether to append new terms to the old terms."
            },
            {
                "type": "array",
                "name": "$old_tt_ids",
                "description": "Old array of term taxonomy IDs."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_term_relationships",
        "description": "Fires immediately before an object-term relationship is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "array",
                "name": "$tt_ids",
                "description": "An array of term taxonomy IDs."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_term_relationships",
        "description": "Fires immediately after an object-term relationship is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "array",
                "name": "$tt_ids",
                "description": "An array of term taxonomy IDs."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_unique_term_slug_is_bad_slug",
        "description": "Filter whether the proposed unique term slug is bad.",
        "arguments": [
            {
                "type": "bool",
                "name": "$needs_suffix",
                "description": "Whether the slug needs to be made unique with a suffix."
            },
            {
                "type": "string",
                "name": "$slug",
                "description": "The slug."
            },
            {
                "type": "object",
                "name": "$term",
                "description": "Term object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_unique_term_slug",
        "description": "Filter the unique term slug.",
        "arguments": [
            {
                "type": "string",
                "name": "$slug",
                "description": "Unique term slug."
            },
            {
                "type": "object",
                "name": "$term",
                "description": "Term object."
            },
            {
                "type": "string",
                "name": "$original_slug",
                "description": "Slug originally passed to the function for testing."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_update_term_parent",
        "description": "Filter the term parent.",
        "arguments": [
            {
                "type": "int",
                "name": "$parent",
                "description": "ID of the parent term."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "array",
                "name": "$parsed_args",
                "description": "An array of potentially altered update arguments for the given term."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of update arguments for the given term."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_term_taxonomy",
        "description": "Fires immediate before a term-taxonomy relationship is updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "edited_term_taxonomy",
        "description": "Fires immediately after a term-taxonomy relationship is updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_term",
        "description": "Fires after a term has been updated, but before the term cache has been cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_{$taxonomy}",
        "description": "Fires after a term in a specific taxonomy has been updated, but before the term cache has been cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "edited_term",
        "description": "Fires after a term has been updated, and the term cache has been cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "edited_{$taxonomy}",
        "description": "Fires after a term for a specific taxonomy has been updated, and the term cache has been cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "clean_object_term_cache",
        "description": "Fires after the object term cache has been cleaned.",
        "arguments": [
            {
                "type": "array",
                "name": "$object_ids",
                "description": "An array of object IDs."
            },
            {
                "type": "string",
                "name": "$objet_type",
                "description": "Object type."
            }
        ],
        "type": "action"
    },
    {
        "text": "clean_term_cache",
        "description": "Fires once after each taxonomy's term cache has been cleaned.",
        "arguments": [
            {
                "type": "array",
                "name": "$ids",
                "description": "An array of term IDs."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "split_shared_term",
        "description": "Fires after a previously shared taxonomy term is split into two separate terms.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "ID of the formerly shared term."
            },
            {
                "type": "int",
                "name": "$new_term_id",
                "description": "ID of the new term created for the $term_taxonomy_id."
            },
            {
                "type": "int",
                "name": "$term_taxonomy_id",
                "description": "ID for the term_taxonomy row affected by the split."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy for the split term."
            }
        ],
        "type": "action"
    },
    {
        "text": "tag_link",
        "description": "Filter the tag link.",
        "arguments": [
            {
                "type": "string",
                "name": "$termlink",
                "description": "Tag link URL."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "category_link",
        "description": "Filter the category link.",
        "arguments": [
            {
                "type": "string",
                "name": "$termlink",
                "description": "Category link URL."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "term_link",
        "description": "Filter the term link.",
        "arguments": [
            {
                "type": "string",
                "name": "$termlink",
                "description": "Term link URL."
            },
            {
                "type": "object",
                "name": "$term",
                "description": "Term object."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "template_redirect",
        "description": "Fires before determining which template to load.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "exit_on_http_head",
        "description": "Filter whether to allow 'HEAD' requests to generate content.",
        "arguments": [
            {
                "type": "bool",
                "name": "$exit",
                "description": "Whether to exit without generating any content for 'HEAD' requests. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "do_robots",
        "description": "Fired when the template loader determines a robots.txt request.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "template_include",
        "description": "Filter the path of the current template before including it.",
        "arguments": [
            {
                "type": "string",
                "name": "$template",
                "description": "The path of the template to include."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$type}_template",
        "description": "Filter the path of the queried template by type.",
        "arguments": [
            {
                "type": "string",
                "name": "$template",
                "description": "Path to the template. See locate_template()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "stylesheet",
        "description": "Filter the name of current stylesheet.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheet",
                "description": "Name of the current stylesheet."
            }
        ],
        "type": "filter"
    },
    {
        "text": "stylesheet_directory",
        "description": "Filter the stylesheet directory path for current theme.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheet_dir",
                "description": "Absolute path to the current them."
            },
            {
                "type": "string",
                "name": "$stylesheet",
                "description": "Directory name of the current theme."
            },
            {
                "type": "string",
                "name": "$theme_root",
                "description": "Absolute path to themes directory."
            }
        ],
        "type": "filter"
    },
    {
        "text": "stylesheet_directory_uri",
        "description": "Filter the stylesheet directory URI.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheet_dir_uri",
                "description": "Stylesheet directory URI."
            },
            {
                "type": "string",
                "name": "$stylesheet",
                "description": "Name of the activated theme's directory."
            },
            {
                "type": "string",
                "name": "$theme_root_uri",
                "description": "Themes root URI."
            }
        ],
        "type": "filter"
    },
    {
        "text": "stylesheet_uri",
        "description": "Filter the URI of the current theme stylesheet.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheet_uri",
                "description": "Stylesheet URI for the current theme\/child theme."
            },
            {
                "type": "string",
                "name": "$stylesheet_dir_uri",
                "description": "Stylesheet directory URI for the current theme\/child theme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "locale_stylesheet_uri",
        "description": "Filter the localized stylesheet URI.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheet_uri",
                "description": "Localized stylesheet URI."
            },
            {
                "type": "string",
                "name": "$stylesheet_dir_uri",
                "description": "Stylesheet directory URI."
            }
        ],
        "type": "filter"
    },
    {
        "text": "template",
        "description": "Filter the name of the current theme.",
        "arguments": [
            {
                "type": "string",
                "name": "$template",
                "description": "Current theme's directory name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "template_directory",
        "description": "Filter the current theme directory path.",
        "arguments": [
            {
                "type": "string",
                "name": "$template_dir",
                "description": "The URI of the current theme directory."
            },
            {
                "type": "string",
                "name": "$template",
                "description": "Directory name of the current theme."
            },
            {
                "type": "string",
                "name": "$theme_root",
                "description": "Absolute path to the themes directory."
            }
        ],
        "type": "filter"
    },
    {
        "text": "template_directory_uri",
        "description": "Filter the current theme directory URI.",
        "arguments": [
            {
                "type": "string",
                "name": "$template_dir_uri",
                "description": "The URI of the current theme directory."
            },
            {
                "type": "string",
                "name": "$template",
                "description": "Directory name of the current theme."
            },
            {
                "type": "string",
                "name": "$theme_root_uri",
                "description": "The themes root URI."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_cache_themes_persistently",
        "description": "Filter whether to get the cache of the registered theme directories.",
        "arguments": [
            {
                "type": "bool",
                "name": "$cache_expiration",
                "description": "Whether to get the cache of the theme directories. Default false."
            },
            {
                "type": "string",
                "name": "$cache_directory",
                "description": "Directory to be searched for the cache."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_root",
        "description": "Filter the absolute path to the themes directory.",
        "arguments": [
            {
                "type": "string",
                "name": "$theme_root",
                "description": "Absolute path to themes directory."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_root_uri",
        "description": "Filter the URI for themes directory.",
        "arguments": [
            {
                "type": "string",
                "name": "$theme_root_uri",
                "description": "The URI for themes directory."
            },
            {
                "type": "string",
                "name": "$siteurl",
                "description": "WordPress web address which is set in General Options."
            },
            {
                "type": "string",
                "name": "$stylesheet_or_template",
                "description": "Stylesheet or template name of the theme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "switch_theme",
        "description": "Fires after the theme is switched.",
        "arguments": [
            {
                "type": "string",
                "name": "$new_name",
                "description": "Name of the new theme."
            },
            {
                "type": "\\WP_Theme",
                "name": "$new_theme",
                "description": "WP_Theme instance of the new theme."
            }
        ],
        "type": "action"
    },
    {
        "text": "validate_current_theme",
        "description": "Filter whether to validate the current theme.",
        "arguments": [
            {
                "type": "bool",
                "name": "",
                "description": "true Validation flag to check the current theme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_mod_{$name}",
        "description": "Filter the theme modification, or 'theme_mod', value.",
        "arguments": [
            {
                "type": "string",
                "name": "$current_mod",
                "description": "The value of the current theme modification."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_set_theme_mod_{$name}",
        "description": "Filter the theme mod value on save.",
        "arguments": [
            {
                "type": "string",
                "name": "$value",
                "description": "The new value of the theme mod."
            },
            {
                "type": "string",
                "name": "$old_value",
                "description": "The current value of the theme mod."
            }
        ],
        "type": "filter"
    },
    {
        "text": "editor_stylesheets",
        "description": "Filter the array of stylesheets applied to the editor.",
        "arguments": [
            {
                "type": "array",
                "name": "$stylesheets",
                "description": "Array of stylesheets to be applied to the editor."
            }
        ],
        "type": "filter"
    },
    {
        "text": "current_theme_supports-{$feature}",
        "description": "Filter whether the current theme supports a specific feature.",
        "arguments": [
            {
                "type": "bool",
                "name": "",
                "description": "true     Whether the current theme supports the given feature. Default true."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Array of arguments for the feature."
            },
            {
                "type": "string",
                "name": "$feature",
                "description": "The theme feature."
            }
        ],
        "type": "filter"
    },
    {
        "text": "after_switch_theme",
        "description": "Fires on the first WP load after a theme switch if the old theme still exists.",
        "arguments": [
            {
                "type": "string",
                "name": "$old_name",
                "description": "Old theme name."
            },
            {
                "type": "\\WP_Theme",
                "name": "$old_theme",
                "description": "WP_Theme instance of the old theme."
            }
        ],
        "type": "action"
    },
    {
        "text": "core_version_check_locale",
        "description": "Filter the locale requested for WordPress core translations.",
        "arguments": [
            {
                "type": "string",
                "name": "$locale",
                "description": "Current locale."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_maybe_auto_update",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "plugins_update_check_locales",
        "description": "Filter the locales requested for plugin translations.",
        "arguments": [
            {
                "type": "array",
                "name": "$locales",
                "description": "Plugin locale. Default is current locale of the site."
            }
        ],
        "type": "filter"
    },
    {
        "text": "themes_update_check_locales",
        "description": "Filter the locales requested for theme translations.",
        "arguments": [
            {
                "type": "array",
                "name": "$locales",
                "description": "Theme locale. Default is current locale of the site."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_update_data",
        "description": "Filter the returned array of update data for plugins, themes, and WordPress core.",
        "arguments": [
            {
                "type": "array",
                "name": "$update_data",
                "description": "{     Fetched update data.     @type array   $counts       An array of counts for available plugin, theme, and WordPress updates.     @type string  $update_title Titles of available updates. }"
            },
            {
                "type": "array",
                "name": "$titles",
                "description": "An array of update counts and UI strings for available updates."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_authenticate",
        "description": "Fires before the user is authenticated.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "Username, passed by reference."
            },
            {
                "type": "string",
                "name": "$user_password",
                "description": "User password, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "secure_signon_cookie",
        "description": "Filter whether to use a secure sign-on cookie.",
        "arguments": [
            {
                "type": "bool",
                "name": "$secure_cookie",
                "description": "Whether to use a secure sign-on cookie."
            },
            {
                "type": "array",
                "name": "$credentials",
                "description": "{     Array of entered sign-on data.     @type string $user_login    Username.     @type string $user_password Password entered.     @type bool   $remember      Whether to 'remember' the user. Increases the time                                 that the cookie will be kept. Default false. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_login",
        "description": "Fires after the user has successfully logged in.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "Username."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User object of the logged-in user."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_authenticate_user",
        "description": "Filter whether the given user can be authenticated with the provided $password.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User or WP_Error object if a previous                                   callback failed authentication."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "Password to check against the user."
            }
        ],
        "type": "filter"
    },
    {
        "text": "check_is_user_spammed",
        "description": "Filter whether the user has been marked as a spammer.",
        "arguments": [
            {
                "type": "bool",
                "name": "$spammed",
                "description": "Whether the user is considered a spammer."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User to check against."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_usernumposts",
        "description": "Filter the number of posts a user has written.",
        "arguments": [
            {
                "type": "int",
                "name": "$count",
                "description": "The user's post count."
            },
            {
                "type": "int",
                "name": "$userid",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$post_types",
                "description": "Post types to count the number of posts for."
            },
            {
                "type": "bool",
                "name": "$public_only",
                "description": "Whether to limit counted posts to public posts."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_user_option_{$option}",
        "description": "Filter a specific user option value.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$result",
                "description": "Value for the user's option."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option being retrieved."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User object of the user whose option is being retrieved."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_blogs_of_user",
        "description": "Filter the list of blogs a user belongs to.",
        "arguments": [
            {
                "type": "array",
                "name": "$blogs",
                "description": "An array of blog objects belonging to the user."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "bool",
                "name": "$all",
                "description": "Whether the returned blogs array should contain all blogs, including                       those marked 'deleted', 'archived', or 'spam'. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_dropdown_users",
        "description": "Filter the wp_dropdown_users() HTML output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML output generated by wp_dropdown_users()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_user_{$field}",
        "description": "Filter a user field value in the 'edit' context.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the prefixed user field."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_{$field}",
        "description": "Filter the value of a user field in the 'db' context.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the prefixed user field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_{$field}",
        "description": "Filter the value of a user field in a standard context.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "The user object value to sanitize."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The context to filter within."
            }
        ],
        "type": "filter"
    },
    {
        "text": "validate_username",
        "description": "Filter whether the provided username is valid or not.",
        "arguments": [
            {
                "type": "bool",
                "name": "$valid",
                "description": "Whether given username is valid."
            },
            {
                "type": "string",
                "name": "$username",
                "description": "Username to check."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_nicename",
        "description": "Filter a user's nicename before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_nicename",
                "description": "The user's nicename."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_url",
        "description": "Filter a user's URL before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$raw_user_url",
                "description": "The user's URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_email",
        "description": "Filter a user's email before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$raw_user_email",
                "description": "The user's email."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_nickname",
        "description": "Filter a user's nickname before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$nickname",
                "description": "The user's nickname."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_first_name",
        "description": "Filter a user's first name before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$first_name",
                "description": "The user's first name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_last_name",
        "description": "Filter a user's last name before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$last_name",
                "description": "The user's last name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_display_name",
        "description": "Filter a user's display name before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$display_name",
                "description": "The user's display name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_description",
        "description": "Filter a user's description before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$description",
                "description": "The user's description."
            }
        ],
        "type": "filter"
    },
    {
        "text": "profile_update",
        "description": "Fires immediately after an existing user is updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "object",
                "name": "$old_user_data",
                "description": "Object containing user's data prior to update."
            }
        ],
        "type": "action"
    },
    {
        "text": "user_register",
        "description": "Fires immediately after a new user is registered.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "send_password_change_email",
        "description": "Filter whether to send the password change email.",
        "arguments": [
            {
                "type": "bool",
                "name": "$send",
                "description": "Whether to send the email."
            },
            {
                "type": "array",
                "name": "$user",
                "description": "The original user array."
            },
            {
                "type": "array",
                "name": "$userdata",
                "description": "The updated user array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "send_email_change_email",
        "description": "Filter whether to send the email change email.",
        "arguments": [
            {
                "type": "bool",
                "name": "$send",
                "description": "Whether to send the email."
            },
            {
                "type": "array",
                "name": "$user",
                "description": "The original user array."
            },
            {
                "type": "array",
                "name": "$userdata",
                "description": "The updated user array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "password_change_email",
        "description": "Filter the contents of the email sent when the user's password is changed.",
        "arguments": [
            {
                "type": "array",
                "name": "$pass_change_email",
                "description": "{            Used to build wp_mail().            @type string $to      The intended recipients. Add emails in a comma separated string.            @type string $subject The subject of the email.            @type string $message The content of the email.                The following strings have a special meaning and will get replaced dynamically:                - ###USERNAME###    The current user's username.                - ###ADMIN_EMAIL### The admin email in case this was unexpected.                - ###EMAIL###       The old email.                - ###SITENAME###    The name of the site.                - ###SITEURL###     The URL to the site.            @type string $headers Headers. Add headers in a newline (\\r\\n) separated string.        }"
            },
            {
                "type": "array",
                "name": "$user",
                "description": "The original user array."
            },
            {
                "type": "array",
                "name": "$userdata",
                "description": "The updated user array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "email_change_email",
        "description": "Filter the contents of the email sent when the user's email is changed.",
        "arguments": [
            {
                "type": "array",
                "name": "$email_change_email",
                "description": "{            Used to build wp_mail().            @type string $to      The intended recipients.            @type string $subject The subject of the email.            @type string $message The content of the email.                The following strings have a special meaning and will get replaced dynamically:                - ###USERNAME###    The current user's username.                - ###ADMIN_EMAIL### The admin email in case this was unexpected.                - ###EMAIL###       The old email.                - ###SITENAME###    The name of the site.                - ###SITEURL###     The URL to the site.            @type string $headers Headers.        }"
            },
            {
                "type": "array",
                "name": "$user",
                "description": "The original user array."
            },
            {
                "type": "array",
                "name": "$userdata",
                "description": "The updated user array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_contactmethods",
        "description": "Filter the user contact methods.",
        "arguments": [
            {
                "type": "array",
                "name": "$methods",
                "description": "Array of contact methods and their labels."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "password_hint",
        "description": "Filter the text describing the site's password complexity policy.",
        "arguments": [
            {
                "type": "string",
                "name": "$hint",
                "description": "The password hint text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "password_reset_expiration",
        "description": "Filter the expiration time of password reset keys.",
        "arguments": [
            {
                "type": "int",
                "name": "$expiration",
                "description": "The expiration time in seconds."
            }
        ],
        "type": "filter"
    },
    {
        "text": "password_reset_key_expired",
        "description": "Filter the return value of check_password_reset_key() when an old-style key is used.",
        "arguments": [
            {
                "type": "\\WP_Error",
                "name": "$return",
                "description": "A WP_Error object denoting an expired key.                          Return a WP_User object to validate the key."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "The matched user ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "password_reset",
        "description": "Fires before the user's password is reset.",
        "arguments": [
            {
                "type": "object",
                "name": "$user",
                "description": "The user."
            },
            {
                "type": "string",
                "name": "$new_pass",
                "description": "New user password."
            }
        ],
        "type": "action"
    },
    {
        "text": "user_registration_email",
        "description": "Filter the email address of a user being registered.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_email",
                "description": "The email address of the new user."
            }
        ],
        "type": "filter"
    },
    {
        "text": "register_post",
        "description": "Fires when submitting registration form data, before the user is created.",
        "arguments": [
            {
                "type": "string",
                "name": "$sanitized_user_login",
                "description": "The submitted username after being sanitized."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "The submitted email."
            },
            {
                "type": "\\WP_Error",
                "name": "$errors",
                "description": "Contains any errors with submitted username and email,                                       e.g., an empty field, an invalid username or email,                                       or an existing username or email."
            }
        ],
        "type": "action"
    },
    {
        "text": "registration_errors",
        "description": "Filter the errors encountered when a new user is being registered.",
        "arguments": [
            {
                "type": "\\WP_Error",
                "name": "$errors",
                "description": "A WP_Error object containing any errors encountered                                       during registration."
            },
            {
                "type": "string",
                "name": "$sanitized_user_login",
                "description": "User's username after it has been sanitized."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User's email."
            }
        ],
        "type": "filter"
    },
    {
        "text": "use_google_chrome_frame",
        "description": "Filter whether Google Chrome Frame should be used, if available.",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_admin",
                "description": "Whether to use the Google Chrome Frame. Default is the value of is_admin()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "register_sidebar",
        "description": "Fires once a sidebar has been registered.",
        "arguments": [
            {
                "type": "array",
                "name": "$sidebar",
                "description": "Parsed arguments for the registered sidebar."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_register_sidebar_widget",
        "description": "Fires once for each registered widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$widget",
                "description": "An array of default widget arguments."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_unregister_sidebar_widget",
        "description": "Fires just before a widget is removed from a sidebar.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "The widget ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "dynamic_sidebar_before",
        "description": "This action is documented in wp-includes\/widgets.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "dynamic_sidebar_after",
        "description": "This action is documented in wp-includes\/widgets.php",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "dynamic_sidebar_params",
        "description": "Filter the parameters passed to a widget's display callback.",
        "arguments": [
            {
                "type": "array",
                "name": "$params",
                "description": "{     @type array $args  {         An array of widget display arguments.         @type string $name          Name of the sidebar the widget is assigned to.         @type string $id            ID of the sidebar the widget is assigned to.         @type string $description   The sidebar description.         @type string $class         CSS class applied to the sidebar container.         @type string $before_widget HTML markup to prepend to each widget in the sidebar.         @type string $after_widget  HTML markup to append to each widget in the sidebar.         @type string $before_title  HTML markup to prepend to the widget title when displayed.         @type string $after_title   HTML markup to append to the widget title when displayed.         @type string $widget_id     ID of the widget.         @type string $widget_name   Name of the widget.     }     @type array $widget_args {         An array of multi-widget arguments.         @type int $number Number increment used for multiples of the same widget.     } }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "dynamic_sidebar",
        "description": "Fires before a widget's display callback is called.",
        "arguments": [
            {
                "type": "array",
                "name": "$widget_id",
                "description": "{     An associative array of widget arguments.     @type string $name                Name of the widget.     @type string $id                  Widget ID.     @type array|callback $callback    When the hook is fired on the front-end, $callback is an array                                       containing the widget object. Fired on the back-end, $callback                                       is 'wp_widget_control', see $_callback.     @type array          $params      An associative array of multi-widget arguments.     @type string         $classname   CSS class applied to the widget container.     @type string         $description The widget description.     @type array          $_callback   When the hook is fired on the back-end, $_callback is populated                                       with an array containing the widget object, see $callback. }"
            }
        ],
        "type": "action"
    },
    {
        "text": "is_active_sidebar",
        "description": "Filter whether a dynamic sidebar is considered \"active\".",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_active_sidebar",
                "description": "Whether or not the sidebar should be considered \"active\".                                      In other words, whether the sidebar contains any widgets."
            },
            {
                "type": "int",
                "name": "$index",
                "description": "Index, name, or ID of the dynamic sidebar."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sidebars_widgets",
        "description": "Filter the list of sidebars and their widgets.",
        "arguments": [
            {
                "type": "array",
                "name": "$sidebars_widgets",
                "description": "An associative array of sidebars and their widgets."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_widget",
        "description": "Fires before rendering the requested widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$widget",
                "description": "The widget's class name."
            },
            {
                "type": "array",
                "name": "$instance",
                "description": "The current widget instance's settings."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of the widget's sidebar arguments."
            }
        ],
        "type": "action"
    },
    {
        "text": "opml_head",
        "description": "Fires in the OPML header.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "link_title",
        "description": "Filter the OPML outline link title text.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "The OPML outline title text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "shake_error_codes",
        "description": "Filter the error codes array for shaking the login form.",
        "arguments": [
            {
                "type": "array",
                "name": "$shake_error_codes",
                "description": "Error codes that shake the login form."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_enqueue_scripts",
        "description": "Enqueue scripts and styles for the login page.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "login_head",
        "description": "Fires in the login page header after scripts are enqueued.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "login_headerurl",
        "description": "Filter link URL of the header logo above login form.",
        "arguments": [
            {
                "type": "string",
                "name": "$login_header_url",
                "description": "Login header logo URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_headertitle",
        "description": "Filter the title attribute of the header logo above login form.",
        "arguments": [
            {
                "type": "string",
                "name": "$login_header_title",
                "description": "Login header logo title attribute."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_body_class",
        "description": "Filter the login page body classes.",
        "arguments": [
            {
                "type": "array",
                "name": "$classes",
                "description": "An array of body classes."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "The action that brought the visitor to the login page."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_message",
        "description": "Filter the message to display above the login form.",
        "arguments": [
            {
                "type": "string",
                "name": "$message",
                "description": "Login message text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_errors",
        "description": "Filter the error messages displayed above the login form.",
        "arguments": [
            {
                "type": "string",
                "name": "$errors",
                "description": "Login error message."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_messages",
        "description": "Filter instructional messages displayed above the login form.",
        "arguments": [
            {
                "type": "string",
                "name": "$messages",
                "description": "Login messages."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_footer",
        "description": "Fires in the login page footer.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "lostpassword_post",
        "description": "Fires before errors are returned from a password reset request.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "retreive_password",
        "description": "Fires before a new password is retrieved.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "The user login name."
            }
        ],
        "type": "action"
    },
    {
        "text": "retrieve_password",
        "description": "Fires before a new password is retrieved.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "The user login name."
            }
        ],
        "type": "action"
    },
    {
        "text": "allow_password_reset",
        "description": "Filter whether to allow a password to be reset.",
        "arguments": [
            {
                "type": "bool",
                "name": "",
                "description": "true           Whether to allow the password to be reset. Default true."
            },
            {
                "type": "int",
                "name": "$user_data->ID",
                "description": "The ID of the user attempting to reset a password."
            }
        ],
        "type": "filter"
    },
    {
        "text": "retrieve_password_title",
        "description": "Filter the subject of the password reset email.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Default email title."
            }
        ],
        "type": "filter"
    },
    {
        "text": "retrieve_password_message",
        "description": "Filter the message body of the password reset mail.",
        "arguments": [
            {
                "type": "string",
                "name": "$message",
                "description": "Default mail message."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "The activation key."
            },
            {
                "type": "string",
                "name": "$user_login",
                "description": "The username for the user."
            },
            {
                "type": "\\WP_User",
                "name": "$user_data",
                "description": "WP_User object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_init",
        "description": "Fires when the login form is initialized.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "login_form_{$action}",
        "description": "Fires before a specified login form action.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "post_password_expires",
        "description": "Filter the life span of the post password cookie.",
        "arguments": [
            {
                "type": "int",
                "name": "$expires",
                "description": "The expiry time, as passed to setcookie()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "logout_redirect",
        "description": "Filter the log out redirect URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$redirect_to",
                "description": "The redirect destination URL."
            },
            {
                "type": "string",
                "name": "$requested_redirect_to",
                "description": "The requested redirect destination URL passed as a parameter."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "The WP_User object for the user that's logging out."
            }
        ],
        "type": "filter"
    },
    {
        "text": "lostpassword_redirect",
        "description": "Filter the URL redirected to after submitting the lostpassword\/retrievepassword form.",
        "arguments": [
            {
                "type": "string",
                "name": "$lostpassword_redirect",
                "description": "The redirect destination URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "lost_password",
        "description": "Fires before the lost password form.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "lostpassword_form",
        "description": "Fires inside the lostpassword form tags, before the hidden fields.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "validate_password_reset",
        "description": "Fires before the password reset procedure is validated.",
        "arguments": [
            {
                "type": "object",
                "name": "$errors",
                "description": "WP Error object."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User object if the login and reset key match. WP_Error object otherwise."
            }
        ],
        "type": "action"
    },
    {
        "text": "resetpass_form",
        "description": "Fires following the 'Strength indicator' meter in the user password reset form.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User object of the user whose password is being reset."
            }
        ],
        "type": "action"
    },
    {
        "text": "registration_redirect",
        "description": "Filter the registration redirect URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$registration_redirect",
                "description": "The redirect destination URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "register_form",
        "description": "Fires following the 'E-mail' field in the user registration form.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "login_redirect",
        "description": "Filter the login redirect URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$redirect_to",
                "description": "The redirect destination URL."
            },
            {
                "type": "string",
                "name": "$requested_redirect_to",
                "description": "The requested redirect destination URL passed as a parameter."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User object if login was successful, WP_Error object otherwise."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_login_errors",
        "description": "Filter the login page errors.",
        "arguments": [
            {
                "type": "object",
                "name": "$errors",
                "description": "WP Error object."
            },
            {
                "type": "string",
                "name": "$redirect_to",
                "description": "Redirect destination URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_form",
        "description": "Fires following the 'Password' field in the login form.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp-mail.php",
        "description": "Fires to allow a plugin to do a complete takeover of Post by Email.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_mail_original_content",
        "description": "Filter the original content of the email.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "The original email content."
            }
        ],
        "type": "filter"
    },
    {
        "text": "phone_content",
        "description": "Filter the content of the post submitted by email before saving.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "The email content."
            }
        ],
        "type": "filter"
    },
    {
        "text": "publish_phone",
        "description": "Fires after a post submitted by email is published.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "The post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "muplugins_loaded",
        "description": "Fires once all must-use and network-activated plugins have loaded.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "plugins_loaded",
        "description": "Fires once activated plugins have loaded.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "sanitize_comment_cookies",
        "description": "Fires when comment cookies are sanitized.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "setup_theme",
        "description": "Fires before the theme is loaded.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "after_setup_theme",
        "description": "Fires after the theme is loaded.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "init",
        "description": "Fires after WordPress has finished loading but before any headers are sent.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_loaded",
        "description": "This hook is fired once WP, all plugins, and the theme are fully loaded and instantiated.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "signup_header",
        "description": "Fires within the head section of the site sign-up screen.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "signup_blogform",
        "description": "Fires after the site sign-up form.",
        "arguments": [
            {
                "type": "array",
                "name": "$errors",
                "description": "An array possibly containing 'blogname' or 'blog_title' errors."
            }
        ],
        "type": "action"
    },
    {
        "text": "signup_extra_fields",
        "description": "Fires at the end of the user registration form on the site sign-up form.",
        "arguments": [
            {
                "type": "array",
                "name": "$errors",
                "description": "An array possibly containing 'user_name' or 'user_email' errors."
            }
        ],
        "type": "action"
    },
    {
        "text": "signup_another_blog_init",
        "description": "Filter the default site sign-up variables.",
        "arguments": [
            {
                "type": "array",
                "name": "$signup_defaults",
                "description": "{     An array of default site sign-up variables.     @type string $blogname   The site blogname.     @type string $blog_title The site title.     @type array  $errors     An array possibly containing 'blogname' or 'blog_title' errors. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "signup_hidden_fields",
        "description": "Hidden sign-up form fields output when creating another site or user.",
        "arguments": [
            {
                "type": "string",
                "name": "$context",
                "description": "A string describing the steps of the sign-up process. The value can be                        'create-another-site', 'validate-user', or 'validate-site'."
            }
        ],
        "type": "action"
    },
    {
        "text": "signup_create_blog_meta",
        "description": "Filter the new site meta variables.",
        "arguments": [
            {
                "type": "array",
                "name": "$blog_meta_defaults",
                "description": "An array of default blog meta variables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "add_signup_meta",
        "description": "Filter the new default site meta variables.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta",
                "description": "{     An array of default site meta variables.     @type int $lang_id     The language ID.     @type int $blog_public Whether search engines should be discouraged from indexing the site. 1 for true, 0 for false. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "signup_finished",
        "description": "Fires when the site or user sign-up process is complete.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "signup_user_init",
        "description": "Filter the default user variables used on the user sign-up form.",
        "arguments": [
            {
                "type": "array",
                "name": "$signup_user_defaults",
                "description": "{     An array of default user variables.     @type string $user_name  The user username.     @type string $user_email The user email address.     @type array  $errors     An array of possible errors relevant to the sign-up user. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "signup_blog_init",
        "description": "Filter the default site creation variables for the site sign-up form.",
        "arguments": [
            {
                "type": "array",
                "name": "$signup_blog_defaults",
                "description": "{     An array of default site creation variables.     @type string $user_name  The user username.     @type string $user_email The user email address.     @type string $blogname   The blogname.     @type string $blog_title The title of the site.     @type array  $errors     An array of possible errors relevant to new site creation variables. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "before_signup_form",
        "description": "Fires before the site sign-up form.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wpmu_active_signup",
        "description": "Filter the type of site sign-up.",
        "arguments": [
            {
                "type": "string",
                "name": "$active_signup",
                "description": "String that returns registration type. The value can be                              'all', 'none', 'blog', or 'user'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "preprocess_signup_form",
        "description": "Fires when the site sign-up form is sent.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "after_signup_form",
        "description": "Fires after the sign-up forms, before wp_footer.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "trackback_post",
        "description": "Fires after a trackback is added to a post.",
        "arguments": [
            {
                "type": "int",
                "name": "$trackback_id",
                "description": "Trackback ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_rsd_apis",
        "description": "Add additional APIs to the Really Simple Discovery (RSD) endpoint.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_xmlrpc_server_class",
        "description": "Filter the class used for handling XML-RPC requests.",
        "arguments": [
            {
                "type": "string",
                "name": "$class",
                "description": "The name of the XML-RPC server class."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mercator_aliases_bulk_action-{$action}",
        "description": "",
        "arguments": [

        ],
        "type": "action_reference"
    },
    {
        "text": "mercator_aliases_bulk_messages",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "jetpack_tachyon_skip_for_url",
        "description": "Copyright: Automattic Inc Copyright: Human Made Limited",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "jetpack_tachyon_pre_image_url",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "jetpack_tachyon_pre_args",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_parser_before_content",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_parser_after_content",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_parser_return_type",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_parser_return_desc",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_parser_arguments_have_default_values",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_parser_is_function_deprecated",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_parser_get_arguments",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_parser_get_hook_arguments",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_parser_prototype",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_parser_hook_prototype",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_parser_source_link_base",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wp_parser_source_link_format",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "{$plugin_file)}",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "good_doc_static_action",
        "description": "This is a well documented action.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to update."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "good_doc_dynamic_action_{$option}",
        "description": "This is a well documented dynamic action.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to update."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "good_doc_double_quotes_dynamic_action_{$option}",
        "description": "This is a well documented dynamic action.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to update."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "missing_since_static_action",
        "description": "This is an action missing the \"since\" line.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to update."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "missing_since_dynamic_action_{$option}",
        "description": "This is a dynamic action missing the \"since\" line.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to update."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "missing_since_double_quotes_dynamic_action_{$option}",
        "description": "This is a dynamic action missing the \"since\" line.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to update."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "missing_param_static_action",
        "description": "This is an action missing a \"param\" line.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to update."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "missing_param_dynamic_action_{$option}",
        "description": "This is a well documented dynamic action.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to update."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "missing_param_double_quotes_dynamic_action_{$option}",
        "description": "This is a well documented dynamic action.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to update."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "no_doc_static_action",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "no_doc_dynamic_action_{$option}",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "no_doc_double_quotes_dymanic_action_{$option}",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "deprecated_filter",
        "description": "This filter should be marked as deprecated since 1.0",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "deprecated_action",
        "description": "This action should be marked as deprecated since 1.0",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "good_static_filter",
        "description": "This is a well documented filter.",
        "arguments": [
            {
                "type": "array",
                "name": "$mce_translation",
                "description": "Key\/value pairs of strings."
            },
            {
                "type": "string",
                "name": "$mce_locale",
                "description": "Locale."
            }
        ],
        "type": "filter"
    },
    {
        "text": "good_dynamic_filter_{$option}",
        "description": "This is a well documented dynamic filter.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new, unserialized option value."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "good_double_quotes_dynamic_filter_{$option}",
        "description": "This is a well documented dynamic filter.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new, unserialized option value."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "missing_since_static_filter",
        "description": "This is a filter missing the \"since\" line.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new, unserialized option value."
            },
            {
                "type": "string",
                "name": "$mce_locale",
                "description": "Locale."
            }
        ],
        "type": "filter"
    },
    {
        "text": "missing_since_dynamic_filter_{$option}",
        "description": "This is a dynamic filter missing the \"since\" line.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new, unserialized option value."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "missing_since_double_quotes_dynamic_filter_{$option}",
        "description": "This is a dynamic filter missing the \"since\" line.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new, unserialized option value."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "missing_param_static_filter",
        "description": "This is a filter missing one \"param\" line.",
        "arguments": [
            {
                "type": "string",
                "name": "$mce_locale",
                "description": "Locale."
            }
        ],
        "type": "filter"
    },
    {
        "text": "missing_param_dynamic_filter_{$option}",
        "description": "This is a dynamic filter missing one \"param\" line.",
        "arguments": [
            {
                "type": "string",
                "name": "$mce_locale",
                "description": "Locale."
            }
        ],
        "type": "filter"
    },
    {
        "text": "missing_param_double_quotes_dynamic_filter_{$option}",
        "description": "This is a dynamic filter missing one \"param\" line.",
        "arguments": [
            {
                "type": "string",
                "name": "$mce_locale",
                "description": "Locale."
            }
        ],
        "type": "filter"
    },
    {
        "text": "multiple_since_tags",
        "description": "This is a filter with multiple since tags",
        "arguments": [
            {
                "type": "string",
                "name": "$first_parameter",
                "description": ""
            },
            {
                "type": "string",
                "name": "$second_parameter",
                "description": ""
            }
        ],
        "type": "filter"
    },
    {
        "text": "no_doc_static_filter",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "no_doc_dynamic_filter_{$option}",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "no_doc_double_quotes_dynamic_filter_{$option}",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "relate-hook",
        "description": "A relationship hook",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "p2p_registered_connection_type",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "p2p_created_connection",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "p2p_delete_connections",
        "description": "",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "wp_rest_server_class",
        "description": "Filter the REST Server Class.",
        "arguments": [
            {
                "type": "string",
                "name": "$class_name",
                "description": "The name of the server class. Default 'WP_REST_Server'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_api_init",
        "description": "Fires when preparing to serve an API request.",
        "arguments": [
            {
                "type": "\\WP_REST_Server",
                "name": "$wp_rest_server",
                "description": "Server object."
            }
        ],
        "type": "action"
    },
    {
        "text": "rest_url_prefix",
        "description": "Filter the REST URL prefix.",
        "arguments": [
            {
                "type": "string",
                "name": "$prefix",
                "description": "URL prefix. Default 'wp-json'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_url",
        "description": "Filter the REST URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "REST URL."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "REST route."
            },
            {
                "type": "int",
                "name": "$blod_ig",
                "description": "Blog ID."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Sanitization scheme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_avatar_sizes",
        "description": "Filter the REST avatar sizes.",
        "arguments": [
            {
                "type": "array",
                "name": "$sizes",
                "description": "An array of int values that are the pixel sizes for avatars.                     Default <code>[ 24, 48, 96 ]<\/code>."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpthumb_create_args_from_size",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wpthumb_post_image_path",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "wpthumb_post_image_args",
        "description": "",
        "arguments": [

        ],
        "type": "filter"
    },
    {
        "text": "the_category_list",
        "description": "Filter the categories before building the category list.",
        "arguments": [
            {
                "type": "array",
                "name": "$categories",
                "description": "An array of the post's categories."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "ID of the post we're retrieving categories for. When <code>false<\/code>, we assume the                             current post in the loop."
            }
        ],
        "type": "filter"
    },
    {
        "text": "duplicate_comment_id",
        "description": "Filters the ID, if any, of the duplicate comment found when creating a new comment.",
        "arguments": [
            {
                "type": "int",
                "name": "$dupe_id",
                "description": "ID of the comment identified as a duplicate."
            },
            {
                "type": "array",
                "name": "$commentdata",
                "description": "Data for the comment being created."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_page_of_comment",
        "description": "Filters the calculated page on which a comment appears.",
        "arguments": [
            {
                "type": "int",
                "name": "$page",
                "description": "Comment page."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "{     Arguments used to calculate pagination. These include arguments auto-detected by the function,     based on query vars, system settings, etc. For pristine arguments passed to the function,     see <code>$original_args<\/code>.     @type string $type      Type of comments to count.     @type int    $page      Calculated current page.     @type int    $per_page  Calculated number of comments per page.     @type int    $max_depth Maximum comment threading depth allowed. }"
            },
            {
                "type": "array",
                "name": "$original_args",
                "description": "{     Array of arguments passed to the function. Some or all of these may not be set.     @type string $type      Type of comments to count.     @type int    $page      Current comment page.     @type int    $per_page  Number of comments per page.     @type int    $max_depth Maximum comment threading depth allowed. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_excerpt_length",
        "description": "Filter the amount of words used in the comment excerpt.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_excerpt_length",
                "description": "The amount of words you want to display in the comment excerpt."
            }
        ],
        "type": "filter"
    },
    {
        "text": "respond_link",
        "description": "Filter the respond link when a post has no comments.",
        "arguments": [
            {
                "type": "string",
                "name": "$respond_link",
                "description": "The default response link."
            },
            {
                "type": "integer",
                "name": "$id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_discovery_links",
        "description": "Filter the oEmbed discovery links HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML of the discovery links."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_embed_url",
        "description": "Filter the URL to embed a specific post.",
        "arguments": [
            {
                "type": "string",
                "name": "$embed_url",
                "description": "The post embed URL."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The corresponding post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_endpoint_url",
        "description": "Filter the oEmbed endpoint URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The URL to the oEmbed endpoint."
            },
            {
                "type": "string",
                "name": "$permalink",
                "description": "The permalink used for the <code>url<\/code> query arg."
            },
            {
                "type": "string",
                "name": "$format",
                "description": "The requested response format."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_html",
        "description": "Filter the oEmbed HTML output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The default HTML."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Current post object."
            },
            {
                "type": "int",
                "name": "$width",
                "description": "Width of the response."
            },
            {
                "type": "int",
                "name": "$height",
                "description": "Height of the response."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_min_max_width",
        "description": "Filter the allowed minimum and maximum widths for the oEmbed response.",
        "arguments": [
            {
                "type": "array",
                "name": "$min_max_width",
                "description": "{     Minimum and maximum widths for the oEmbed response.     @type int $min Minimum width. Default 200.     @type int $max Maximum width. Default 600. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_response_data",
        "description": "Filter the oEmbed response data.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "The response data."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post object."
            },
            {
                "type": "int",
                "name": "$width",
                "description": "The requested width."
            },
            {
                "type": "int",
                "name": "$height",
                "description": "The calculated height."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_excerpt_embed",
        "description": "Filter the post excerpt for the embed template.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The current post excerpt."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_head",
        "description": "Print scripts or data in the embed template <head> tag.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "oembed_thumbnail_image_size",
        "description": "Filter the thumbnail image size for use in the embed template.",
        "arguments": [
            {
                "type": "string",
                "name": "$image_size",
                "description": "Thumbnail image size."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_thumbnail_image_shape",
        "description": "Filter the thumbnail shape for use in the embed template.",
        "arguments": [
            {
                "type": "string",
                "name": "$shape",
                "description": "Thumbnail image shape. Either 'rectangular' or 'square'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_content",
        "description": "Print additional content after the embed excerpt.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "oembed_site_icon_url",
        "description": "Filters the site icon URL for use in the embed template.",
        "arguments": [
            {
                "type": "string",
                "name": "$site_icon_url",
                "description": "The site icon URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_content_meta",
        "description": "Print additional meta content in the embed template.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "oembed_footer",
        "description": "Print scripts or data before the closing body tag in the embed template.",
        "arguments": [

        ],
        "type": "action"
    },
    {
        "text": "do_feed_{$feed}",
        "description": "Fires once the given feed is loaded.",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_comment_feed",
                "description": "Whether the feed is a comment feed."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "The feed name."
            }
        ],
        "type": "action"
    },
    {
        "text": "feed_links_show_posts_feed",
        "description": "Filter whether to display the posts feed link.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show",
                "description": "Whether to display the posts feed link. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "feed_links_show_comments_feed",
        "description": "Filter whether to display the comments feed link.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show",
                "description": "Whether to display the comments feed link. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_{$adjacent}_post_excluded_terms",
        "description": "Filter the excluded term ids",
        "arguments": [
            {
                "type": "string",
                "name": "$excluded_terms",
                "description": "Array of excluded term IDs."
            }
        ],
        "type": "filter"
    },
    {
        "text": "navigation_markup_template",
        "description": "Filter the navigation markup template.",
        "arguments": [
            {
                "type": "string",
                "name": "$template",
                "description": "The default template."
            },
            {
                "type": "string",
                "name": "$class",
                "description": "The class passed by the calling function."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_image_srcset_array",
        "description": "Filter the output of wp_get_attachment_image_srcset_array().",
        "arguments": [
            {
                "type": "array",
                "name": "$sources",
                "description": "An array of image urls and widths."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Attachment ID for image."
            },
            {
                "type": "array",
                "name": "$size",
                "description": "Size of image, either array or string."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_image_srcset",
        "description": "Filter the output of wp_get_attachment_image_srcset().",
        "arguments": [
            {
                "type": "string",
                "name": "$srcset",
                "description": "A source set formated for a <code>srcset<\/code> attribute."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Attachment ID for image."
            },
            {
                "type": "array",
                "name": "$size",
                "description": "Size of image, either array or string."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_image_sizes_args",
        "description": "Filter arguments used to create 'sizes' attribute.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments used to create a 'sizes' attribute."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Post ID of the original image."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Name of the image size being used."
            }
        ],
        "type": "filter"
    },
    {
        "text": "after_signup_site",
        "description": "Fires after site signup information has been written to the database.",
        "arguments": [
            {
                "type": "string",
                "name": "$domain",
                "description": "The requested domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The requested path."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "The requested site title."
            },
            {
                "type": "string",
                "name": "$user",
                "description": "The user's requested login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "The user's email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "The user's activation key"
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "By default, contains the requested privacy setting and lang_id."
            }
        ],
        "type": "action"
    },
    {
        "text": "after_signup_user",
        "description": "Fires after a user's signup information has been written to the database.",
        "arguments": [
            {
                "type": "string",
                "name": "$user",
                "description": "The user's requested login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "The user's email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "The user's activation key"
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Additional signup meta. By default, this is an empty array."
            }
        ],
        "type": "action"
    },
    {
        "text": "ms_network_not_found",
        "description": "Fires when a network cannot be found based on the requested domain and path.",
        "arguments": [
            {
                "type": "string",
                "name": "$domain",
                "description": "The domain used to search for a network."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The path used to search for a path."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_add_nav_menu_item",
        "description": "Fires immediately after a new navigation menu item has been added.",
        "arguments": [
            {
                "type": "int",
                "name": "$menu_id",
                "description": "ID of the updated menu."
            },
            {
                "type": "int",
                "name": "$menu_item_db_id",
                "description": "ID of the new menu item."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments used to update\/add the menu item."
            }
        ],
        "type": "action"
    },
    {
        "text": "expiration_of_transient_{$transient}",
        "description": "Filter the expiration for a transient before its value is set.",
        "arguments": [
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds. Use 0 for no expiration."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "New value of transient."
            },
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "expiration_of_site_transient_{$transient}",
        "description": "Filter the expiration for a site transient before its value is set.",
        "arguments": [
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds. Use 0 for no expiration."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "New value of site transient."
            },
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mail_failed",
        "description": "Fires after a phpmailerException is caught.",
        "arguments": [
            {
                "type": "\\WP_Error",
                "name": "$error",
                "description": "A WP_Error object with the phpmailerException code, message, and an array                        containing the mail recipient, subject, message, headers, and attachments."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_verify_nonce_failed",
        "description": "Fires when nonce verification fails.",
        "arguments": [
            {
                "type": "string",
                "name": "$nonce",
                "description": "The invalid nonce."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "The nonce action."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "The current user object."
            },
            {
                "type": "string",
                "name": "$token",
                "description": "The user's session token."
            }
        ],
        "type": "action"
    },
    {
        "text": "register_post_type_args",
        "description": "Filter the arguments for registering a post type.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Array of arguments for registering a post type."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type key."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_delete_post",
        "description": "Filter whether a post deletion should take place.",
        "arguments": [
            {
                "type": "bool",
                "name": "$delete",
                "description": "Whether to go forward with deletion."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            },
            {
                "type": "bool",
                "name": "$force_delete",
                "description": "Whether to bypass the trash."
            }
        ],
        "type": "filter"
    },
    {
        "text": "attachment_updated",
        "description": "Fires once an existing attachment has been updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post_after",
                "description": "Post object following the update."
            },
            {
                "type": "\\WP_Post",
                "name": "$post_before",
                "description": "Post object before the update."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_get_lastpostmodified",
        "description": "Pre-filter the return value of get_lastpostmodified() before the query is run.",
        "arguments": [
            {
                "type": "string",
                "name": "$lastpostmodified",
                "description": "Date the last post was modified.                                 Returning anything other than false will short-circuit the function."
            },
            {
                "type": "string",
                "name": "$timezone",
                "description": "Location to use for getting the post modified date.                                 See {@see get_lastpostdate()} for accepted <code>$timezone<\/code> values."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "The post type to check."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_post_revision_title_expanded",
        "description": "Filter the formatted author and date for a revision.",
        "arguments": [
            {
                "type": "string",
                "name": "$revision_date_author",
                "description": "The formatted string."
            },
            {
                "type": "\\WP_Post",
                "name": "$revision",
                "description": "The revision object."
            },
            {
                "type": "bool",
                "name": "$link",
                "description": "Whether to link to the revisions page, as passed into                                      wp_post_revision_title_expanded()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "old_slug_redirect_url",
        "description": "Filter the old slug redirect URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The redirect URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mejs_settings",
        "description": "Filter the MediaElement configuration settings.",
        "arguments": [
            {
                "type": "array",
                "name": "$mejs_settings",
                "description": "MediaElement settings array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "register_taxonomy_args",
        "description": "Filter the arguments for registering a taxonomy.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Array of arguments for registering a taxonomy."
            },
            {
                "type": "array",
                "name": "$object_type",
                "description": "Array of names of object types for the taxonomy."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy key."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_template",
        "description": "Filter the template used for embedded posts.",
        "arguments": [
            {
                "type": "string",
                "name": "$template",
                "description": "Path to the template file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_dropdown_users_args",
        "description": "Filter the query arguments for the user drop-down.",
        "arguments": [
            {
                "type": "array",
                "name": "$query_args",
                "description": "The query arguments for wp_dropdown_users()."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "The default arguments for wp_dropdown_users()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "clean_user_cache",
        "description": "Fires immediately after the given user's cache is cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User object."
            }
        ],
        "type": "action"
    },
    {
        "text": "insert_user_meta",
        "description": "Filter a user's meta values and keys before the user is created or updated.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta",
                "description": "{     Default meta values and keys for the user.     @type string   $nickname             The user's nickname. Default is the the user's username.     @type string   $first_name           The user's first name.     @type string   $last_name            The user's last name.     @type string   $description          The user's description.     @type bool     $rich_editing         Whether to enable the rich-editor for the user. False if not empty.     @type bool     $comment_shortcuts    Whether to enable keyboard shortcuts for the user. Default false.     @type string   $admin_color          The color scheme for a user's admin screen. Default 'fresh'.     @type int|bool $use_ssl              Whether to force SSL on the user's admin area. 0|false if SSL is                                          not forced.     @type bool     $show_admin_bar_front Whether to show the admin bar on the front end for the user.                                          Default true. }"
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User object."
            },
            {
                "type": "bool",
                "name": "$update",
                "description": "Whether the user is being updated rather than created."
            }
        ],
        "type": "filter"
    },
    {
        "text": "after_password_reset",
        "description": "Fires after the user's password is reset.",
        "arguments": [
            {
                "type": "object",
                "name": "$user",
                "description": "The user."
            },
            {
                "type": "string",
                "name": "$new_pass",
                "description": "New user password."
            }
        ],
        "type": "action"
    },
    {
        "text": "register_new_user",
        "description": "Fires after a new user registration has been recorded.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the newly registered user."
            }
        ],
        "type": "action"
    },
    {
        "text": "signup_get_available_languages",
        "description": "Filter the list of available languages for front-end site signups.",
        "arguments": [
            {
                "type": "array",
                "name": "$available_languages",
                "description": "Available languages."
            }
        ],
        "type": "filter"
    },
    {
        "text": "before_signup_header",
        "description": "Fires before the Site Signup page is loaded.",
        "arguments": [

        ],
        "type": "action"
    }
]
